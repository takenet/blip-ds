{"version":3,"names":["inputCss","Input","exports","class_1","hostRef","_this","this","isPressed","isPassword","validationMesage","validationDanger","inputName","type","label","placeholder","autoCapitalize","autoComplete","readonly","helperMessage","errorMessage","successMessage","icon","disabled","danger","success","value","counterLength","counterLengthRule","isSubmit","isTextarea","rows","cols","autoResize","resizable","minHeight","maxHeight","iconSize","debounceDelay","dataTest","encode","keyPressWrapper","event","key","bdsSubmit","emit","clearTextInput","preventDefault","bdsKeyDownBackspace","onInput","ev","onBdsInputValidations","input","target","updateTextarea","bdsInput","onBlur","onBlurValidations","bdsOnBlur","onFocus","bdsFocus","onClickWrapper","nativeInput","focus","stopPropagation","prototype","setFocus","removeFocus","getInputElement","isValid","validity","valid","clear","encodeValue","lt","gt","ap","ic","amp","slash","toString","replace","valueChanged","newValue","changeValue","bdsChange","autoResizeTextarea","textarea","style","height","scrollHeight","newHeight","Math","min","max","concat","debouncedAutoResize","autoResizeDebounceTimer","clearTimeout","window","setTimeout","immediate","renderIcon","iconSizeValue","isLargeIcon","h","class","input__icon","size","name","color","renderLabel","input__container__label","variant","bold","renderMessage","message","styles","part","theme","undefined","required","requiredValidation","pattern","patternValidation","minlength","maxlength","lengthValidation","minMaxValidation","checkValidity","emailValidation","numberValidation","regex","RegExp","bdsPatternValidation","test","valueMissing","requiredErrorMessage","tooShort","minlengthErrorMessage","tooLong","rangeUnderflow","minErrorMessage","rangeOverflow","maxErrorMessage","emailErrorMessage","numberErrorMessage","componentDidUpdate","componentDidLoad","disconnectedCallback","render","Element","Host","onClick","onKeyDown","input__container__wrapper","chips","input__container__wrapper__chips","input__container__text","input__container__text__chips","ref","autocapitalize","autocomplete","minLength","maxLength","readOnly","resize","Object","assign","length","active"],"sources":["src/components/input/input.scss?tag=bds-input&encapsulation=shadow","src/components/input/input.tsx"],"sourcesContent":["@use '../../globals/helpers' as *;\n\n$input-padding: 8px 4px 8px 12px;\n$input-padding-label: 7px 4px 8px 12px;\n$input-padding-textarea: 12px 12px 12px 12px;\n$input-padding-textarea-label: 12px 12px 12px 12px;\n$input-width: 100%;\n\n@mixin input-text {\n  font-family: $font-family;\n  font-size: $fs-14;\n  line-height: 22px;\n}\n\n@mixin input-border($color, $boxShadow: false) {\n  border: 1px solid $color;\n  box-sizing: border-box;\n  border-radius: 8px;\n\n  @if ($boxShadow) {\n    -webkit-box-shadow: 0 0 0 2px $boxShadow;\n    box-shadow: 0 0 0 2px $boxShadow;\n  }\n}\n\n@mixin input-theme($name, $primary, $secondary, $label, $text, $border, $hover, $focus) {\n  $color-input-primary: $primary;\n  $color-input-secondary: $secondary;\n  $color-input-label: $label;\n  $color-input-text: $text;\n  $color-input-border: $border;\n  $color-input-hover: $hover;\n  $color-input-focus: $focus;\n\n  @if ($name == 'disabled') {\n    background: $color-surface-2;\n  }\n\n  @include input-border($color-input-border);\n\n  // States\n  &:hover {\n    @include input-border($color-input-primary);\n\n    @if ($name == 'disabled') {\n      @include input-border($color-input-border);\n    }\n  }\n\n  &.input--pressed {\n    @include input-border($color-input-primary, $color-input-focus);\n    .input__icon {\n      .bds-icon {\n        color: $color-input-primary;\n      }\n    }\n  }\n\n  .input__container__label {\n    color: $color-input-label;\n\n    &--pressed {\n      bds-typo {\n        color: $color-input-primary;\n      }\n    }\n  }\n\n  .input__container__text {\n    caret-color: $color-input-primary;\n    color: $color-input-text;\n  }\n}\n\n:host {\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  width: 100%;\n  max-width: 100%;\n  max-height: 100%;\n\n  input,\n  textarea {\n    box-shadow: inherit;\n    &::placeholder {\n      color: $color-content-ghost;\n      opacity: 1;\n    }\n\n    &::-webkit-input-placeholder {\n      color: $color-content-ghost;\n      opacity: 1;\n    }\n  }\n}\n\n.input {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  padding: $input-padding;\n  flex: 1;\n  width: 100%;\n  max-width: 100%;\n  max-height: 100%;\n  gap: 8px;\n\n  .bds-icon {\n    position: relative;\n    z-index: 1;\n  }\n\n  // Textarea specific styling\n  &--textarea {\n    padding: $input-padding-textarea;\n    align-items: flex-start;\n\n    &.input--label {\n      padding: $input-padding-textarea-label;\n    }\n\n    .input__icon {\n      margin-top: 1px; // Align icon with first line of text\n\n      &--textarea {\n        align-self: flex-start;\n      }\n    }\n  }\n\n  &--state {\n    &-primary {\n      .input__icon {\n        position: relative;\n        &::before {\n          content: '';\n          position: absolute;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          background-color: $color-hover;\n          z-index: 0;\n          border-radius: 8px;\n        }\n      }\n      @include input-theme(\n        'primary',\n        $color-primary,\n        $color-surface-1,\n        $color-content-default,\n        $color-content-default,\n        $color-border-1,\n        $color-primary,\n        $color-info\n      );\n    }\n\n    &-danger {\n      .input__icon {\n        position: relative;\n        &::before {\n          content: '';\n          position: absolute;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          background-color: $color-surface-negative;\n          z-index: 0;\n          opacity: 50%;\n          border-radius: 8px;\n        }\n      }\n      @include input-theme(\n        'danger',\n        $color-negative,\n        $color-error,\n        $color-delete,\n        $color-content-default,\n        $color-delete,\n        $color-delete,\n        $color-error\n      );\n    }\n\n    &-success {\n      .input__icon {\n        position: relative;\n        &::before {\n          content: '';\n          position: absolute;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          background-color: $color-surface-positive;\n          z-index: 0;\n          border-radius: 8px;\n        }\n      }\n      @include input-theme(\n        'success',\n        $color-positive,\n        $color-success,\n        $color-content-default,\n        $color-content-default,\n        $color-border-1,\n        $color-content-default,\n        $color-success\n      );\n    }\n\n    &-disabled {\n      .input__icon {\n        position: relative;\n        &::before {\n          content: '';\n          position: absolute;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          background-color: $color-hover;\n          z-index: 0;\n          opacity: 50%;\n          border-radius: 8px;\n        }\n      }\n      opacity: 50%;\n      pointer-events: none;\n      cursor: not-allowed;\n    }\n  }\n\n  & .icon-success {\n    color: $color-positive;\n    margin-left: 4px;\n    margin-top: 1px; // Align with text baseline\n  }\n\n  &--label {\n    padding: $input-padding-label;\n\n    &.input--textarea {\n      padding: $input-padding-textarea-label;\n    }\n  }\n\n  &__icon {\n    cursor: inherit;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: 8px;\n    padding: 2px;\n    flex-shrink: 0;\n\n    &--textarea {\n      align-self: flex-start;\n      margin-top: 1px;\n    }\n  }\n\n  &__container {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    width: 100%;\n    flex: 1;\n\n    &__wrapper {\n      display: flex;\n      flex-wrap: wrap;\n\n      &--textarea {\n        flex-direction: column;\n        flex-wrap: nowrap;\n      }\n    }\n\n    &__wrapper__chips {\n      @include custom-scroll();\n      display: inline;\n      max-height: 100px;\n      overflow: auto;\n    }\n\n    &__label {\n      display: flex;\n      align-items: center;\n      margin-bottom: 2px;\n    }\n\n    &__text {\n      @include reset-input();\n      @include input-text();\n      @include custom-scroll();\n\n      resize: none;\n      cursor: inherit;\n      width: 100%;\n      min-height: auto;\n\n      &--textarea {\n        resize: vertical;\n        overflow-y: auto;\n        line-height: 20px;\n        padding: 0;\n\n        // Custom scrollbar styling for textarea\n        &::-webkit-scrollbar {\n          width: 8px;\n        }\n\n        &::-webkit-scrollbar-track {\n          background: transparent;\n        }\n\n        &::-webkit-scrollbar-thumb {\n          background: $color-border-2;\n          border-radius: 4px;\n\n          &:hover {\n            background: $color-content-ghost;\n          }\n        }\n\n        // Firefox scrollbar styling\n        scrollbar-width: thin;\n        scrollbar-color: $color-border-2 transparent;\n      }\n\n      &[type='date'] {\n        &::-webkit-calendar-picker-indicator {\n          opacity: 0;\n          pointer-events: none;\n        }\n      }\n    }\n  }\n\n  &__message {\n    display: flex;\n    align-items: baseline;\n    height: 20px;\n    margin: 3.7px 2.5px;\n    gap: 4px;\n    transition: 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n    color: $color-content-disable;\n    word-break: break-word;\n    height: auto;\n    min-height: 20px;\n    bds-typo {\n      margin-top: 0px;\n      align-self: self-start;\n    }\n\n    &__icon {\n      display: flex;\n      margin-top: 0px;\n      flex-shrink: 0;\n    }\n\n    &--danger {\n      .input__message__icon {\n        .bds-icon {\n          color: $color-negative;\n        }\n      }\n      .input__message__text {\n        color: $color-negative;\n      }\n    }\n    &--success {\n      .input__message__icon {\n        .bds-icon {\n          color: $color-positive;\n        }\n      }\n      .input__message__text {\n        color: $color-content-default;\n      }\n    }\n  }\n}\n\n// Legacy classes for backward compatibility\n.input__container {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  width: 100%;\n\n  &__label {\n    display: flex;\n    align-items: center;\n  }\n}\n\n.input__container__wrapper {\n  display: flex;\n  flex-wrap: nowrap;\n}\n\n.input__container__text {\n  @include reset-input();\n  @include input-text();\n  width: 100%;\n  resize: none;\n  cursor: inherit;\n\n  &__chips {\n    width: auto;\n    min-width: 216px;\n    max-width: 216px;\n  }\n}\n","/* eslint-disable no-console */\nimport { Component, h, Prop, State, Watch, Event, EventEmitter, Method, Host } from '@stencil/core';\nimport { InputType, InputAutocapitalize, InputAutoComplete, InputCounterLengthRules } from './input-interface';\nimport { emailValidation, numberValidation } from '../../utils/validations';\n\n@Component({\n  tag: 'bds-input',\n  styleUrl: 'input.scss',\n  shadow: true,\n})\nexport class Input {\n  private nativeInput?: HTMLInputElement | HTMLTextAreaElement;\n  private autoResizeDebounceTimer?: number;\n\n  @State() isPressed? = false;\n  @State() isPassword? = false;\n  @State() validationMesage? = '';\n  @State() validationDanger? = false;\n  /**\n   * Input name, used for form identification.\n   */\n  @Prop() inputName? = '';\n\n  /**\n   * Defines the input type (e.g., `text`, `password`, etc).\n   */\n  @Prop({ reflect: true }) type?: InputType = 'text';\n\n  /**\n   * Label to be displayed above the input.\n   */\n  @Prop() label? = '';\n\n  /**\n   * Text to be displayed as a hint or placeholder in the input.\n   */\n  @Prop() placeholder?: string = '';\n\n  /**\n   * Defines automatic text capitalization (possible values: `on`, `off`).\n   */\n  @Prop() autoCapitalize?: InputAutocapitalize = 'off';\n\n  /**\n   * Defines browser autocomplete behavior (possible values: `on`, `off`).\n   */\n  @Prop() autoComplete?: InputAutoComplete = 'off';\n\n  /**\n   * Defines the maximum allowed value for the input.\n   */\n  @Prop() max?: string;\n\n  /**\n   * Defines the maximum number of characters allowed in the input.\n   */\n  @Prop() maxlength?: number;\n\n  /**\n   * Defines the minimum allowed value for the input.\n   */\n  @Prop() min?: string;\n\n  /**\n   * Defines the minimum number of characters allowed in the input.\n   */\n  @Prop() minlength?: number;\n\n  /**\n   * Makes the input read-only.\n   */\n  @Prop() readonly = false;\n\n  /**\n   * Defines if the input is required.\n   */\n  @Prop() required: boolean;\n\n  /**\n   * Defines a regex pattern that the input value must follow.\n   */\n  @Prop() pattern?: string;\n\n  /**\n   * Help message displayed below the input.\n   */\n  @Prop() helperMessage?: string = '';\n\n  /**\n   * Error message displayed when the input value is invalid.\n   */\n  @Prop({ mutable: true }) errorMessage?: string = '';\n\n  /**\n   * Message displayed when the input value is valid.\n   */\n  @Prop({ mutable: true }) successMessage?: string = '';\n\n  /**\n   * Name of the icon to be displayed inside the input.\n   */\n  @Prop({ reflect: true }) icon?: string = '';\n\n  /**\n   * Defines if the input is disabled.\n   */\n  @Prop({ reflect: true, mutable: true }) disabled?: boolean = false;\n\n  /**\n   * Defines if the input is in error state.\n   */\n  @Prop({ reflect: true, mutable: true }) danger?: boolean = false;\n\n  /**\n   * Defines if the input is in success state.\n   */\n  @Prop({ reflect: true, mutable: true }) success?: boolean = false;\n\n  /**\n   * The current value of the input.\n   */\n  @Prop({ mutable: true }) value?: string | null = '';\n\n  /**\n   * Defines whether a character length counter will be displayed.\n   */\n  @Prop() counterLength? = false;\n\n  /**\n   * Defines the character length counter rule (min, max, etc).\n   */\n  @Prop() counterLengthRule?: InputCounterLengthRules = null;\n\n  /**\n   * Defines whether the input will be submitted when pressing Enter.\n   */\n  @Prop() isSubmit = false;\n\n  /**\n   * Defines whether the input is a textarea.\n   */\n  @Prop() isTextarea = false;\n\n  /**\n   * Defines the number of lines for the textarea (if `textarea`).\n   */\n  @Prop() rows?: number = 3;\n\n  /**\n   * Defines the number of columns for the textarea (if `textarea`).\n   */\n  @Prop() cols?: number = 0;\n\n  /**\n   * Defines whether the textarea should automatically resize based on content.\n   */\n  @Prop() autoResize = true;\n\n  /**\n   * Defines whether the textarea can be manually resized by the user.\n   */\n  @Prop() resizable = false;\n\n  /**\n   * Defines the minimum height of the textarea in pixels.\n   */\n  @Prop() minHeight?: number = 60;\n\n  /**\n   * Defines the maximum height of the textarea in pixels.\n   */\n  @Prop() maxHeight?: number = 200;\n\n  /**\n   * Defines the icon size (small or medium).\n   */\n  @Prop() iconSize?: 'small' | 'medium' = 'small';\n\n  /**\n   * Error message displayed when the input is not filled and is required.\n   */\n  @Prop() requiredErrorMessage: string;\n\n  /**\n   * Error message displayed when the input value doesn't meet the minimum length requirement.\n   */\n  @Prop() minlengthErrorMessage: string;\n\n  /**\n   * Error message displayed when the input value doesn't meet the minimum allowed value.\n   */\n  @Prop() minErrorMessage: string;\n\n  /**\n   * Error message displayed when the input value doesn't meet the maximum allowed value.\n   */\n  @Prop() maxErrorMessage: string;\n\n  /**\n   * Error message displayed when the input value is not a valid email.\n   */\n  @Prop() emailErrorMessage: string;\n\n  /**\n   * Error message displayed when the input value is not a valid number.\n   */\n  @Prop() numberErrorMessage: string;\n\n  /**\n   * Defines if the input will be displayed as chips (a type of input with multiple values).\n   */\n  @Prop() chips: boolean;\n\n  /**\n   * Defines the debounce delay in milliseconds for textarea auto-resize.\n   */\n  @Prop() debounceDelay?: number = 100;\n\n  /**\n   * Data test is the prop to specifically test the component action.\n   */\n  @Prop() dataTest?: string = null;\n\n  @Prop() encode?: boolean = false;\n\n  /**\n   * Event emitted when the input value changes.\n   */\n  @Event({ bubbles: true, composed: true }) bdsChange!: EventEmitter<{ value: string }>;\n\n  /**\n   * Event emitted when the input receives input (typing).\n   */\n  @Event() bdsInput!: EventEmitter<InputEvent>;\n\n  /**\n   * Event emitted when the input loses focus.\n   */\n  @Event() bdsOnBlur: EventEmitter<void>;\n\n  /**\n   * Event emitted when the input gains focus.\n   */\n  @Event() bdsFocus: EventEmitter<void>;\n\n  /**\n   * Event emitted when the form is submitted.\n   */\n  @Event() bdsSubmit: EventEmitter<{ event: KeyboardEvent; value: string }>;\n\n  /**\n   * Event emitted for regex pattern validation.\n   */\n  @Event() bdsPatternValidation: EventEmitter<boolean>;\n\n  /**\n   * Event emitted when the \"Backspace\" key is pressed.\n   */\n  @Event() bdsKeyDownBackspace: EventEmitter<{ event: KeyboardEvent; value: string }>;\n\n  /**\n   * Sets focus to the input field.\n   */\n  @Method()\n  async setFocus(): Promise<void> {\n    this.onClickWrapper();\n  }\n\n  /**\n   * Removes focus from the input field.\n   */\n  @Method()\n  async removeFocus(): Promise<void> {\n    this.onBlur();\n  }\n\n  /**\n   * Returns the input element of the component.\n   */\n  @Method()\n  async getInputElement(): Promise<HTMLInputElement | HTMLTextAreaElement> {\n    return this.nativeInput;\n  }\n\n  /**\n   * Checks if the input field is valid.\n   */\n  @Method()\n  async isValid(): Promise<boolean> {\n    return this.nativeInput.validity.valid;\n  }\n\n  /**\n   * Clears the input field value.\n   */\n  @Method()\n  async clear(): Promise<void> {\n    this.value = '';\n  }\n\n  /**\n   * Encodes special characters for safe display (prevents HTML code injection).\n   */\n  private encodeValue(value?: string): string {\n    const lt = /</g,\n      gt = />/g,\n      ap = /'/g,\n      ic = /\"/g,\n      amp = /&/g,\n      slash = /\\//g;\nif(!this.encode) return value;\n    return (\n      value &&\n      value\n        .toString()\n        .replace(lt, '&lt;')\n        .replace(gt, '&gt;')\n        .replace(ap, '&#39;')\n        .replace(ic, '&#34;')\n        .replace(amp, '&amp;')\n        .replace(slash, '&#47;')\n    );\n  }\n\n  /**\n   * Notifies about the input field value change.\n   */\n  @Watch('value')\n  protected valueChanged(newValue: string | null): void {\n    const changeValue = this.encode ? this.encodeValue(newValue || '') : newValue || '';\n    this.bdsChange.emit({ value: changeValue });\n  }\n\n  /**\n   * Key press event handling (Enter, Backspace, etc).\n   */\n  private keyPressWrapper = (event: KeyboardEvent): void => {\n    switch (event.key) {\n      case 'Enter':\n        this.bdsSubmit.emit({ event, value: this.value });\n\n        if (this.isSubmit) {\n          this.clearTextInput();\n          event.preventDefault();\n        }\n        break;\n      case 'Backspace':\n      case 'Delete':\n        this.bdsKeyDownBackspace.emit({ event, value: this.value });\n        break;\n    }\n  };\n\n  /**\n   * Auto-resizes the textarea based on content.\n   */\n  private autoResizeTextarea(): void {\n    if (this.isTextarea && this.autoResize && this.nativeInput) {\n      const textarea = this.nativeInput as HTMLTextAreaElement;\n      \n      // Reset height to auto to get the correct scrollHeight\n      textarea.style.height = 'auto';\n      \n      // Calculate new height\n      const scrollHeight = textarea.scrollHeight;\n      const newHeight = Math.min(\n        Math.max(scrollHeight, this.minHeight || 60),\n        this.maxHeight || 200\n      );\n      \n      textarea.style.height = `${newHeight}px`;\n    }\n  }\n\n  /**\n   * Debounced version of auto-resize to improve performance during rapid input events.\n   */\n  private debouncedAutoResize(): void {\n    if (this.autoResizeDebounceTimer) {\n      clearTimeout(this.autoResizeDebounceTimer);\n    }\n    \n    this.autoResizeDebounceTimer = window.setTimeout(() => {\n      this.autoResizeTextarea();\n    }, this.debounceDelay); // Configurable debounce delay\n  }\n\n  /**\n   * Centralizes all necessary updates for the textarea, including auto-resize.\n   */\n  private updateTextarea(immediate = false): void {\n    if (this.isTextarea && this.autoResize) {\n      if (immediate) {\n        // For immediate updates (component load, prop changes)\n        this.autoResizeTextarea();\n      } else {\n        // For input events, use debounced version\n        this.debouncedAutoResize();\n      }\n    }\n  }\n\n  /**\n   * Function called when typing in the input field.\n   */\n  private onInput = (ev: InputEvent): void => {\n    this.onBdsInputValidations();\n    const input = ev.target as HTMLInputElement | HTMLTextAreaElement | null;\n    if (input) {\n      this.value = input.value || '';\n    }\n    \n    // Update textarea if needed\n    this.updateTextarea();\n    \n    this.bdsInput.emit(ev);\n  };\n\n  /**\n   * Function called when the input field loses focus.\n   */\n  private onBlur = (): void => {\n    this.onBlurValidations();\n    this.isPressed = false;\n    this.bdsOnBlur.emit();\n  };\n\n  /**\n   * Function called when the input field gains focus.\n   */\n  private onFocus = (): void => {\n    this.isPressed = true;\n    this.bdsFocus.emit();\n  };\n\n  /**\n   * Function called when clicking on the input field.\n   */\n  private onClickWrapper = (): void => {\n    this.onFocus();\n    if (this.nativeInput) {\n      this.nativeInput.focus();\n    }\n  };\n\n  /**\n   * Clears the input field value.\n   */\n  private clearTextInput = (ev?: Event) => {\n    if (!this.readonly && !this.disabled && ev) {\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n\n    this.value = '';\n\n    if (this.nativeInput) {\n      this.nativeInput.value = '';\n    }\n  };\n\n  /**\n   * Function that renders the icon inside the input field.\n   */\n  private renderIcon(): HTMLElement {\n    const iconSizeValue = this.iconSize === 'medium' ? 'medium' : 'small';\n    const isLargeIcon = this.iconSize === 'medium';\n    \n    return (\n      this.icon && (\n        <div\n          class={{\n            input__icon: true,\n            'input__icon--large': isLargeIcon,\n            'input__icon--textarea': this.isTextarea,\n          }}\n        >\n          <bds-icon\n            class=\"input__icon--color\"\n            size={iconSizeValue}\n            name={this.icon}\n            color=\"inherit\"\n          ></bds-icon>\n        </div>\n      )\n    );\n  }\n\n  /**\n   * Function that renders the label of the input field.\n   */\n  private renderLabel(): HTMLElement {\n    return (\n      this.label && (\n        <label\n          class={{\n            input__container__label: true,\n            'input__container__label--pressed': this.isPressed && !this.disabled,\n          }}\n        >\n          <bds-typo variant=\"fs-12\" bold=\"bold\">\n            {this.label}\n          </bds-typo>\n        </label>\n      )\n    );\n  }\n\n  /**\n   * Function that renders error or success messages below the input field.\n   */\n  private renderMessage(): HTMLElement {\n    const icon = this.danger ? 'error' : this.success ? 'checkball' : 'info';\n    let message = this.danger ? this.errorMessage : this.success ? this.successMessage : this.helperMessage;\n\n    if (!message && this.validationDanger) message = this.validationMesage;\n\n    const styles =\n      this.danger || this.validationDanger\n        ? 'input__message input__message--danger'\n        : this.success\n          ? 'input__message input__message--success'\n          : 'input__message';\n\n    if (message) {\n      return (\n        <div class={styles} part=\"input__message\">\n          <div class=\"input__message__icon\">\n            <bds-icon size=\"x-small\" name={icon} theme=\"outline\" color=\"inherit\"></bds-icon>\n          </div>\n          <bds-typo class=\"input__message__text\" variant=\"fs-12\">\n            {message}\n          </bds-typo>\n        </div>\n      );\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Validates the input field when it loses focus.\n   */\n  private onBlurValidations() {\n    this.required && this.requiredValidation();\n    this.pattern && this.patternValidation();\n    (this.minlength || this.maxlength) && this.lengthValidation();\n    (this.min || this.max) && this.minMaxValidation();\n    this.checkValidity();\n  }\n\n  /**\n   * Performs field validations while the user types.\n   */\n  private onBdsInputValidations() {\n    this.type === 'email' && this.emailValidation();\n    this.type === 'phonenumber' && this.numberValidation();\n    this.checkValidity();\n  }\n\n  /**\n   * Validates the regex pattern of the field.\n   */\n  private patternValidation() {\n    const regex = new RegExp(this.pattern);\n    this.bdsPatternValidation.emit(regex.test(this.nativeInput.value));\n  }\n\n  /**\n   * Validates if the field is required.\n   */\n  private requiredValidation() {\n    if (this.nativeInput.validity.valueMissing) {\n      this.validationMesage = this.requiredErrorMessage;\n      this.validationDanger = true;\n    }\n  }\n\n  /**\n   * Validates the text length in the input field.\n   */\n  private lengthValidation() {\n    if (this.nativeInput.validity.tooShort) {\n      this.validationMesage = this.minlengthErrorMessage;\n      this.validationDanger = true;\n      return;\n    }\n\n    if (this.nativeInput.validity.tooLong) {\n      this.validationDanger = true;\n      return;\n    }\n  }\n\n  /**\n   * Validates the minimum and maximum values of the input field.\n   */\n  private minMaxValidation() {\n    if (this.nativeInput.validity.rangeUnderflow) {\n      this.validationMesage = this.minErrorMessage;\n      this.validationDanger = true;\n      return;\n    }\n\n    if (this.nativeInput.validity.rangeOverflow) {\n      this.validationMesage = this.maxErrorMessage;\n      this.validationDanger = true;\n      return;\n    }\n  }\n\n  /**\n   * Validates if the field contains a valid email.\n   */\n  private emailValidation() {\n    if (emailValidation(this.nativeInput.value)) {\n      this.validationMesage = this.emailErrorMessage;\n      this.validationDanger = true;\n    }\n  }\n\n  /**\n   * Validates if the field contains a valid number.\n   */\n  private numberValidation() {\n    if (numberValidation(this.nativeInput.value)) {\n      this.validationMesage = this.numberErrorMessage;\n      this.validationDanger = true;\n    }\n  }\n\n  /**\n   * Checks if the input field is valid.\n   */\n  private checkValidity() {\n    if (this.nativeInput.validity.valid) {\n      this.validationDanger = false;\n    }\n  }\n\n  /**\n   * Updates the input field value after changes.\n   */\n  componentDidUpdate() {\n    if (this.nativeInput && this.value != this.nativeInput.value) {\n      this.nativeInput.value = this.value;\n    }\n    \n    // Update textarea after value changes (immediate for prop changes)\n    this.updateTextarea(true);\n  }\n\n  /**\n   * Initial configurations after the component loads.\n   */\n  componentDidLoad() {\n    // Set initial height for textarea (immediate for initial load)\n    this.updateTextarea(true);\n  }\n\n  /**\n   * Cleanup when component is destroyed.\n   */\n  disconnectedCallback() {\n    if (this.autoResizeDebounceTimer) {\n      window.clearTimeout(this.autoResizeDebounceTimer);\n    }\n  }\n\n  render(): HTMLElement {\n    const isPressed = this.isPressed && !this.disabled;\n    const Element = this.isTextarea ? 'textarea' : 'input';\n\n    return (\n      <Host aria-disabled={this.disabled ? 'true' : null}>\n        <div\n          class={{\n            input: true,\n            'input--state-primary': !this.danger && !this.validationDanger,\n            'input--state-danger': this.danger || this.validationDanger,\n            'input--state-success': this.success,\n            'input--state-disabled': this.disabled,\n            'input--label': !!this.label,\n            'input--pressed': isPressed,\n            'input--textarea': this.isTextarea,\n          }}\n          onClick={this.onClickWrapper}\n          onKeyDown={this.keyPressWrapper}\n          part=\"input-container\"\n        >\n          {this.renderIcon()}\n          <slot name=\"input-left\"></slot>\n          <div class=\"input__container\">\n            {this.renderLabel()}\n            <div class={{ \n              input__container__wrapper: !this.chips, \n              input__container__wrapper__chips: this.chips,\n              'input__container__wrapper--textarea': this.isTextarea\n            }}>\n              <slot name=\"inside-input-left\"></slot>\n              <Element\n                class={{ \n                  input__container__text: true, \n                  input__container__text__chips: this.chips,\n                  'input__container__text--textarea': this.isTextarea\n                }}\n                ref={(input) => (this.nativeInput = input)}\n                rows={this.isTextarea ? this.rows : undefined}\n                cols={this.isTextarea ? this.cols : undefined}\n                autocapitalize={this.autoCapitalize}\n                autocomplete={this.autoComplete}\n                disabled={this.disabled}\n                min={this.min}\n                max={this.max}\n                minLength={this.minlength}\n                maxLength={this.maxlength}\n                name={this.inputName}\n                onBlur={this.onBlur}\n                onFocus={this.onFocus}\n                onInput={this.onInput}\n                placeholder={this.placeholder}\n                readOnly={this.readonly}\n                type={this.isTextarea ? undefined : this.type}\n                value={this.encodeValue(this.value)}\n                pattern={this.pattern}\n                required={this.required}\n                part=\"input\"\n                data-test={this.dataTest}\n                style={this.isTextarea ? {\n                  minHeight: `${this.minHeight || 60}px`,\n                  maxHeight: `${this.maxHeight || 200}px`,\n                  resize: this.resizable ? (this.autoResize ? 'none' : 'vertical') : 'none'\n                } : {}}\n              ></Element>\n            </div>\n          </div>\n          {this.counterLength && (\n            <bds-counter-text\n              length={this.value.length}\n              max={this.maxlength}\n              active={isPressed}\n              {...this.counterLengthRule}\n            />\n          )}\n          {this.success && <bds-icon class=\"icon-success\" name=\"check\" theme=\"outline\" size=\"small\" />}\n          <slot name=\"input-right\" />\n        </div>\n        {this.renderMessage()}\n      </Host>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}