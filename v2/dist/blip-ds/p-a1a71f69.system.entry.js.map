{"version":3,"names":["checkboxCss","checkBoxIds","Checkbox","exports","class_1","hostRef","_this","this","checked","disabled","dataTest","onClick","ev","stopPropagation","bdsChange","emit","refNativeInput","input","nativeInput","getStyleState","prototype","connectedCallback","checkBoxId","refer","concat","getInputElement","Promise","resolve","getValue","toggle","handleKeyDown","event","key","render","styleState","h","class","_a","checkbox","type","ref","id","name","htmlFor","tabindex","onKeyDown","bind","size","color","label","variant","tag","selectOptionCss","SelectOption","class_2","selected","invisible","danger","bulkOption","slotAlign","typeOption","checkedCurrent","onClickSelectOption","optionSelected","value","element","innerHTML","optionHandle","elementChecked","target","data","optionChecked","attachOptionKeyboardListeners","parentElement","nextElementSibling","hasAttribute","preventDefault","firstElementChild","focus","previousElementSibling","changeSelectionType","toMark","markOff","role","style","alignSelf","status","titleText","bold","onBdsChange","noWrap"],"sources":["src/components/checkbox/checkbox.scss?tag=bds-checkbox&encapsulation=shadow","src/components/checkbox/checkbox.tsx","src/components/select-option/select-option.scss?tag=bds-select-option&encapsulation=shadow","src/components/select-option/select-option.tsx"],"sourcesContent":["@use '../../globals/helpers' as *;\n\n$checkbox-size: 18px;\n$checkbox-icon-radius: 4px;\n$checkbox-spacing-text: 8px;\n\n.checkbox {\n  display: inline;\n\n  input[type='checkbox'] {\n    display: none;\n    -webkit-appearance: none;\n    -moz-appearance: none;\n    appearance: none;\n    -webkit-tap-highlight-color: transparent;\n    cursor: pointer;\n    margin: 0;\n    &:focus {\n      outline: 0;\n    }\n  }\n\n  &__icon {\n    position: relative;\n\n    &::before {\n      content: '';\n      position: absolute;\n      inset: -4px;\n      border: 2px solid transparent;\n      border-radius: 4px;\n    }\n\n    &:focus-visible {\n      outline: none;\n\n      &::before {\n        border-color: $color-focus;\n      }\n    }\n\n    &:hover {\n      border-color: $color-brand;\n    }\n  }\n\n  &--selected {\n    .checkbox__icon {\n      background-color: $color-surface-primary;\n      border-color: $color-surface-primary;\n\n      &__svg {\n        color: $color-content-bright;\n      }\n\n      &:hover {\n        background-color: $color-brand;\n      }\n    }\n  }\n\n  &--selected-disabled {\n    .checkbox__label {\n      cursor: not-allowed;\n    }\n\n    .checkbox__icon {\n      color: $color-content-default;\n      border-color: $color-content-default;\n      background-color: $color-surface-3;\n      opacity: 50%;\n    }\n    .checkbox__text {\n      opacity: 50%;\n    }\n  }\n\n  &--deselected {\n    .checkbox__icon__svg {\n      display: none;\n    }\n  }\n\n  &--deselected-disabled {\n    .checkbox__label {\n      cursor: not-allowed;\n    }\n\n    .checkbox__icon {\n      opacity: 50%;\n      background-color: $color-surface-1;\n      border: 1px solid $color-brand;\n    }\n\n    .checkbox__icon__svg {\n      display: none;\n    }\n  }\n\n  &__label {\n    @include no-select();\n    display: flex;\n    align-items: center;\n    cursor: pointer;\n    max-width: fit-content;\n  }\n\n  &__icon {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: $checkbox-size;\n    width: $checkbox-size;\n    min-width: 18px;\n    border-radius: $checkbox-icon-radius;\n    color: $color-surface-1;\n    border: 1px solid $color-content-default;\n    box-sizing: border-box;\n    border-radius: 4px;\n    @include animation();\n  }\n\n  &__text {\n    margin-left: $checkbox-spacing-text;\n    color: $color-content-default;\n  }\n}\n","import { Component, h, Prop, State, Method, Event, EventEmitter } from '@stencil/core';\n\nlet checkBoxIds = 0;\n@Component({\n  tag: 'bds-checkbox',\n  styleUrl: 'checkbox.scss',\n  shadow: true,\n})\nexport class Checkbox {\n  private nativeInput?: HTMLInputElement;\n\n  @State() checkBoxId?: string;\n\n  @Prop() refer!: string;\n\n  @Prop() label!: string;\n\n  /**\n   * The name of the control, which is submitted with the form data.\n   */\n  @Prop() name!: string;\n\n  /**\n   * If `true`, the checkbox is selected.\n   */\n  @Prop({ mutable: true, reflect: true }) checked = false;\n\n  /**\n   * If `true`, the user cannot interact with the checkbox.\n   */\n  @Prop() disabled = false;\n\n  /**\n   * Data test is the prop to specifically test the component action object.\n   */\n  @Prop() dataTest?: string = null;\n\n  connectedCallback(): void {\n    this.checkBoxId = this.refer || `bds-checkbox-${checkBoxIds++}`;\n  }\n\n  /**\n   * Emitted when the value has changed.\n   */\n  @Event() bdsChange!: EventEmitter<{\n    checked: boolean;\n  }>;\n\n  /**\n   * Emitted when the input has changed.\n   */\n  @Event() bdsInput!: EventEmitter<KeyboardEvent>;\n\n  @Method()\n  getInputElement(): Promise<HTMLInputElement> {\n    return Promise.resolve(this.nativeInput);\n  }\n\n  @Method()\n  getValue(): Promise<boolean> {\n    return Promise.resolve(this.nativeInput.checked);\n  }\n\n  @Method()\n  async toggle() {\n    this.checked = !this.checked;\n    this.bdsChange.emit({\n      checked: this.checked,\n    });\n  }\n\n  private onClick = (ev: Event): void => {\n    ev.stopPropagation();\n    this.checked = !this.checked;\n    this.bdsChange.emit({\n      checked: this.checked,\n    });\n  };\n\n  private refNativeInput = (input: HTMLInputElement): void => {\n    this.nativeInput = input;\n  };\n\n  private getStyleState = (): string => {\n    if (this.checked && !this.disabled) {\n      return 'checkbox--selected';\n    }\n\n    if (!this.checked && !this.disabled) {\n      return 'checkbox--deselected';\n    }\n\n    if (this.checked && this.disabled) {\n      return 'checkbox--selected-disabled';\n    }\n\n    if (!this.checked && this.disabled) {\n      return 'checkbox--deselected-disabled';\n    }\n\n    return '';\n  };\n\n  private handleKeyDown(event) {\n    if (event.key == 'Enter') {\n      this.checked = !this.checked;\n      this.bdsChange.emit({\n        checked: this.checked,\n      });\n    }\n  }\n\n  render(): HTMLElement {\n    const styleState = this.getStyleState();\n\n    return (\n      <div\n        class={{\n          checkbox: true,\n          [styleState]: true,\n        }}\n      >\n        <input\n          type=\"checkbox\"\n          ref={this.refNativeInput}\n          id={this.checkBoxId}\n          name={this.name}\n          onClick={(ev) => this.onClick(ev)}\n          checked={this.checked}\n          disabled={this.disabled}\n          data-test={this.dataTest}\n        ></input>\n        <label class=\"checkbox__label\" htmlFor={this.checkBoxId}>\n          <div class=\"checkbox__icon\" tabindex=\"0\" onKeyDown={this.handleKeyDown.bind(this)}>\n            <bds-icon class=\"checkbox__icon__svg\" size=\"x-small\" name=\"true\" color=\"inherit\"></bds-icon>\n          </div>\n          {this.label && (\n            <bds-typo class=\"checkbox__text\" variant=\"fs-14\" tag=\"span\">\n              {this.label}\n            </bds-typo>\n          )}\n        </label>\n      </div>\n    );\n  }\n}\n","@use '../../globals/helpers' as *;\n\n$select-option-padding: 8px;\n$select-option-left: 12px;\n\n:host(.option-checked) {\n  order: -1;\n}\n\n.load-spinner {\n  background-color: $color-surface-0;\n  height: 200px;\n}\n\n.select-option {\n  display: grid;\n  width: 100%;\n  @include no-select();\n  cursor: pointer;\n  background-color: $color-surface-0;\n  padding: $select-option-padding;\n  padding-left: $select-option-left;\n  box-sizing: border-box;\n  display: flex;\n  align-items: center;\n  outline: none;\n  order: 1;\n\n  &--selected {\n    .select-option__container--value {\n      color: $color-primary;\n    }\n  }\n\n  &--disabled {\n    .select-option__container--value,\n    .select-option__container--bulk {\n      &:hover {\n        background-color: $color-surface-1;\n      }\n\n      cursor: not-allowed;\n      color: $color-content-disable;\n    }\n  }\n\n  ::slotted(bds-icon) {\n    margin-right: 10px;\n  }\n\n  &__container {\n    color: $color-content-default;\n    display: flex;\n    flex-direction: column;\n\n    &__checkbox {\n      cursor: pointer;\n      padding: $select-option-padding;\n      padding-left: $select-option-left;\n      box-sizing: border-box;\n      display: flex;\n      gap: 8px;\n      align-items: center;\n      outline: none;\n      flex-direction: row;\n\n      & bds-checkbox {\n        pointer-events: none;\n      }\n    }\n\n    &__fill_space {\n      width: 100%;\n    }\n\n    &--bulk,\n    &--status {\n      color: $color-content-ghost;\n    }\n    &--status {\n      margin-left: 4px;\n    }\n\n    &__overflow {\n      overflow: hidden;\n      padding-right: 16px;\n    }\n\n    &:hover > &--value,\n    &:hover > &--bulk,\n    &:hover > &--status {\n      color: $color-primary;\n    }\n\n    &:active > &--value,\n    &:active > &--bulk,\n    &:active > &--status {\n      color: $color-primary;\n    }\n  }\n\n  &:hover {\n    background-color: $color-surface-1;\n  }\n\n  &:focus {\n    background-color: $color-surface-1;\n    color: $color-primary-main;\n  }\n\n  &--selected {\n    background-color: $color-surface-1;\n  }\n\n  &--invisible {\n    display: none;\n  }\n}\n","import { Component, h, Element, Prop, EventEmitter, Event, Method, Watch } from '@stencil/core';\r\nimport { Keyboard } from '../../utils/enums';\r\n\r\nexport type TypeOption = 'checkbox' | 'default';\r\n\r\n@Component({\r\n  tag: 'bds-select-option',\r\n  styleUrl: 'select-option.scss',\r\n  shadow: true,\r\n})\r\nexport class SelectOption {\r\n  private nativeInput?: HTMLBdsCheckboxElement;\r\n\r\n  @Element() private element: HTMLElement;\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  @Prop() value!: any;\r\n\r\n  /**\r\n   * The text value of the option.\r\n   */\r\n  @Prop() selected? = false;\r\n\r\n  /**\r\n   * If `true`, the user cannot interact with the select option.\r\n   */\r\n  @Prop() disabled? = false;\r\n\r\n  /**\r\n   * Add state danger on input, use for use feedback.\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) invisible? = false;\r\n\r\n  /**\r\n   * Add state danger on input, use for use feedback.\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) danger?: boolean = false;\r\n\r\n  /**\r\n   *  Quantity Description on option value, this item is locate to rigth in component.\r\n   */\r\n  @Prop() bulkOption? = '';\r\n\r\n  /**\r\n   *  Alignment of input-left slot. The value need to be one of the values used on flexbox align-self property.\r\n   */\r\n  @Prop() slotAlign? = 'center';\r\n\r\n  /**\r\n   *  If set, a title will be shown under the text\r\n   */\r\n  @Prop() titleText: string;\r\n\r\n  /**\r\n   *  If set, a text will be displayed on the right side of the option label\r\n   */\r\n  @Prop() status?: string;\r\n\r\n  /**\r\n   * Type Option. Used toselect type of item list.\r\n   */\r\n  @Prop({ mutable: true, reflect: true }) typeOption?: TypeOption = 'default';\r\n\r\n  /**\r\n   * If `true`, the checkbox is selected.\r\n   */\r\n  @Prop({ mutable: true, reflect: true }) checked = false;\r\n\r\n  /**\r\n   * Data test is the prop to specifically test the component action object.\r\n   */\r\n  @Prop() dataTest?: string = null;\r\n\r\n  @Event() optionSelected: EventEmitter<{ value: any; label: string }>;\r\n\r\n  @Event() optionChecked: EventEmitter<{ value: string; label: string; checked: boolean }>;\r\n\r\n  @Watch('typeOption')\r\n  protected changeSelectionType() {\r\n    this.typeOption = this.typeOption;\r\n  }\r\n\r\n  @Method()\r\n  async toggle() {\r\n    this.checked = !this.checked;\r\n  }\r\n\r\n  @Method()\r\n  async toMark() {\r\n    this.checked = true;\r\n  }\r\n\r\n  @Method()\r\n  async markOff() {\r\n    this.checked = false;\r\n  }\r\n\r\n  private refNativeInput = (input: HTMLBdsCheckboxElement): void => {\r\n    this.nativeInput = input;\r\n  };\r\n\r\n  private checkedCurrent = () => {\r\n    if (this.typeOption !== 'checkbox') return;\r\n    this.nativeInput.toggle();\r\n  };\r\n\r\n  private onClickSelectOption = (): void => {\r\n    if (this.typeOption == 'checkbox') return;\r\n    if (!this.disabled) {\r\n      this.optionSelected.emit({ value: this.value, label: this.element.innerHTML });\r\n    }\r\n  };\r\n\r\n  private optionHandle = (ev: CustomEvent): void => {\r\n    const elementChecked = ev.target as HTMLBdsCheckboxElement;\r\n    const data = { value: elementChecked.name, label: this.element.innerHTML, checked: elementChecked.checked };\r\n    this.checked = !this.checked;\r\n    this.optionChecked.emit(data);\r\n  };\r\n\r\n  private attachOptionKeyboardListeners = (event: KeyboardEvent): void => {\r\n    const element = event.target as HTMLElement;\r\n\r\n    switch (event.key) {\r\n      case Keyboard.ENTER:\r\n        this.onClickSelectOption();\r\n        break;\r\n      case Keyboard.ARROW_DOWN:\r\n        if (\r\n          element.parentElement.nextElementSibling &&\r\n          !element.parentElement.nextElementSibling.hasAttribute('invisible')\r\n        ) {\r\n          event.preventDefault();\r\n          event.stopPropagation();\r\n          (element.parentElement.nextElementSibling.firstElementChild as HTMLInputElement).focus();\r\n        }\r\n        break;\r\n      case Keyboard.ARROW_UP:\r\n        if (\r\n          element.parentElement.previousElementSibling &&\r\n          !element.parentElement.previousElementSibling.hasAttribute('invisible')\r\n        ) {\r\n          event.preventDefault();\r\n          event.stopPropagation();\r\n          (element.parentElement.previousElementSibling.firstElementChild as HTMLInputElement).focus();\r\n        }\r\n    }\r\n  };\r\n\r\n  render(): HTMLElement {\r\n    return (\r\n      <div\r\n        id={`bds-select-option-${this.value}`}\r\n        data-event=\"click\"\r\n        role=\"button\"\r\n        onKeyDown={this.attachOptionKeyboardListeners}\r\n        onClick={this.onClickSelectOption}\r\n        data-value={this.value}\r\n        data-test={this.dataTest}\r\n        class={{\r\n          'select-option': this.typeOption != 'checkbox',\r\n          'select-option--selected': this.selected,\r\n          'select-option--disabled': this.disabled,\r\n          'select-option--invisible': this.invisible,\r\n        }}\r\n      >\r\n        <div style={{ alignSelf: this.slotAlign }}>\r\n          <slot name=\"input-left\"></slot>\r\n        </div>\r\n\r\n        <div\r\n          class={{\r\n            'select-option__container': true,\r\n            'select-option__container__fill_space': !!this.status,\r\n            'select-option__container__checkbox': this.typeOption == 'checkbox',\r\n          }}\r\n          onClick={() => this.checkedCurrent()}\r\n        >\r\n          {this.titleText && (\r\n            <bds-typo class=\"select-option__container--value\" variant=\"fs-16\" bold=\"semi-bold\">\r\n              {this.titleText}\r\n            </bds-typo>\r\n          )}\r\n\r\n          {this.typeOption === 'checkbox' ? (\r\n            <bds-checkbox\r\n              ref={this.refNativeInput}\r\n              refer={`html-for-${this.value}`}\r\n              label={this.element.innerHTML}\r\n              name={this.value}\r\n              checked={this.checked}\r\n              onBdsChange={(ev) => this.optionHandle(ev)}\r\n            ></bds-checkbox>\r\n          ) : (\r\n            <bds-typo\r\n              class={{\r\n                'select-option__container--value': true,\r\n                'select-option__container__overflow': !!this.status,\r\n              }}\r\n              noWrap={!!this.status}\r\n              variant=\"fs-14\"\r\n            >\r\n              <slot />\r\n            </bds-typo>\r\n          )}\r\n        </div>\r\n        {this.bulkOption && (\r\n          <bds-typo class=\"select-option__container--bulk\" variant=\"fs-10\">\r\n            {this.bulkOption}\r\n          </bds-typo>\r\n        )}\r\n        {this.status && (\r\n          <bds-typo class=\"select-option__container--status\" noWrap={true} variant=\"fs-10\">\r\n            {this.status}\r\n          </bds-typo>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]}