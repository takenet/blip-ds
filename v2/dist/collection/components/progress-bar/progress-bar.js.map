{"version":3,"file":"progress-bar.js","sourceRoot":"","sources":["../../../../src/components/progress-bar/progress-bar.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,EAAE,MAAM,eAAe,CAAC;AAWzD,MAAM,OAAO,cAAc;IAL3B;QAME;;WAEG;QACK,YAAO,GAAY,CAAC,CAAC;QAC7B;;WAEG;QACK,SAAI,GAAqB,SAAS,CAAC;QAC3C;;WAEG;QACK,UAAK,GAAsB,SAAS,CAAC;QAC7C;;WAEG;QACK,SAAI,GAAY,EAAE,CAAC;QAC3B;;WAEG;QACK,aAAQ,GAAY,IAAI,CAAC;KAmBlC;IAjBC,MAAM;QACJ,MAAM,MAAM,GAAG,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;QAC7F,OAAO,CACL,EAAC,IAAI;YACH,4DAAK,KAAK,EAAE,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,QAAQ,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,eAAa,IAAI,CAAC,QAAQ;gBACvF,4DAAK,KAAK,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE;oBAC9B,4DAAK,KAAK,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,SAAS,IAAI,CAAC,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,MAAM,GAAQ,CAChF,CACF;YACL,IAAI,CAAC,IAAI,IAAI,CACZ,4DAAK,KAAK,EAAE,EAAE,aAAa,EAAE,IAAI,EAAE;gBACjC,iEAAU,OAAO,EAAC,OAAO,IAAE,IAAI,CAAC,IAAI,CAAY,CAC5C,CACP,CACI,CACR,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Host, Prop, h } from '@stencil/core';\n\nexport type progressBarSize = 'small' | 'default';\n\nexport type progressBarColor = 'default' | 'positive' | 'information' | 'warning';\n\n@Component({\n  tag: 'bds-progress-bar',\n  styleUrl: 'progress-bar.scss',\n  shadow: true,\n})\nexport class BdsProgressBar {\n  /**\n   * Percent, property to enter the progress bar status percentage value.\n   */\n  @Prop() percent?: number = 0;\n  /**\n   * Size, property to define size of component.\n   */\n  @Prop() size?: progressBarSize = 'default';\n  /**\n   * Text, property to define status of component.\n   */\n  @Prop() color?: progressBarColor = 'default';\n  /**\n   * Text, property to enable the bar info text.\n   */\n  @Prop() text?: string = '';\n  /**\n   * Data test is the prop to specifically test the component action object.\n   */\n  @Prop() dataTest?: string = null;\n\n  render() {\n    const styles = { width: `${this.percent ? (this.percent > 100 ? 100 : this.percent) : 0}%` };\n    return (\n      <Host>\n        <div class={{ progress_bar: true, [`size_${this.size}`]: true }} data-test={this.dataTest}>\n          <div class={{ bar_behind: true }}>\n            <div class={{ progress: true, [`color_${this.color}`]: true }} style={styles}></div>\n          </div>\n        </div>\n        {this.text && (\n          <div class={{ typo_progress: true }}>\n            <bds-typo variant=\"fs-14\">{this.text}</bds-typo>\n          </div>\n        )}\n      </Host>\n    );\n  }\n}\n"]}