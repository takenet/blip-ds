/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { collapses } from "./components/accordion/accordion-group";
import { AlertHeaderVariannt } from "./components/alert/alert-header/alert-header";
import { AutocompleteChangeEventDetail, AutocompleteOption, AutocompleteOptionsPositionType, AutocompleteSelectedChangeEventDetail } from "./components/autocomplete/autocomplete-select-interface";
import { SelectionType } from "./components/autocomplete/autocomplete";
import { avatarSize, colors } from "./components/avatar/avatar";
import { avatarSize as avatarSize1 } from "./components/avatar-group/avatar-group";
import { AvatarDataList } from "./components/avatar-group/avatar-group-interface";
import { Shape } from "./components/badge/badge";
import { BannerAlign, BannerVariant, ButtonClose, Context } from "./components/banner/banner";
import { ButtonSize, ButtonType, ButtonVariant, IconType } from "./components/button/button";
import { colorsVariants, LoadingSpinnerVariant } from "./components/loading-spinner/loading-spinner";
import { IconButtonSize, IconButtonVariant } from "./components/icon-button/icon-button";
import { justifyContent } from "./components/card/card-footer/card-footer";
import { justifyContent as justifyContent1 } from "./components/card/card-header/card-header";
import { ChipSize, ChipVariant } from "./components/chip/chip";
import { Color, Size } from "./components/chip-clickable/chip-clickable";
import { Color as Color1, Size as Size1 } from "./components/chip-selected/chip-selected";
import { Color as Color2 } from "./components/chip-tag/chip-tag";
import { CounterTextRule } from "./components/counter-text/counter-text-interface";
import { typeDate } from "./components/datepicker/datepicker";
import { languages } from "./utils/languages";
import { DaysList } from "./components/datepicker/datepicker-interface";
import { stateSelect } from "./components/datepicker/datepicker-period/datepicker-period";
import { activeMode, DropdownPostionType } from "./components/dropdown/dropdown";
import { alignItems, breakpoint, direction, flexWrap, gap, justifyContent as justifyContent2, margin, padding } from "./components/grid/grid-interface";
import { IconSize, IconTheme, IconType as IconType1 } from "./components/icon/icon-interface";
import { IllustrationType } from "./components/illustration/illustration-interface";
import { InputAutocapitalize, InputAutoComplete, InputCounterLengthRules, InputType } from "./components/input/input-interface";
import { InputChipsTypes } from "./components/input-chips/input-chips-interface";
import { InputEditableEventDetail, SizeInputEditable } from "./components/input-editable/input-editable";
import { Option, SelectChangeEventDetail, SelectOptionsPositionType } from "./components/selects/select-interface";
import { TypeList } from "./components/list/list";
import { Data } from "./components/list/list-interface";
import { TypeList as TypeList1 } from "./components/list/list";
import { loadingBarSize } from "./components/loading-bar/loading-bar";
import { colorsVariants as colorsVariants1, loadingSize, LoadingSpinnerVariant as LoadingSpinnerVariant1 } from "./components/loading-spinner/loading-spinner";
import { menuPosition } from "./components/menu/menu";
import { avatarSize as avatarSize2 } from "./components/menu/menu-exibition/menu-exibition";
import { sizes } from "./components/modal/modal";
import { justifyContent as justifyContent3, navbarBackground, orientation } from "./components/navbar/navbar";
import { PaginationOptionsPositionType } from "./components/pagination/pagination";
import { PaperElevation } from "./components/paper/paper-interface";
import { progressBarColor, progressBarSize } from "./components/progress-bar/progress-bar";
import { TypeOption } from "./components/select-option/select-option";
import { sidebarBackground, sidebarPosition, sidebarType } from "./components/sidebar/sidebar";
import { SwitchSize } from "./components/switch/switch";
import { Overflow } from "./components/tabs/tab (depreciated)/tabs-interface";
import { Themes } from "./components/theme-provider/theme-provider";
import { ActionType, ButtonActionType, CreateToastType, PositionType, VariantType } from "./components/toast/toast-interface";
import { TooltipPostionType } from "./components/tooltip/tooltip";
import { Bold, FontLineHeight, FontSize, Tag } from "./components/typo/typo";
import { languages as languages1 } from "./components/upload/languages";
export namespace Components {
    interface BdsAccordion {
        "close": () => Promise<void>;
        "notStart": () => Promise<void>;
        "open": () => Promise<void>;
        "reciveNumber": (number: any) => Promise<void>;
        /**
          * A prop for make the accordion open when is render.
         */
        "startOpen"?: boolean;
        "toggle": () => Promise<void>;
    }
    interface BdsAccordionBody {
        "close": () => Promise<void>;
        "toggle": () => Promise<void>;
    }
    interface BdsAccordionGroup {
        "closeAll": (actNumber: any) => Promise<void>;
        /**
          * Focus Selected. Used to add title in header accordion.
         */
        "collapse"?: collapses;
        "openAll": (actNumber: any) => Promise<void>;
    }
    interface BdsAccordionHeader {
        /**
          * Accordion Title. Used to add title in header accordion.
         */
        "accordionTitle"?: string;
        /**
          * Avatar Name. Used to add avatar in header accordion.
         */
        "avatarName"?: string;
        /**
          * Avatar Thumb. Used to add avatar in header accordion.
         */
        "avatarThumb"?: string;
        "close": () => Promise<void>;
        /**
          * Icon. Used to add icon in header accordion.
         */
        "icon"?: string;
        "toggle": () => Promise<void>;
    }
    interface BdsAlert {
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * Used to open/close the alert
         */
        "open"?: boolean;
        /**
          * Define whether the component will occupy the entire screen or just the parent.
         */
        "position"?: string;
        /**
          * Can be used outside to open/close the alert
         */
        "toggle": () => Promise<void>;
    }
    interface BdsAlertActions {
    }
    interface BdsAlertBody {
    }
    interface BdsAlertHeader {
        /**
          * used for add icon the header. Uses the bds-icon component.
         */
        "icon"?: string;
        /**
          * Variant. Entered as one of the variant. Can be one of: 'system', 'error', 'warning', 'delete';
         */
        "variant"?: AlertHeaderVariannt;
    }
    interface BdsAutocomplete {
        /**
          * If true, the X icon will appear only when component is focused.
         */
        "clearIconOnFocus"?: boolean;
        /**
          * Add state danger on input, use for use feedback.
         */
        "danger"?: boolean;
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * Disabled input.
         */
        "disabled"?: boolean;
        /**
          * used for add icon in input left. Uses the bds-icon component.
         */
        "icon"?: string;
        /**
          * label in input, with he the input size increases.
         */
        "label"?: string;
        /**
          * Is Loading, is the prop to enable that the component is loading.
         */
        "loading"?: boolean;
        /**
          * The options of the select Should be passed this way: options='[{"value": "Cat", "label": "Meow"}, {"value": "Dog", "label": "Woof"}]' Options can also be passed as child by using bds-select-option component, but passing as a child you may have some compatibility problems with Angular.
         */
        "options"?: string | AutocompleteOption[];
        /**
          * Set the placement of the options menu. Can be 'bottom' or 'top'.
         */
        "optionsPosition"?: AutocompleteOptionsPositionType;
        /**
          * Placeholder for native input element.
         */
        "placeholder"?: string;
        /**
          * Search only the title property
         */
        "searchOnlyTitle"?: boolean;
        /**
          * the item selected.
         */
        "selected"?: HTMLBdsSelectOptionElement | null;
        /**
          * Selection Title, Prop to enable title to select.
         */
        "selectionTitle"?: string;
        /**
          * Multiselect, Prop to enable multi selections.
         */
        "selectionType"?: SelectionType;
        /**
          * the value of the select.
         */
        "value"?: string | null;
    }
    interface BdsAvatar {
        /**
          * Color, Entered as one of the color. Can be one of: 'system', 'success', 'warning', 'error', 'info'.
         */
        "color"?: colors;
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * Ellipses, serves to indicate the user number in the listing.
         */
        "ellipsis"?: number;
        /**
          * Name, Inserted for highlighted osuary name. Enter the full name.
         */
        "name"?: string;
        /**
          * Size, Entered as one of the size. Can be one of: 'extra-small', 'small', 'standard', 'large', 'extra-large'.
         */
        "size"?: avatarSize;
        /**
          * Thumbnail, Inserted to highlight user image. Url field.
         */
        "thumbnail"?: string;
        /**
          * Upload, Serve to enable upload function on avatar.
         */
        "upload"?: boolean;
    }
    interface BdsAvatarGroup {
        "canClick"?: boolean;
        /**
          * Size. Entered as one of the size. Can be one of: 'extra-small', 'small', 'standard', 'large', 'extra-large'.
         */
        "size"?: avatarSize;
        /**
          * The users of the select Should be passed this way: users='[   {"id": "1", "name": "Michael Scott", "thumbnail": "https://gcdn.pbrd.co/images/9Kt8iMvR10Lf.jpg?o=1"},   {"id": "2", "name": "Dwight Schrute", "thumbnail": "https://gcdn.pbrd.co/images/XAlbTPDwjZ2d.jpg?o=1"},   {"id": "3", "name": "Jim Halpert", "thumbnail": "https://gcdn.pbrd.co/images/tK0Ygb0KAHUm.jpg?o=1"},   {"id": "4", "name": "Pam Beesly", "thumbnail": "https://gcdn.pbrd.co/images/8NZSnCGfB9BD.jpg?o=1"},   {"id": "5", "name": "Ryan Howard", "thumbnail": "https://gcdn.pbrd.co/images/6wwIWI1EzzVq.jpg?o=1"},   {"id": "6", "name": "Andy Bernard", "thumbnail": "https://gcdn.pbrd.co/images/5dPYFWixftY4.jpg?o=1"} ]' users can also be passed as child by using bds-avatar-group component, but passing as a child you may have some compatibility problems with Angular.
         */
        "users"?: string | AvatarDataList[];
    }
    interface BdsBadge {
        /**
          * If true, actived the pulse animation.
         */
        "animation"?: boolean;
        /**
          * Set the color of the component.
         */
        "color"?: string;
        /**
          * Set witch icon will be render inside the component.
         */
        "icon"?: string;
        /**
          * Set the text in shape circle. Is just alow numbers, but if the number pass 999 a symbol '+' will be render.
         */
        "number"?: number;
        /**
          * Set the shape of the component.
         */
        "shape"?: Shape;
    }
    interface BdsBanner {
        /**
          * Set the banner aligment, it can be one of: 'center', 'right' or 'left'.
         */
        "bannerAlign"?: BannerAlign;
        /**
          * Set if show up the close button.
         */
        "buttonClose"?: ButtonClose;
        /**
          * Set if the banner is external or internal.
         */
        "context"?: Context;
        /**
          * Data test is the prop to specifically test the component action object. dtButtonClose is the data-test to button close.
         */
        "dtButtonClose"?: string;
        "toggle": () => Promise<void>;
        /**
          * Set the banner varient, it can be 'system' or 'warning'.
         */
        "variant"?: BannerVariant;
    }
    interface BdsBannerLink {
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * Set the link pass.
         */
        "link": string;
    }
    interface BdsButton {
        /**
          * The arrow button
         */
        "arrow"?: boolean;
        /**
          * If true, shows the loading spinner
         */
        "bdsLoading"?: boolean;
        /**
          * If not empty, Sets the color of the spinner, can be 'primary','secondary' or 'ghost'
         */
        "bdsLoadingColor"?: colorsVariants;
        /**
          * If not empty, Sets the color of the spinner, can be 'primary','secondary' or 'ghost'
         */
        "bdsLoadingVariant"?: LoadingSpinnerVariant;
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * If true, the base button will be disabled.
         */
        "disabled"?: boolean;
        /**
          * used for add icon in input left. Uses the bds-icon component.
         */
        "icon"?: string;
        /**
          * Size. Entered as one of the size. Can be one of: 'tall', 'standard', 'short';
         */
        "size"?: ButtonSize;
        /**
          * The type of the button. Can be one of: 'button', 'submit', 'reset';
         */
        "type": ButtonType;
        /**
          * The type of the icon. Can be one of: 'icon', 'logo', 'emoji';
         */
        "typeIcon": IconType;
        /**
          * Variant. Entered as one of the variant. Can be one of: 'primary', 'secondary', 'ghost', 'dashed';
         */
        "variant"?: ButtonVariant;
    }
    interface BdsButtonIcon {
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * If true, the base button will be disabled.
         */
        "disabled"?: boolean;
        /**
          * used for add icon in input left. Uses the bds-icon component.
         */
        "icon"?: string;
        /**
          * Size. Entered as one of the size. Can be one of: 'tall', 'standard', 'short';
         */
        "size"?: IconButtonSize;
        /**
          * Variant. Entered as one of the variant. Can be one of: 'primary', 'secondary', 'ghost', 'dashed';
         */
        "variant"?: IconButtonVariant;
    }
    interface BdsCard {
        /**
          * If the prop is true, the component will be clickable.
         */
        "clickable"?: boolean;
        /**
          * Prop for set the height of the component.
         */
        "height"?: string;
        /**
          * Prop for set the width of the component.
         */
        "width"?: string;
    }
    interface BdsCardBody {
    }
    interface BdsCardColor {
        /**
          * Specifies if the hex is a linear gradient
         */
        "gradient": boolean;
        /**
          * Specifies HEX color, use Figma docs in Blip DS.
         */
        "hex"?: string;
        /**
          * If true, the text will be white
         */
        "lightText": boolean;
        /**
          * Specifies name color, use Figma docs in Blip DS.
         */
        "name": string;
        /**
          * Specifies variabel sass color, _variables.scss.
         */
        "variable": string;
    }
    interface BdsCardFooter {
        /**
          * Prop for internal elements alignment. Will follow the same values of css.
         */
        "align"?: justifyContent;
    }
    interface BdsCardHeader {
        /**
          * Prop for internal elements alignment. Will follow the same values of css.
         */
        "align"?: justifyContent;
    }
    interface BdsCardSubtitle {
        /**
          * Set the card subtitle.
         */
        "text"?: string;
    }
    interface BdsCardTitle {
        /**
          * Set the card title.
         */
        "text"?: string;
    }
    interface BdsCheckbox {
        /**
          * If `true`, the checkbox is selected.
         */
        "checked": boolean;
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * If `true`, the user cannot interact with the checkbox.
         */
        "disabled": boolean;
        "getInputElement": () => Promise<HTMLInputElement>;
        "getValue": () => Promise<boolean>;
        "label": string;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        "refer": string;
        "toggle": () => Promise<void>;
    }
    interface BdsChip {
        /**
          * When 'true' and the component is using the primary variant, a hover is added
         */
        "clickable": boolean;
        /**
          * Add state danger on chip, use for use feedback.
         */
        "danger"?: boolean;
        /**
          * When 'true', the component recive remove button and dispach event onBdsDelete
         */
        "deletable": boolean;
        /**
          * When 'true', no events will be dispatched
         */
        "disabled": boolean;
        /**
          * Add state filter on chip whith specific color.
         */
        "filter": boolean;
        /**
          * used for add icon in left container. Uses the bds-icon component.
         */
        "icon"?: string;
        /**
          * Chip size. Entered as one of the size design tokens. Can be one of: "standard" and "tall"
         */
        "size"?: ChipSize;
        /**
          * Variant. Entered as one of the variant. Can be one of: 'primary', 'default';
         */
        "variant"?: ChipVariant;
    }
    interface BdsChipClickable {
        /**
          * used for add avatar left container. Uses the bds-avatar component.
         */
        "avatar"?: string;
        /**
          * it makes the chip clickable.
         */
        "clickable"?: boolean;
        /**
          * used for delete the chip.
         */
        "close"?: boolean;
        /**
          * used for change the color. Uses one of them.
         */
        "color"?: Color;
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * the chip gone stay disabled while this prop be true.
         */
        "disabled"?: boolean;
        /**
          * Data test is the prop to specifically test the component action object. dtButtonClose is the data-test to button close.
         */
        "dtButtonClose"?: string;
        /**
          * used for add icon in left container. Uses the bds-icon component.
         */
        "icon"?: string;
        /**
          * used for change the size chip. Uses one of them.
         */
        "size"?: Size;
    }
    interface BdsChipSelected {
        /**
          * used for change the color. Uses one of them.
         */
        "color"?: Color;
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * When 'true', no events will be dispatched
         */
        "disabled": boolean;
        /**
          * used for add icon in left container. Uses the bds-icon component.
         */
        "icon"?: string;
        /**
          * used for set the initial setup for true;
         */
        "selected"?: boolean;
        /**
          * used for change the chip size. Use one of them;
         */
        "size"?: Size;
    }
    interface BdsChipTag {
        /**
          * used for change the color. Uses one of them.
         */
        "color"?: Color;
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * used for add icon in left container. Uses the bds-icon component.
         */
        "icon"?: string;
    }
    interface BdsCounterText {
        "active"?: boolean;
        "delete"?: CounterTextRule;
        "length": number;
        "max"?: number;
        "warning"?: CounterTextRule;
    }
    interface BdsDataTable {
        /**
          * Prop to activate the possibility of use chip in any column.
         */
        "actionArea"?: boolean;
        /**
          * Prop to activate the possibility of use avatar in any column.
         */
        "avatar"?: boolean;
        /**
          * Prop to activate the possibility of use chip in any column.
         */
        "chips"?: boolean;
        /**
          * Prop to recive the header and configuration of table.
         */
        "column"?: string;
        "deleteItem": (index: number) => Promise<void>;
        /**
          * Prop to recive the content of the table.
         */
        "options"?: string;
        /**
          * Prop to activate the sorting.
         */
        "sorting"?: boolean;
    }
    interface BdsDatepicker {
        /**
          * Disabled input.
         */
        "disabled"?: boolean;
        /**
          * Data test is the prop to specifically test the component action object. dtButtonClear is the data-test to button clear.
         */
        "dtButtonClear"?: string;
        /**
          * Data test is the prop to specifically test the component action object. dtButtonConfirm is the data-test to button confirm.
         */
        "dtButtonConfirm"?: string;
        /**
          * Data test is the prop to specifically test the component action object. dtButtonNext is the data-test to button next.
         */
        "dtButtonNext"?: string;
        /**
          * Data test is the prop to specifically test the component action object. dtButtonPrev is the data-test to button prev.
         */
        "dtButtonPrev"?: string;
        /**
          * Data test is the prop to specifically test the component action object. dtInputEnd is the data-test to input end.
         */
        "dtInputEnd"?: string;
        /**
          * Data test is the prop to specifically test the component action object. dtInputStart is the data-test to input start.
         */
        "dtInputStart"?: string;
        /**
          * Data test is the prop to specifically test the component action object. dtOutzone is the data-test to outzone.
         */
        "dtOutzone"?: string;
        /**
          * Data test is the prop to specifically test the component action object. dtSelectMonth is the data-test to select month.
         */
        "dtSelectMonth"?: string;
        /**
          * Data test is the prop to specifically test the component action object. dtSelectYear is the data-test to select year.
         */
        "dtSelectYear"?: string;
        /**
          * EndDateLimit. Insert a limiter to select the date period.
         */
        "endDateLimit"?: string;
        /**
          * Language, Entered as one of the languages. Can be one of: 'pt_BR', 'es_ES', 'en_US'.
         */
        "language"?: languages;
        /**
          * Message. Select type of date.
         */
        "message"?: string;
        /**
          * StartDateLimit. Insert a limiter to select the date period.
         */
        "startDateLimit"?: string;
        /**
          * TypeOfDate. Select type of date.
         */
        "typeOfDate"?: typeDate;
        /**
          * Default value input.
         */
        "valueDateSelected"?: string;
        /**
          * Default value input.
         */
        "valueEndDateSelected"?: string;
    }
    interface BdsDatepickerPeriod {
        /**
          * Return the validity of the input.
         */
        "clear": () => Promise<void>;
        /**
          * Data test is the prop to specifically test the component action object. dtButtonNext is the data-test to button next.
         */
        "dtButtonNext"?: string;
        /**
          * Data test is the prop to specifically test the component action object. dtButtonPrev is the data-test to button prev.
         */
        "dtButtonPrev"?: string;
        /**
          * Data test is the prop to specifically test the component action object. dtSelectMonth is the data-test to select month.
         */
        "dtSelectMonth"?: string;
        /**
          * Data test is the prop to specifically test the component action object. dtSelectYear is the data-test to select year.
         */
        "dtSelectYear"?: string;
        /**
          * EndDate. Insert a limiter to select the date period.
         */
        "endDate"?: DaysList;
        /**
          * EndDateSelect. Insert a limiter to select the date period.
         */
        "endDateSelect"?: Date;
        /**
          * Language, Entered as one of the languages. Can be one of: 'pt_BR', 'es_ES', 'en_US'.
         */
        "language"?: languages;
        /**
          * StartDate. Insert a limiter to select the date period.
         */
        "startDate"?: DaysList;
        /**
          * StartDateSelect. Insert a limiter to select the date period.
         */
        "startDateSelect"?: Date;
        /**
          * EndDateSelect. Insert a limiter to select the date period.
         */
        "stateSelect"?: stateSelect;
    }
    interface BdsDatepickerSingle {
        /**
          * Return the validity of the input.
         */
        "clear": () => Promise<void>;
        /**
          * dateSelect. Insert a limiter to select the date period.
         */
        "dateSelect"?: Date;
        /**
          * Data test is the prop to specifically test the component action object. dtButtonNext is the data-test to button next.
         */
        "dtButtonNext"?: string;
        /**
          * Data test is the prop to specifically test the component action object. dtButtonPrev is the data-test to button prev.
         */
        "dtButtonPrev"?: string;
        /**
          * Data test is the prop to specifically test the component action object. dtSelectMonth is the data-test to select month.
         */
        "dtSelectMonth"?: string;
        /**
          * Data test is the prop to specifically test the component action object. dtSelectYear is the data-test to select year.
         */
        "dtSelectYear"?: string;
        /**
          * EndDate. Insert a limiter to select the date period.
         */
        "endDate"?: DaysList;
        /**
          * Language, Entered as one of the languages. Can be one of: 'pt_BR', 'es_ES', 'en_US'.
         */
        "language"?: languages;
        /**
          * StartDate. Insert a limiter to select the date period.
         */
        "startDate"?: DaysList;
    }
    interface BdsDropdown {
        /**
          * Open. Used to open/close the dropdown.
         */
        "activeMode"?: activeMode;
        /**
          * Open. Used to open/close the dropdown.
         */
        "open"?: boolean;
        /**
          * Used to set drop position
         */
        "position"?: DropdownPostionType;
        "setClose": () => Promise<void>;
        "setOpen": () => Promise<void>;
        "toggle": () => Promise<void>;
    }
    interface BdsExpansionPanel {
    }
    interface BdsExpansionPanelBody {
        "open"?: boolean;
        "text"?: string;
    }
    interface BdsExpansionPanelHeader {
        "text"?: string;
    }
    interface BdsGrid {
        "alignItems"?: alignItems;
        "container"?: boolean;
        "containerFluid"?: boolean;
        "direction"?: direction;
        "flexWrap"?: flexWrap;
        "gap"?: gap;
        "height"?: string;
        "justifyContent"?: justifyContent2;
        "lg"?: breakpoint;
        "lgOffset"?: breakpoint;
        "margin"?: margin;
        "md"?: breakpoint;
        "mdOffset"?: breakpoint;
        "padding"?: padding;
        "sm"?: breakpoint;
        "smOffset"?: breakpoint;
        "xg"?: breakpoint;
        "xgOffset"?: breakpoint;
        "xs"?: breakpoint;
        "xsOffset"?: breakpoint;
        "xxs"?: breakpoint;
        "xxsOffset"?: breakpoint;
    }
    interface BdsIcon {
        /**
          * Specifies the label to use for accessibility. Defaults to the icon name.
         */
        "ariaLabel": string;
        /**
          * Specifies the color to use.Specifies a color to use. The default is svg.
         */
        "color"?: string;
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * Specifies whether the icon should horizontally flip when `dir` is `"rtl"`.
         */
        "flipRtl"?: boolean;
        /**
          * A combination of both `name` and `src`. If a `src` url is detected it will set the `src` property. Otherwise it assumes it's a built-in named SVG and set the `name` property.
         */
        "icon"?: any;
        /**
          * If enabled, ion-icon will be loaded lazily when it's visible in the viewport. Default, `false`.
         */
        "lazy": boolean;
        /**
          * Specifies which icon to use from the built-in set of icons.
         */
        "name"?: string;
        /**
          * Icon size. Entered as one of the icon size design tokens. Can be one of: "xxx-small", "xx-small", "x-small", "small", "medium", "large", "x-large", "xx-large", "xxx-large", "brand".
         */
        "size"?: IconSize;
        /**
          * Specifies the exact `src` of an SVG file to use.
         */
        "src"?: string;
        /**
          * Specifies the theme to use outline or solid icons. Defaults to outline.
         */
        "theme": IconTheme;
        /**
          * Specifies the type of icon. If type is set to emoji, it will be able to set only emoji names on the name property.
         */
        "type": IconType1;
    }
    interface BdsIllustration {
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * Specifies the name of illustration. Verify the names on illustration tokens.
         */
        "name": string;
        /**
          * Specifies the type to use. Can be: 'default'.
         */
        "type": IllustrationType;
    }
    interface BdsInput {
        /**
          * Capitalizes every word's second character.
         */
        "autoCapitalize"?: InputAutocapitalize;
        /**
          * Hint for form autofill feature
         */
        "autoComplete"?: InputAutoComplete;
        /**
          * Internal prop to identify input chips
         */
        "chips": boolean;
        /**
          * Return the validity of the input.
         */
        "clear": () => Promise<void>;
        /**
          * The rows and cols attributes allow you to specify an exact size for the <textarea> to get. Setting this is a good idea for consistency, as the browser defaults may differ.
         */
        "cols"?: number;
        /**
          * Passing true to display a counter of available size, it is necessary to pass another maxlength property.
         */
        "counterLength"?: boolean;
        /**
          * Make it possible to pass the base values to the warning level and exclude, using the values between min and max.
         */
        "counterLengthRule"?: InputCounterLengthRules;
        /**
          * Add state danger on input, use for use feedback.
         */
        "danger"?: boolean;
        /**
          * Id to support Cypress.
         */
        "dataTest"?: string;
        /**
          * Disabled input.
         */
        "disabled"?: boolean;
        /**
          * Error message when the value isn't an email
         */
        "emailErrorMessage": string;
        /**
          * Indicated to pass an feeback to user.
         */
        "errorMessage"?: string;
        /**
          * Returns the native `<input>` element used under the hood.
         */
        "getInputElement": () => Promise<HTMLInputElement>;
        /**
          * Indicated to pass a help the user in complex filling.
         */
        "helperMessage"?: string;
        /**
          * used for add icon in input left. Uses the bds-icon component.
         */
        "icon"?: string;
        /**
          * Input Name
         */
        "inputName"?: string;
        /**
          * If `true`, the user cannot modify the value.
         */
        "isSubmit": boolean;
        /**
          * if `true` input switched to textarea
         */
        "isTextarea": boolean;
        /**
          * Return the validity of the input.
         */
        "isValid": () => Promise<boolean>;
        /**
          * label in input, with he the input size increases.
         */
        "label"?: string;
        /**
          * The maximum value, which must not be less than its minimum (min attribute) value.
         */
        "max"?: string;
        /**
          * Error message when the value is higher than the max value
         */
        "maxErrorMessage": string;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.
         */
        "maxlength"?: number;
        /**
          * The minimum value, which must not be greater than its maximum (max attribute) value.
         */
        "min"?: string;
        /**
          * Error message when the value is lower than the min value
         */
        "minErrorMessage": string;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.
         */
        "minlength"?: number;
        /**
          * Error message when the value is lower than the minlength
         */
        "minlengthErrorMessage": string;
        /**
          * Error message when the value isn't an email
         */
        "numberErrorMessage": string;
        /**
          * Indicated to pass a regex pattern to input
         */
        "pattern"?: string;
        /**
          * A tip for the user who can enter no controls.
         */
        "placeholder"?: string;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly": boolean;
        "removeFocus": () => Promise<void>;
        /**
          * If `true`, the input value will be required.
         */
        "required": boolean;
        /**
          * Error message when input is required
         */
        "requiredErrorMessage": string;
        /**
          * The rows and cols attributes allow you to specify an exact size for the <textarea> to get. Setting this is a good idea for consistency, as the browser defaults may differ.
         */
        "rows"?: number;
        /**
          * Sets focus on the specified `ion-input`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * Add state success on input, use for use feedback.
         */
        "success"?: boolean;
        /**
          * Indicated to pass an feeback to user.
         */
        "successMessage"?: string;
        /**
          * Input type. Can be one of: "text", "password", "number" or "email".
         */
        "type"?: InputType;
        /**
          * The value of the input.
         */
        "value"?: string | null;
    }
    interface BdsInputChips {
        "add": (value: string) => Promise<void>;
        /**
          * The chips on the component Should be passed this way: chips='["chip1", "chip2"]'
         */
        "chips": string[] | string;
        /**
          * Clear all chips
         */
        "clear": () => Promise<void>;
        /**
          * Passing true to display a counter of available size, it is necessary to pass another maxlength property.
         */
        "counterLength"?: boolean;
        /**
          * Add state danger on input, use for use feedback.
         */
        "danger"?: boolean;
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * The delimiter is used to add multiple chips in the same string.
         */
        "delimiters"?: RegExp;
        /**
          * If `true`, the user cannot modify the value.
         */
        "disableSubmit": boolean;
        /**
          * Disabled input
         */
        "disabled"?: boolean;
        /**
          * Data test is the prop to specifically test the component action object. dtButtonClose is the data-test to button close.
         */
        "dtButtonClose"?: string;
        /**
          * Do not accept duplicate chip elements.
         */
        "duplicated"?: boolean;
        /**
          * Indicated to pass an feedback to user.
         */
        "errorMessage"?: string;
        /**
          * Return the chips
         */
        "get": () => Promise<string[]>;
        /**
          * Indicated to pass a help the user in complex filling.
         */
        "helperMessage"?: string;
        /**
          * used for add icon in input left. Uses the bds-icon component.
         */
        "icon"?: string;
        /**
          * Prop to insert the name of the input
         */
        "inputName"?: string;
        /**
          * Return the validity of the input chips.
         */
        "isValid": () => Promise<boolean>;
        /**
          * label in input, with he the input size increases.
         */
        "label"?: string;
        /**
          * Set maximum length value for chips
         */
        "maxChipsLength"?: number;
        /**
          * Set maximum length value for the chip content
         */
        "maxlength"?: number;
        /**
          * A tip for the user who can enter no controls.
         */
        "placeholder"?: string;
        "removeFocus": () => Promise<void>;
        "setFocus": () => Promise<void>;
        /**
          * Add state success on input, use for use feedback.
         */
        "success"?: boolean;
        /**
          * Indicated to pass an feeback to user.
         */
        "successMessage"?: string;
        /**
          * Defining the type is important so that it is possible to carry out validations. Can be one of: 'text' and 'email;
         */
        "type": InputChipsTypes;
        /**
          * The value of the input.
         */
        "value"?: string | null;
    }
    interface BdsInputEditable {
        /**
          * Add state danger on input, use for use feedback. If true avoid save confirmation.
         */
        "danger"?: boolean;
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * Data test is the prop to specifically test the component action object. dtButtonClose is the data-test to button close.
         */
        "dtButtonClose"?: string;
        /**
          * Data test is the prop to specifically test the component action object. dtButtonConfirm is the data-test to button confirm.
         */
        "dtButtonConfirm"?: string;
        /**
          * Data test is the prop to specifically test the component action object. dtButtonEdit is the data-test to button edit.
         */
        "dtButtonEdit"?: string;
        /**
          * Indicated to pass an feeback to user.
         */
        "errorMessage"?: string;
        /**
          * Defines whether the component will be expandable
         */
        "expand"?: boolean;
        /**
          * Indicated to pass a help to the user in complex filling.
         */
        "helperMessage"?: string;
        /**
          * Input Name
         */
        "inputName"?: string;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.
         */
        "maxlength"?: number;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.
         */
        "minlength"?: number;
        /**
          * Error message when the value is lower than the minlength
         */
        "minlengthErrorMessage": string;
        /**
          * Placeholder for native input element.
         */
        "placeholder"?: string;
        /**
          * Error message when input is required
         */
        "requiredErrorMessage": string;
        /**
          * Set the component size. Can be one of: 'short' | 'standard' | 'tall';
         */
        "size"?: SizeInputEditable;
        /**
          * Add state success on input, use for use feedback.
         */
        "success"?: boolean;
        /**
          * Indicated to pass an feeback to user.
         */
        "successMessage"?: string;
        /**
          * The value of the input.
         */
        "value"?: string | null;
    }
    interface BdsInputPassword {
        /**
          * Capitalizes every word's second character.
         */
        "autoCapitalize"?: InputAutocapitalize;
        /**
          * Hint for form autofill feature
         */
        "autoComplete"?: InputAutoComplete;
        /**
          * Add state danger on input, use for use feedback.
         */
        "danger"?: boolean;
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * Disabled input.
         */
        "disabled"?: boolean;
        /**
          * Indicated to pass an feeback to user.
         */
        "errorMessage"?: string;
        /**
          * Indicated to pass a help the user in complex filling.
         */
        "helperMessage"?: string;
        /**
          * used for add icon in input left. Uses the bds-icon component.
         */
        "icon"?: string;
        /**
          * Input Name
         */
        "inputName"?: string;
        /**
          * label in input, with he the input size increases.
         */
        "label"?: string;
        /**
          * The maximum value, which must not be less than its minimum (min attribute) value.
         */
        "max"?: string;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.
         */
        "maxlength"?: number;
        /**
          * The minimum value, which must not be greater than its maximum (max attribute) value.
         */
        "min"?: string;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.
         */
        "minlength"?: number;
        "openEyes"?: boolean;
        /**
          * A tip for the user who can enter no controls.
         */
        "placeholder"?: string;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly": boolean;
        /**
          * Add state success on input, use for use feedback.
         */
        "success"?: boolean;
        /**
          * Indicated to pass an feeback to user.
         */
        "successMessage"?: string;
        /**
          * The value of the input.
         */
        "value"?: string | null;
    }
    interface BdsInputPhoneNumber {
        "changeCountry": (code: any, isoCode: any, flag: any) => Promise<void>;
        /**
          * Add state danger on input, use for use feedback.
         */
        "danger"?: boolean;
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * Disabled input.
         */
        "disabled"?: boolean;
        /**
          * Data test is the prop to specifically test the component action object. dtSelectFlag is the data-test to button close.
         */
        "dtSelectFlag"?: string;
        /**
          * Indicated to pass an feeback to user.
         */
        "errorMessage"?: string;
        /**
          * Indicated to pass a help the user in complex filling.
         */
        "helperMessage"?: string;
        /**
          * used for add icon in input left. Uses the bds-icon component.
         */
        "icon"?: string;
        /**
          * label in input, with he the input size increases.
         */
        "label"?: string;
        /**
          * Error message when input is required
         */
        "numberErrorMessage": string;
        /**
          * The options of select.
         */
        "options"?: Array<Option>;
        "removeFocus": () => Promise<void>;
        /**
          * If `true`, the input value will be required.
         */
        "required": boolean;
        /**
          * Error message when input is required
         */
        "requiredErrorMessage": string;
        /**
          * Add state success on input, use for use feedback.
         */
        "success"?: boolean;
        /**
          * Indicated to pass an feeback to user.
         */
        "successMessage"?: string;
        /**
          * The value of the phone number input.
         */
        "text"?: string;
        /**
          * the value of the select.
         */
        "value"?: string | null;
    }
    interface BdsList {
        /**
          * The Data of the list Should be passed this way: data='[{"value": "01","text": "Text","secondaryText": "Secondary Text","avatarName": "","avatarThumbnail": "","checked"="true","icon": "settings-builder"}, {"value": "02","text": "Text","secondaryText": "Secondary Text","avatarName": "","avatarThumbnail": "","checked"="false","icon": "settings-builder",}]' Data can also be passed as child by using bds-list-item component, but passing as a child you may have some compatibility problems with Angular.
         */
        "data"?: string | Data[];
        /**
          * Typelist. Used to .
         */
        "typeList"?: TypeList;
        /**
          * The value of the selected radio
         */
        "value"?: string;
    }
    interface BdsListItem {
        /**
          * The actions buttons on the component Should be passed this way: actions-buttons='["copy", "settings-general", "more-options-horizontal"]'
         */
        "actionsButtons": string | string[];
        /**
          * Active. Used to define when the item is highlighted.
         */
        "active"?: boolean;
        /**
          * AvatarName. Used to enter the avatar name.
         */
        "avatarName"?: string;
        /**
          * AvatarThumbnail. Used to insert the avatar photo.
         */
        "avatarThumbnail"?: string;
        /**
          * Enable rounded border on item
         */
        "borderRadius"?: boolean;
        "checked"?: boolean;
        /**
          * The chips on the component Should be passed this way: chips='["chip1", "chip2"]'
         */
        "chips": string | string[];
        /**
          * Clickable. Used to define if the item is clickable or not.
         */
        "clickable"?: boolean;
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * Icon. Used to add icon in list item.
         */
        "icon"?: string;
        /**
          * SecondaryText. Used to insert a secondaryText in the display item.
         */
        "secondaryText"?: string;
        /**
          * Text. Used to insert a text in the display item.
         */
        "text"?: string;
        /**
          * Typelis. Used toselect type of item list.
         */
        "typeList"?: TypeList1;
        /**
          * Value. Used to insert a value in list item.
         */
        "value": string;
    }
    interface BdsLoadingBar {
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * Percent, property to enter the loading bar status percentage value.
         */
        "percent"?: number;
        /**
          * Size, property to define size of component.
         */
        "size"?: loadingBarSize;
        /**
          * Text, property to enable the bar info text.
         */
        "text"?: string;
    }
    interface BdsLoadingPage {
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
    }
    interface BdsLoadingSpinner {
        /**
          * Color, Entered as one of the color. Can be one of: 'default', 'white'.
         */
        "color"?: colorsVariants;
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * Size, Entered as one of the size. Can be one of: 'small', 'standard', 'large'.
         */
        "size"?: loadingSize;
        /**
          * Sets the color of the spinner, can be 'primary', 'secondary' or 'ghost'
         */
        "variant": LoadingSpinnerVariant;
    }
    interface BdsMenu {
        /**
          * Menu. Used to link the minus with the action button.
         */
        "menu"?: string;
        /**
          * Open. Used to open/close the menu.
         */
        "open"?: boolean;
        /**
          * Position. Used to position the Menu. Either on the left or on the bottom.
         */
        "position"?: menuPosition;
        "toggle": () => Promise<void>;
    }
    interface BdsMenuAction {
        /**
          * ButtonText. Used to enter the display text for the item.
         */
        "buttonText"?: string;
        /**
          * Description. Used to insert a subtitle in the display item.
         */
        "description"?: string;
        /**
          * Disabled. Used to declare that the item will be disabled.
         */
        "disabled"?: boolean;
        /**
          * Iconleft. Used to insert the string icon and make the icon available to the left of the item.
         */
        "iconLeft"?: string;
        /**
          * Lipstick. Used to declare that the item will be a negative/error action.
         */
        "lipstick"?: boolean;
        /**
          * SubMenu. Used to declare that the button will have a submenu.
         */
        "subMenu"?: boolean;
        /**
          * Subtitle. Used to insert a subtitle in the display item.
         */
        "subtitle"?: string;
    }
    interface BdsMenuExibition {
        /**
          * AvatarName. Used to enter the avatar name.
         */
        "avatarName"?: string;
        /**
          * AvatarSize. Used to set avatar size.
         */
        "avatarSize"?: avatarSize;
        /**
          * AvatarThumbnail. Used to insert the avatar photo.
         */
        "avatarThumbnail"?: string;
        /**
          * Description. Used to insert a subtitle in the display item.
         */
        "description"?: string;
        /**
          * Disabled. Used to declare that the item will be disabled.
         */
        "disabled"?: boolean;
        /**
          * Subtitle. Used to insert a subtitle in the display item.
         */
        "subtitle"?: string;
        /**
          * Value. Used to insert a title in the display item.
         */
        "value"?: string;
    }
    interface BdsMenuList {
    }
    interface BdsMenuListItem {
        "color": string;
        /**
          * used for add icon in input left. Uses the bds-icon component.
         */
        "icon": string;
    }
    interface BdsMenuSeparation {
        /**
          * Size. Used to set the size of the divider.
         */
        "size"?: string;
        /**
          * Value. Used to insert a title to the divider.
         */
        "value"?: string;
    }
    interface BdsModal {
        /**
          * Used to hide or show the close button
         */
        "closeButton"?: boolean;
        /**
          * Data test is the prop to specifically test the component action object. dtButtonClose is the data-test to button close.
         */
        "dtButtonClose"?: string;
        /**
          * Data test is the prop to specifically test the component action object. dtOutzone is the data-test to button close.
         */
        "dtOutzone"?: string;
        /**
          * Used to open/close the modal
         */
        "open"?: boolean;
        /**
          * If true, the modal will close clicking outside the component.
         */
        "outzoneClose"?: boolean;
        /**
          * Used to change the modal heights.
         */
        "size"?: sizes;
        /**
          * Can be used outside to open/close the modal
         */
        "toggle": () => Promise<void>;
    }
    interface BdsModalAction {
    }
    interface BdsModalCloseButton {
        /**
          * Used to hide or show the close button
         */
        "active"?: boolean;
    }
    interface BdsNavbar {
        /**
          * Width, number to define navbar width.
         */
        "backgroundColor"?: navbarBackground;
        /**
          * Justify Content. Used to align itens in navbar.
         */
        "justifyContent"?: justifyContent;
        /**
          * Navbar orientation. Used to orientation the navbar. Either on the left or on the right.
         */
        "orientation"?: orientation;
    }
    interface BdsNavbarContent {
    }
    interface BdsPagination {
        /**
          * Data test is the prop to specifically test the component action object. dtButtonEnd is the data-test to button end
         */
        "dtButtonEnd"?: string;
        /**
          * Data test is the prop to specifically test the component action object. dtButtonInitial is the data-test to button initial.
         */
        "dtButtonInitial"?: string;
        /**
          * Data test is the prop to specifically test the component action object. dtButtonNext is the data-test to button next.
         */
        "dtButtonNext"?: string;
        /**
          * Data test is the prop to specifically test the component action object. dtButtonPrev is the data-test to button prev.
         */
        "dtButtonPrev"?: string;
        /**
          * Data test is the prop to specifically test the component action object. dtSelectNumber is the data-test to select number.
         */
        "dtSelectNumber"?: string;
        /**
          * Set the placement of the options menu. Can be 'bottom' or 'top'.
         */
        "optionsPosition"?: PaginationOptionsPositionType;
        /**
          * Prop to recive the number of pages.
         */
        "pages"?: number;
        /**
          * When the component are render this page are set.
         */
        "startedPage"?: number;
    }
    interface BdsPaper {
        /**
          * Prop for set the border of the component.
         */
        "border"?: boolean;
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * Size. Entered as one of the size. Can be one of: 'static', 'primary', 'secondary';
         */
        "elevation"?: PaperElevation;
        /**
          * Prop for set the height of the component.
         */
        "height"?: string;
        /**
          * Prop for set the width of the component.
         */
        "width"?: string;
    }
    interface BdsProgressBar {
        /**
          * Text, property to define status of component.
         */
        "color"?: progressBarColor;
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * Percent, property to enter the progress bar status percentage value.
         */
        "percent"?: number;
        /**
          * Size, property to define size of component.
         */
        "size"?: progressBarSize;
        /**
          * Text, property to enable the bar info text.
         */
        "text"?: string;
    }
    interface BdsRadio {
        /**
          * If `true`, the checkbox is selected.
         */
        "checked"?: boolean;
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * If `true`, the user cannot interact with the checkbox.
         */
        "disabled"?: boolean;
        "getInputElement": () => Promise<HTMLInputElement>;
        "getValue": () => Promise<boolean>;
        /**
          * label in radio, with he the input size increases.
         */
        "label"?: string;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Refer. Field to add refer in radio buttom.
         */
        "refer"?: string;
        /**
          * The value of the input.
         */
        "value": string;
    }
    interface BdsRadioGroup {
        /**
          * The value of the selected radio
         */
        "value"?: string;
    }
    interface BdsSelect {
        /**
          * Add state danger on input, use for use feedback.
         */
        "danger"?: boolean;
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * Disabled input.
         */
        "disabled"?: boolean;
        /**
          * Indicated to pass an feeback to user.
         */
        "errorMessage"?: string;
        /**
          * Indicated to pass a help the user in complex filling.
         */
        "helperMessage"?: string;
        /**
          * used for add icon in input left. Uses the bds-icon component.
         */
        "icon"?: string;
        /**
          * label in input, with he the input size increases.
         */
        "label"?: string;
        /**
          * The options of the select Should be passed this way: options='[{"value": "Cat", "label": "Meow"}, {"value": "Dog", "label": "Woof"}]' Options can also be passed as child by using bds-select-option component, but passing as a child you may have some compatibility problems with Angular.
         */
        "options"?: string | Option[];
        /**
          * Set the placement of the options menu. Can be 'bottom' or 'top'.
         */
        "optionsPosition"?: SelectOptionsPositionType;
        /**
          * Placeholder for native input element.
         */
        "placeholder"?: string;
        /**
          * Add state success on input, use for use feedback.
         */
        "success"?: boolean;
        /**
          * Indicated to pass an feeback to user.
         */
        "successMessage"?: string;
        /**
          * the value of the select.
         */
        "value"?: any | null;
    }
    interface BdsSelectChips {
        "add": (value: string) => Promise<void>;
        /**
          * Specify if is possible to create a new tag that is not on the options.
         */
        "canAddNew"?: boolean;
        /**
          * The chips on the component Should be passed this way: chips='["chip1", "chip2"]'
         */
        "chips": string | string[];
        /**
          * Clear all chips
         */
        "clear": () => Promise<void>;
        /**
          * Add state danger on input, use for use feedback.
         */
        "danger"?: boolean;
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * The delimiter is used to add multiple chips in the same string.
         */
        "delimiters"?: RegExp;
        /**
          * If `true`, the user cannot modify the value.
         */
        "disableSubmit": boolean;
        /**
          * Disabled input.
         */
        "disabled"?: boolean;
        /**
          * Do not accept duplicate chip elements.
         */
        "duplicated"?: boolean;
        /**
          * Indicated to pass an feedback to user.
         */
        "errorMessage"?: string;
        /**
          * Return the chips
         */
        "getChips": () => Promise<string[]>;
        /**
          * Indicated to pass a help the user in complex filling.
         */
        "helperMessage"?: string;
        /**
          * used for add icon in input left. Uses the bds-icon component.
         */
        "icon"?: string;
        /**
          * Prop to insert the name of the input
         */
        "inputName"?: string;
        /**
          * Return the validity of the input chips.
         */
        "isValid": () => Promise<boolean>;
        /**
          * label in input, with he the input size increases.
         */
        "label"?: string;
        /**
          * Set maximum length value for the chip content
         */
        "maxlength"?: number;
        /**
          * Used for add prefix on new option select.
         */
        "newPrefix"?: string;
        /**
          * Specify if is possible to create a new tag that is not on the options.
         */
        "notFoundMessage"?: string;
        /**
          * The options of the select Should be passed this way: options='[{"value": "Cat", "label": "Meow"}, {"value": "Dog", "label": "Woof"}]' Options can also be passed as child by using bds-select-option component, but passing as a child you may have some compatibility problems with Angular.
         */
        "options"?: string | Option[];
        /**
          * Set the placement of the options menu. Can be 'bottom' or 'top'.
         */
        "optionsPosition"?: SelectOptionsPositionType;
        /**
          * A tip for the user who can enter no controls.
         */
        "placeholder"?: string;
        "removeFocus": () => Promise<void>;
        "setFocus": () => Promise<void>;
        /**
          * Add state success on input, use for use feedback.
         */
        "success"?: boolean;
        /**
          * Indicated to pass an feeback to user.
         */
        "successMessage"?: string;
        /**
          * Defining the type is important so that it is possible to carry out validations. Can be one of: 'text' and 'email;
         */
        "type": InputChipsTypes;
        /**
          * the value of the select.
         */
        "value"?: string | null;
    }
    interface BdsSelectOption {
        /**
          * Quantity Description on option value, this item is locate to rigth in component.
         */
        "bulkOption"?: string;
        /**
          * If `true`, the checkbox is selected.
         */
        "checked": boolean;
        /**
          * Add state danger on input, use for use feedback.
         */
        "danger"?: boolean;
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * If `true`, the user cannot interact with the select option.
         */
        "disabled"?: boolean;
        /**
          * Add state danger on input, use for use feedback.
         */
        "invisible"?: boolean;
        "markOff": () => Promise<void>;
        /**
          * The text value of the option.
         */
        "selected"?: boolean;
        /**
          * Alignment of input-left slot. The value need to be one of the values used on flexbox align-self property.
         */
        "slotAlign"?: string;
        /**
          * If set, a text will be displayed on the right side of the option label
         */
        "status"?: string;
        /**
          * If set, a title will be shown under the text
         */
        "titleText": string;
        "toMark": () => Promise<void>;
        "toggle": () => Promise<void>;
        /**
          * Type Option. Used toselect type of item list.
         */
        "typeOption"?: TypeOption;
        "value": any;
    }
    interface BdsSidebar {
        /**
          * Width, number to define sidebar width.
         */
        "background"?: sidebarBackground;
        /**
          * Data test is the prop to specifically test the component action object. dtButtonClose is the data-test to button close.
         */
        "dtButtonClose"?: string;
        /**
          * Data test is the prop to specifically test the component action object. dtOutzone is the data-test to button close.
         */
        "dtOutzone"?: string;
        /**
          * ; isOpen. Used to open sidebar.
         */
        "isOpen"?: boolean;
        /**
          * If true, a lateral margin will apear in the content.
         */
        "margin"?: boolean;
        /**
          * sidebar position. Used to position the sidebar. Either on the left or on the right.
         */
        "sidebarPosition"?: sidebarPosition;
        "toggle": () => Promise<void>;
        /**
          * sidebar type. Used to define how open.
         */
        "type"?: sidebarType;
        /**
          * Width, number to define sidebar width.
         */
        "width"?: number;
    }
    interface BdsStep {
        /**
          * Used to set the step as active
         */
        "active"?: boolean;
        /**
          * Used to complete the step
         */
        "completed"?: boolean;
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * Used to set the step as disabled
         */
        "disabled"?: boolean;
        /**
          * Used to set the index of the steps
         */
        "index"?: number;
        /**
          * Used to define the last step component on the list
         */
        "last"?: boolean;
        /**
          * Used to set cursor pointer on the step (useful to allow clicks on the steps)
         */
        "pointer"?: boolean;
    }
    interface BdsStepper {
        /**
          * Returns the active step
          * @returns HTMLBdsStepElement
         */
        "getActiveStep": () => Promise<number>;
        /**
          * Reset all active steps
          * @returns void
         */
        "resetActiveSteps": () => Promise<void>;
        /**
          * Reset all completed steps
          * @returns void
         */
        "resetCompletedSteps": () => Promise<void>;
        /**
          * Set the active step
          * @param index The index of the step to be set as active
          * @returns void
         */
        "setActiveStep": (index: number) => Promise<void>;
        /**
          * Set the completed step
          * @param index The index of the step to be set as completed
          * @returns void
         */
        "setCompletedStep": (index: number) => Promise<void>;
    }
    interface BdsSwitch {
        /**
          * If `true`, the switch is selected.
         */
        "checked": boolean;
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * If `true`, the user cannot interact with the switch.
         */
        "disabled": boolean;
        "getInputElement": () => Promise<HTMLInputElement>;
        "getValue": () => Promise<boolean>;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * The refer of the control.
         */
        "refer": string;
        /**
          * Size. Entered as one of the size. Can be one of: 'tall', 'standard', 'short';
         */
        "size"?: SwitchSize;
    }
    interface BdsTab {
        /**
          * Prop to control externally if a tab will be active by default
         */
        "active": boolean;
        /**
          * Specifies the Tab group. Used to link it to the TabPanel.
         */
        "group": string;
        /**
          * The text to be shown at the Tab
         */
        "label": string;
    }
    interface BdsTabGroup {
        "align": 'left' | 'center' | 'right';
        "contentScrollable"?: boolean;
        /**
          * Data test is the prop to specifically test the component action object. dtButtonNext is the data-test to button next.
         */
        "dtButtonNext"?: string;
        /**
          * Data test is the prop to specifically test the component action object. dtButtonPrev is the data-test to button prev.
         */
        "dtButtonPrev"?: string;
    }
    interface BdsTabItem {
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * Prop for disable the especific tab.
         */
        "disable"?: boolean;
        /**
          * The text to be shown at the Tab item.
         */
        "label"?: string;
        /**
          * Use to set number of tabItem.
         */
        "numberElement"?: number;
        /**
          * Used to open/close the Tab item.
         */
        "open"?: boolean;
        "reciveNumber": (number: any) => Promise<void>;
    }
    interface BdsTabPanel {
        /**
          * Specifies the TabPanel group. Used to link it to the Tab.
         */
        "group": string;
    }
    interface BdsTable {
    }
    interface BdsTableBody {
    }
    interface BdsTableCell {
        "sortable": boolean;
        "type"?: string;
    }
    interface BdsTableHeader {
    }
    interface BdsTableRow {
        /**
          * Prop to make hover animation.
         */
        "clickable"?: boolean;
        /**
          * Prop to highlight the row selected.
         */
        "selected"?: boolean;
    }
    interface BdsTableTh {
        "arrow": string;
        "sortable": boolean;
    }
    interface BdsTabs {
        "align": 'left' | 'center' | 'right';
    }
    interface BdsTestComponent {
    }
    interface BdsThemeProvider {
        /**
          * Set what theme will be aplyed inside the component. 'light', 'dark';
         */
        "theme"?: Themes;
    }
    interface BdsToast {
        /**
          * ActionType. Defines if the button should have a button or an icon. Can be one of: 'icon', 'button';
         */
        "actionType": ActionType;
        /**
          * Define an action to the button toast. Can be one of: 'close', 'custom'; if the action type is set to close, the button will close automatically. if the action type is set to custom, a function need to be passed when the toastButtonClick is emitted.
         */
        "buttonAction": ButtonActionType;
        /**
          * If the action type is button, this will be the text of the button:
         */
        "buttonText": string;
        /**
          * Can be used outside the component to close the toast
         */
        "close": () => Promise<void>;
        /**
          * Can be used outside to open the toast
         */
        "create": ({ actionType, buttonAction, buttonText, icon, toastText, toastTitle, variant, duration, }: CreateToastType) => Promise<void>;
        /**
          * Data test is the prop to specifically test the component action object. dtButtonAction is the data-test to button action.
         */
        "dtButtonAction"?: string;
        /**
          * Data test is the prop to specifically test the component action object. dtButtonClose is the data-test to button close.
         */
        "dtButtonClose"?: string;
        /**
          * Time to close the toast in seconds 0 = never close automatically (default value)
         */
        "duration": number;
        /**
          * Controls the hide event of the component:
         */
        "hide": boolean;
        /**
          * used for add the icon. Uses the bds-icon component.
         */
        "icon"?: string;
        /**
          * The toast position on the screen. Can be one of: 'top-right', 'top-left', 'bottom-right', 'bottom-left' (default value);
         */
        "position": PositionType;
        /**
          * Controls the open event of the component:
         */
        "show": boolean;
        /**
          * The text content of the component:
         */
        "toastText": string;
        /**
          * The title of the component:
         */
        "toastTitle": string;
        /**
          * Variant. Defines the color of the toast. Can be one of: 'system', 'error', 'success', 'warning', 'undo', 'redo';
         */
        "variant": VariantType;
    }
    interface BdsToastContainer {
    }
    interface BdsTooltip {
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * Used to disable tooltip when the button are avalible
         */
        "disabled"?: boolean;
        /**
          * Used to set tooltip position
         */
        "position": TooltipPostionType;
        /**
          * Used to set tooltip text
         */
        "tooltipText": string;
        /**
          * Method for change the visibility of tooltip.
         */
        "visible": () => Promise<void>;
    }
    interface BdsTypo {
        /**
          * Bold. Entered as one of the bold. Can be one of: 'regular', 'semi-bold', 'bold', 'extra-bold';
         */
        "bold"?: Bold;
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * Added font style italic
         */
        "italic"?: boolean;
        /**
          * Line Height. Entered as one of the line hieght. Can be one of: 'none', 'small', 'simple', 'plus', 'double'
         */
        "lineHeight"?: FontLineHeight;
        /**
          * If true, adds default margin values
         */
        "margin"?: boolean;
        /**
          * Added style no wrap
         */
        "noWrap"?: boolean;
        /**
          * Tranform text in paragraph
         */
        "paragraph"?: boolean;
        /**
          * Define element tag, must be used for acessibilty
         */
        "tag"?: Tag;
        /**
          * Variant. Entered as one of the font size variant. Can be one of: 'fs-10' ,'fs-12' ,'fs-14' ,'fs-16' ,'fs-20' ,'fs-24' ,'fs-32' ,'fs-40';
         */
        "variant"?: FontSize;
    }
    interface BdsUpload {
        /**
          * Used to accept a especific type of file.
         */
        "accept": string;
        /**
          * Used for add a error message. In case a verify.
         */
        "error": string;
        /**
          * Set the language for fixed texts.
         */
        "language"?: languages1;
        /**
          * Used to allow upload multiple files.
         */
        "multiple": boolean;
        /**
          * Used for add a text on subtitle.
         */
        "subtitle": string;
        /**
          * Used for add a text on title.
         */
        "titleName": string;
    }
    interface BdsWarning {
    }
}
export interface BdsAccordionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBdsAccordionElement;
}
export interface BdsAccordionGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBdsAccordionGroupElement;
}
export interface BdsAutocompleteCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBdsAutocompleteElement;
}
export interface BdsAvatarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBdsAvatarElement;
}
export interface BdsAvatarGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBdsAvatarGroupElement;
}
export interface BdsBannerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBdsBannerElement;
}
export interface BdsBannerLinkCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBdsBannerLinkElement;
}
export interface BdsButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBdsButtonElement;
}
export interface BdsCardCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBdsCardElement;
}
export interface BdsCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBdsCheckboxElement;
}
export interface BdsChipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBdsChipElement;
}
export interface BdsChipClickableCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBdsChipClickableElement;
}
export interface BdsChipSelectedCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBdsChipSelectedElement;
}
export interface BdsDataTableCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBdsDataTableElement;
}
export interface BdsDatepickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBdsDatepickerElement;
}
export interface BdsDatepickerPeriodCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBdsDatepickerPeriodElement;
}
export interface BdsDatepickerSingleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBdsDatepickerSingleElement;
}
export interface BdsDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBdsDropdownElement;
}
export interface BdsInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBdsInputElement;
}
export interface BdsInputChipsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBdsInputChipsElement;
}
export interface BdsInputEditableCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBdsInputEditableElement;
}
export interface BdsInputPasswordCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBdsInputPasswordElement;
}
export interface BdsInputPhoneNumberCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBdsInputPhoneNumberElement;
}
export interface BdsListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBdsListElement;
}
export interface BdsListItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBdsListItemElement;
}
export interface BdsMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBdsMenuElement;
}
export interface BdsModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBdsModalElement;
}
export interface BdsPaginationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBdsPaginationElement;
}
export interface BdsRadioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBdsRadioElement;
}
export interface BdsRadioGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBdsRadioGroupElement;
}
export interface BdsSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBdsSelectElement;
}
export interface BdsSelectChipsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBdsSelectChipsElement;
}
export interface BdsSelectOptionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBdsSelectOptionElement;
}
export interface BdsSidebarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBdsSidebarElement;
}
export interface BdsSwitchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBdsSwitchElement;
}
export interface BdsTabCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBdsTabElement;
}
export interface BdsTabGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBdsTabGroupElement;
}
export interface BdsTabItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBdsTabItemElement;
}
export interface BdsTabsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBdsTabsElement;
}
export interface BdsToastCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBdsToastElement;
}
export interface BdsUploadCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBdsUploadElement;
}
declare global {
    interface HTMLBdsAccordionElement extends Components.BdsAccordion, HTMLStencilElement {
    }
    var HTMLBdsAccordionElement: {
        prototype: HTMLBdsAccordionElement;
        new (): HTMLBdsAccordionElement;
    };
    interface HTMLBdsAccordionBodyElement extends Components.BdsAccordionBody, HTMLStencilElement {
    }
    var HTMLBdsAccordionBodyElement: {
        prototype: HTMLBdsAccordionBodyElement;
        new (): HTMLBdsAccordionBodyElement;
    };
    interface HTMLBdsAccordionGroupElement extends Components.BdsAccordionGroup, HTMLStencilElement {
    }
    var HTMLBdsAccordionGroupElement: {
        prototype: HTMLBdsAccordionGroupElement;
        new (): HTMLBdsAccordionGroupElement;
    };
    interface HTMLBdsAccordionHeaderElement extends Components.BdsAccordionHeader, HTMLStencilElement {
    }
    var HTMLBdsAccordionHeaderElement: {
        prototype: HTMLBdsAccordionHeaderElement;
        new (): HTMLBdsAccordionHeaderElement;
    };
    interface HTMLBdsAlertElement extends Components.BdsAlert, HTMLStencilElement {
    }
    var HTMLBdsAlertElement: {
        prototype: HTMLBdsAlertElement;
        new (): HTMLBdsAlertElement;
    };
    interface HTMLBdsAlertActionsElement extends Components.BdsAlertActions, HTMLStencilElement {
    }
    var HTMLBdsAlertActionsElement: {
        prototype: HTMLBdsAlertActionsElement;
        new (): HTMLBdsAlertActionsElement;
    };
    interface HTMLBdsAlertBodyElement extends Components.BdsAlertBody, HTMLStencilElement {
    }
    var HTMLBdsAlertBodyElement: {
        prototype: HTMLBdsAlertBodyElement;
        new (): HTMLBdsAlertBodyElement;
    };
    interface HTMLBdsAlertHeaderElement extends Components.BdsAlertHeader, HTMLStencilElement {
    }
    var HTMLBdsAlertHeaderElement: {
        prototype: HTMLBdsAlertHeaderElement;
        new (): HTMLBdsAlertHeaderElement;
    };
    interface HTMLBdsAutocompleteElement extends Components.BdsAutocomplete, HTMLStencilElement {
    }
    var HTMLBdsAutocompleteElement: {
        prototype: HTMLBdsAutocompleteElement;
        new (): HTMLBdsAutocompleteElement;
    };
    interface HTMLBdsAvatarElement extends Components.BdsAvatar, HTMLStencilElement {
    }
    var HTMLBdsAvatarElement: {
        prototype: HTMLBdsAvatarElement;
        new (): HTMLBdsAvatarElement;
    };
    interface HTMLBdsAvatarGroupElement extends Components.BdsAvatarGroup, HTMLStencilElement {
    }
    var HTMLBdsAvatarGroupElement: {
        prototype: HTMLBdsAvatarGroupElement;
        new (): HTMLBdsAvatarGroupElement;
    };
    interface HTMLBdsBadgeElement extends Components.BdsBadge, HTMLStencilElement {
    }
    var HTMLBdsBadgeElement: {
        prototype: HTMLBdsBadgeElement;
        new (): HTMLBdsBadgeElement;
    };
    interface HTMLBdsBannerElement extends Components.BdsBanner, HTMLStencilElement {
    }
    var HTMLBdsBannerElement: {
        prototype: HTMLBdsBannerElement;
        new (): HTMLBdsBannerElement;
    };
    interface HTMLBdsBannerLinkElement extends Components.BdsBannerLink, HTMLStencilElement {
    }
    var HTMLBdsBannerLinkElement: {
        prototype: HTMLBdsBannerLinkElement;
        new (): HTMLBdsBannerLinkElement;
    };
    interface HTMLBdsButtonElement extends Components.BdsButton, HTMLStencilElement {
    }
    var HTMLBdsButtonElement: {
        prototype: HTMLBdsButtonElement;
        new (): HTMLBdsButtonElement;
    };
    interface HTMLBdsButtonIconElement extends Components.BdsButtonIcon, HTMLStencilElement {
    }
    var HTMLBdsButtonIconElement: {
        prototype: HTMLBdsButtonIconElement;
        new (): HTMLBdsButtonIconElement;
    };
    interface HTMLBdsCardElement extends Components.BdsCard, HTMLStencilElement {
    }
    var HTMLBdsCardElement: {
        prototype: HTMLBdsCardElement;
        new (): HTMLBdsCardElement;
    };
    interface HTMLBdsCardBodyElement extends Components.BdsCardBody, HTMLStencilElement {
    }
    var HTMLBdsCardBodyElement: {
        prototype: HTMLBdsCardBodyElement;
        new (): HTMLBdsCardBodyElement;
    };
    interface HTMLBdsCardColorElement extends Components.BdsCardColor, HTMLStencilElement {
    }
    var HTMLBdsCardColorElement: {
        prototype: HTMLBdsCardColorElement;
        new (): HTMLBdsCardColorElement;
    };
    interface HTMLBdsCardFooterElement extends Components.BdsCardFooter, HTMLStencilElement {
    }
    var HTMLBdsCardFooterElement: {
        prototype: HTMLBdsCardFooterElement;
        new (): HTMLBdsCardFooterElement;
    };
    interface HTMLBdsCardHeaderElement extends Components.BdsCardHeader, HTMLStencilElement {
    }
    var HTMLBdsCardHeaderElement: {
        prototype: HTMLBdsCardHeaderElement;
        new (): HTMLBdsCardHeaderElement;
    };
    interface HTMLBdsCardSubtitleElement extends Components.BdsCardSubtitle, HTMLStencilElement {
    }
    var HTMLBdsCardSubtitleElement: {
        prototype: HTMLBdsCardSubtitleElement;
        new (): HTMLBdsCardSubtitleElement;
    };
    interface HTMLBdsCardTitleElement extends Components.BdsCardTitle, HTMLStencilElement {
    }
    var HTMLBdsCardTitleElement: {
        prototype: HTMLBdsCardTitleElement;
        new (): HTMLBdsCardTitleElement;
    };
    interface HTMLBdsCheckboxElement extends Components.BdsCheckbox, HTMLStencilElement {
    }
    var HTMLBdsCheckboxElement: {
        prototype: HTMLBdsCheckboxElement;
        new (): HTMLBdsCheckboxElement;
    };
    interface HTMLBdsChipElement extends Components.BdsChip, HTMLStencilElement {
    }
    var HTMLBdsChipElement: {
        prototype: HTMLBdsChipElement;
        new (): HTMLBdsChipElement;
    };
    interface HTMLBdsChipClickableElement extends Components.BdsChipClickable, HTMLStencilElement {
    }
    var HTMLBdsChipClickableElement: {
        prototype: HTMLBdsChipClickableElement;
        new (): HTMLBdsChipClickableElement;
    };
    interface HTMLBdsChipSelectedElement extends Components.BdsChipSelected, HTMLStencilElement {
    }
    var HTMLBdsChipSelectedElement: {
        prototype: HTMLBdsChipSelectedElement;
        new (): HTMLBdsChipSelectedElement;
    };
    interface HTMLBdsChipTagElement extends Components.BdsChipTag, HTMLStencilElement {
    }
    var HTMLBdsChipTagElement: {
        prototype: HTMLBdsChipTagElement;
        new (): HTMLBdsChipTagElement;
    };
    interface HTMLBdsCounterTextElement extends Components.BdsCounterText, HTMLStencilElement {
    }
    var HTMLBdsCounterTextElement: {
        prototype: HTMLBdsCounterTextElement;
        new (): HTMLBdsCounterTextElement;
    };
    interface HTMLBdsDataTableElement extends Components.BdsDataTable, HTMLStencilElement {
    }
    var HTMLBdsDataTableElement: {
        prototype: HTMLBdsDataTableElement;
        new (): HTMLBdsDataTableElement;
    };
    interface HTMLBdsDatepickerElement extends Components.BdsDatepicker, HTMLStencilElement {
    }
    var HTMLBdsDatepickerElement: {
        prototype: HTMLBdsDatepickerElement;
        new (): HTMLBdsDatepickerElement;
    };
    interface HTMLBdsDatepickerPeriodElement extends Components.BdsDatepickerPeriod, HTMLStencilElement {
    }
    var HTMLBdsDatepickerPeriodElement: {
        prototype: HTMLBdsDatepickerPeriodElement;
        new (): HTMLBdsDatepickerPeriodElement;
    };
    interface HTMLBdsDatepickerSingleElement extends Components.BdsDatepickerSingle, HTMLStencilElement {
    }
    var HTMLBdsDatepickerSingleElement: {
        prototype: HTMLBdsDatepickerSingleElement;
        new (): HTMLBdsDatepickerSingleElement;
    };
    interface HTMLBdsDropdownElement extends Components.BdsDropdown, HTMLStencilElement {
    }
    var HTMLBdsDropdownElement: {
        prototype: HTMLBdsDropdownElement;
        new (): HTMLBdsDropdownElement;
    };
    interface HTMLBdsExpansionPanelElement extends Components.BdsExpansionPanel, HTMLStencilElement {
    }
    var HTMLBdsExpansionPanelElement: {
        prototype: HTMLBdsExpansionPanelElement;
        new (): HTMLBdsExpansionPanelElement;
    };
    interface HTMLBdsExpansionPanelBodyElement extends Components.BdsExpansionPanelBody, HTMLStencilElement {
    }
    var HTMLBdsExpansionPanelBodyElement: {
        prototype: HTMLBdsExpansionPanelBodyElement;
        new (): HTMLBdsExpansionPanelBodyElement;
    };
    interface HTMLBdsExpansionPanelHeaderElement extends Components.BdsExpansionPanelHeader, HTMLStencilElement {
    }
    var HTMLBdsExpansionPanelHeaderElement: {
        prototype: HTMLBdsExpansionPanelHeaderElement;
        new (): HTMLBdsExpansionPanelHeaderElement;
    };
    interface HTMLBdsGridElement extends Components.BdsGrid, HTMLStencilElement {
    }
    var HTMLBdsGridElement: {
        prototype: HTMLBdsGridElement;
        new (): HTMLBdsGridElement;
    };
    interface HTMLBdsIconElement extends Components.BdsIcon, HTMLStencilElement {
    }
    var HTMLBdsIconElement: {
        prototype: HTMLBdsIconElement;
        new (): HTMLBdsIconElement;
    };
    interface HTMLBdsIllustrationElement extends Components.BdsIllustration, HTMLStencilElement {
    }
    var HTMLBdsIllustrationElement: {
        prototype: HTMLBdsIllustrationElement;
        new (): HTMLBdsIllustrationElement;
    };
    interface HTMLBdsInputElement extends Components.BdsInput, HTMLStencilElement {
    }
    var HTMLBdsInputElement: {
        prototype: HTMLBdsInputElement;
        new (): HTMLBdsInputElement;
    };
    interface HTMLBdsInputChipsElement extends Components.BdsInputChips, HTMLStencilElement {
    }
    var HTMLBdsInputChipsElement: {
        prototype: HTMLBdsInputChipsElement;
        new (): HTMLBdsInputChipsElement;
    };
    interface HTMLBdsInputEditableElement extends Components.BdsInputEditable, HTMLStencilElement {
    }
    var HTMLBdsInputEditableElement: {
        prototype: HTMLBdsInputEditableElement;
        new (): HTMLBdsInputEditableElement;
    };
    interface HTMLBdsInputPasswordElement extends Components.BdsInputPassword, HTMLStencilElement {
    }
    var HTMLBdsInputPasswordElement: {
        prototype: HTMLBdsInputPasswordElement;
        new (): HTMLBdsInputPasswordElement;
    };
    interface HTMLBdsInputPhoneNumberElement extends Components.BdsInputPhoneNumber, HTMLStencilElement {
    }
    var HTMLBdsInputPhoneNumberElement: {
        prototype: HTMLBdsInputPhoneNumberElement;
        new (): HTMLBdsInputPhoneNumberElement;
    };
    interface HTMLBdsListElement extends Components.BdsList, HTMLStencilElement {
    }
    var HTMLBdsListElement: {
        prototype: HTMLBdsListElement;
        new (): HTMLBdsListElement;
    };
    interface HTMLBdsListItemElement extends Components.BdsListItem, HTMLStencilElement {
    }
    var HTMLBdsListItemElement: {
        prototype: HTMLBdsListItemElement;
        new (): HTMLBdsListItemElement;
    };
    interface HTMLBdsLoadingBarElement extends Components.BdsLoadingBar, HTMLStencilElement {
    }
    var HTMLBdsLoadingBarElement: {
        prototype: HTMLBdsLoadingBarElement;
        new (): HTMLBdsLoadingBarElement;
    };
    interface HTMLBdsLoadingPageElement extends Components.BdsLoadingPage, HTMLStencilElement {
    }
    var HTMLBdsLoadingPageElement: {
        prototype: HTMLBdsLoadingPageElement;
        new (): HTMLBdsLoadingPageElement;
    };
    interface HTMLBdsLoadingSpinnerElement extends Components.BdsLoadingSpinner, HTMLStencilElement {
    }
    var HTMLBdsLoadingSpinnerElement: {
        prototype: HTMLBdsLoadingSpinnerElement;
        new (): HTMLBdsLoadingSpinnerElement;
    };
    interface HTMLBdsMenuElement extends Components.BdsMenu, HTMLStencilElement {
    }
    var HTMLBdsMenuElement: {
        prototype: HTMLBdsMenuElement;
        new (): HTMLBdsMenuElement;
    };
    interface HTMLBdsMenuActionElement extends Components.BdsMenuAction, HTMLStencilElement {
    }
    var HTMLBdsMenuActionElement: {
        prototype: HTMLBdsMenuActionElement;
        new (): HTMLBdsMenuActionElement;
    };
    interface HTMLBdsMenuExibitionElement extends Components.BdsMenuExibition, HTMLStencilElement {
    }
    var HTMLBdsMenuExibitionElement: {
        prototype: HTMLBdsMenuExibitionElement;
        new (): HTMLBdsMenuExibitionElement;
    };
    interface HTMLBdsMenuListElement extends Components.BdsMenuList, HTMLStencilElement {
    }
    var HTMLBdsMenuListElement: {
        prototype: HTMLBdsMenuListElement;
        new (): HTMLBdsMenuListElement;
    };
    interface HTMLBdsMenuListItemElement extends Components.BdsMenuListItem, HTMLStencilElement {
    }
    var HTMLBdsMenuListItemElement: {
        prototype: HTMLBdsMenuListItemElement;
        new (): HTMLBdsMenuListItemElement;
    };
    interface HTMLBdsMenuSeparationElement extends Components.BdsMenuSeparation, HTMLStencilElement {
    }
    var HTMLBdsMenuSeparationElement: {
        prototype: HTMLBdsMenuSeparationElement;
        new (): HTMLBdsMenuSeparationElement;
    };
    interface HTMLBdsModalElement extends Components.BdsModal, HTMLStencilElement {
    }
    var HTMLBdsModalElement: {
        prototype: HTMLBdsModalElement;
        new (): HTMLBdsModalElement;
    };
    interface HTMLBdsModalActionElement extends Components.BdsModalAction, HTMLStencilElement {
    }
    var HTMLBdsModalActionElement: {
        prototype: HTMLBdsModalActionElement;
        new (): HTMLBdsModalActionElement;
    };
    interface HTMLBdsModalCloseButtonElement extends Components.BdsModalCloseButton, HTMLStencilElement {
    }
    var HTMLBdsModalCloseButtonElement: {
        prototype: HTMLBdsModalCloseButtonElement;
        new (): HTMLBdsModalCloseButtonElement;
    };
    interface HTMLBdsNavbarElement extends Components.BdsNavbar, HTMLStencilElement {
    }
    var HTMLBdsNavbarElement: {
        prototype: HTMLBdsNavbarElement;
        new (): HTMLBdsNavbarElement;
    };
    interface HTMLBdsNavbarContentElement extends Components.BdsNavbarContent, HTMLStencilElement {
    }
    var HTMLBdsNavbarContentElement: {
        prototype: HTMLBdsNavbarContentElement;
        new (): HTMLBdsNavbarContentElement;
    };
    interface HTMLBdsPaginationElement extends Components.BdsPagination, HTMLStencilElement {
    }
    var HTMLBdsPaginationElement: {
        prototype: HTMLBdsPaginationElement;
        new (): HTMLBdsPaginationElement;
    };
    interface HTMLBdsPaperElement extends Components.BdsPaper, HTMLStencilElement {
    }
    var HTMLBdsPaperElement: {
        prototype: HTMLBdsPaperElement;
        new (): HTMLBdsPaperElement;
    };
    interface HTMLBdsProgressBarElement extends Components.BdsProgressBar, HTMLStencilElement {
    }
    var HTMLBdsProgressBarElement: {
        prototype: HTMLBdsProgressBarElement;
        new (): HTMLBdsProgressBarElement;
    };
    interface HTMLBdsRadioElement extends Components.BdsRadio, HTMLStencilElement {
    }
    var HTMLBdsRadioElement: {
        prototype: HTMLBdsRadioElement;
        new (): HTMLBdsRadioElement;
    };
    interface HTMLBdsRadioGroupElement extends Components.BdsRadioGroup, HTMLStencilElement {
    }
    var HTMLBdsRadioGroupElement: {
        prototype: HTMLBdsRadioGroupElement;
        new (): HTMLBdsRadioGroupElement;
    };
    interface HTMLBdsSelectElement extends Components.BdsSelect, HTMLStencilElement {
    }
    var HTMLBdsSelectElement: {
        prototype: HTMLBdsSelectElement;
        new (): HTMLBdsSelectElement;
    };
    interface HTMLBdsSelectChipsElement extends Components.BdsSelectChips, HTMLStencilElement {
    }
    var HTMLBdsSelectChipsElement: {
        prototype: HTMLBdsSelectChipsElement;
        new (): HTMLBdsSelectChipsElement;
    };
    interface HTMLBdsSelectOptionElement extends Components.BdsSelectOption, HTMLStencilElement {
    }
    var HTMLBdsSelectOptionElement: {
        prototype: HTMLBdsSelectOptionElement;
        new (): HTMLBdsSelectOptionElement;
    };
    interface HTMLBdsSidebarElement extends Components.BdsSidebar, HTMLStencilElement {
    }
    var HTMLBdsSidebarElement: {
        prototype: HTMLBdsSidebarElement;
        new (): HTMLBdsSidebarElement;
    };
    interface HTMLBdsStepElement extends Components.BdsStep, HTMLStencilElement {
    }
    var HTMLBdsStepElement: {
        prototype: HTMLBdsStepElement;
        new (): HTMLBdsStepElement;
    };
    interface HTMLBdsStepperElement extends Components.BdsStepper, HTMLStencilElement {
    }
    var HTMLBdsStepperElement: {
        prototype: HTMLBdsStepperElement;
        new (): HTMLBdsStepperElement;
    };
    interface HTMLBdsSwitchElement extends Components.BdsSwitch, HTMLStencilElement {
    }
    var HTMLBdsSwitchElement: {
        prototype: HTMLBdsSwitchElement;
        new (): HTMLBdsSwitchElement;
    };
    interface HTMLBdsTabElement extends Components.BdsTab, HTMLStencilElement {
    }
    var HTMLBdsTabElement: {
        prototype: HTMLBdsTabElement;
        new (): HTMLBdsTabElement;
    };
    interface HTMLBdsTabGroupElement extends Components.BdsTabGroup, HTMLStencilElement {
    }
    var HTMLBdsTabGroupElement: {
        prototype: HTMLBdsTabGroupElement;
        new (): HTMLBdsTabGroupElement;
    };
    interface HTMLBdsTabItemElement extends Components.BdsTabItem, HTMLStencilElement {
    }
    var HTMLBdsTabItemElement: {
        prototype: HTMLBdsTabItemElement;
        new (): HTMLBdsTabItemElement;
    };
    interface HTMLBdsTabPanelElement extends Components.BdsTabPanel, HTMLStencilElement {
    }
    var HTMLBdsTabPanelElement: {
        prototype: HTMLBdsTabPanelElement;
        new (): HTMLBdsTabPanelElement;
    };
    interface HTMLBdsTableElement extends Components.BdsTable, HTMLStencilElement {
    }
    var HTMLBdsTableElement: {
        prototype: HTMLBdsTableElement;
        new (): HTMLBdsTableElement;
    };
    interface HTMLBdsTableBodyElement extends Components.BdsTableBody, HTMLStencilElement {
    }
    var HTMLBdsTableBodyElement: {
        prototype: HTMLBdsTableBodyElement;
        new (): HTMLBdsTableBodyElement;
    };
    interface HTMLBdsTableCellElement extends Components.BdsTableCell, HTMLStencilElement {
    }
    var HTMLBdsTableCellElement: {
        prototype: HTMLBdsTableCellElement;
        new (): HTMLBdsTableCellElement;
    };
    interface HTMLBdsTableHeaderElement extends Components.BdsTableHeader, HTMLStencilElement {
    }
    var HTMLBdsTableHeaderElement: {
        prototype: HTMLBdsTableHeaderElement;
        new (): HTMLBdsTableHeaderElement;
    };
    interface HTMLBdsTableRowElement extends Components.BdsTableRow, HTMLStencilElement {
    }
    var HTMLBdsTableRowElement: {
        prototype: HTMLBdsTableRowElement;
        new (): HTMLBdsTableRowElement;
    };
    interface HTMLBdsTableThElement extends Components.BdsTableTh, HTMLStencilElement {
    }
    var HTMLBdsTableThElement: {
        prototype: HTMLBdsTableThElement;
        new (): HTMLBdsTableThElement;
    };
    interface HTMLBdsTabsElement extends Components.BdsTabs, HTMLStencilElement {
    }
    var HTMLBdsTabsElement: {
        prototype: HTMLBdsTabsElement;
        new (): HTMLBdsTabsElement;
    };
    interface HTMLBdsTestComponentElement extends Components.BdsTestComponent, HTMLStencilElement {
    }
    var HTMLBdsTestComponentElement: {
        prototype: HTMLBdsTestComponentElement;
        new (): HTMLBdsTestComponentElement;
    };
    interface HTMLBdsThemeProviderElement extends Components.BdsThemeProvider, HTMLStencilElement {
    }
    var HTMLBdsThemeProviderElement: {
        prototype: HTMLBdsThemeProviderElement;
        new (): HTMLBdsThemeProviderElement;
    };
    interface HTMLBdsToastElement extends Components.BdsToast, HTMLStencilElement {
    }
    var HTMLBdsToastElement: {
        prototype: HTMLBdsToastElement;
        new (): HTMLBdsToastElement;
    };
    interface HTMLBdsToastContainerElement extends Components.BdsToastContainer, HTMLStencilElement {
    }
    var HTMLBdsToastContainerElement: {
        prototype: HTMLBdsToastContainerElement;
        new (): HTMLBdsToastContainerElement;
    };
    interface HTMLBdsTooltipElement extends Components.BdsTooltip, HTMLStencilElement {
    }
    var HTMLBdsTooltipElement: {
        prototype: HTMLBdsTooltipElement;
        new (): HTMLBdsTooltipElement;
    };
    interface HTMLBdsTypoElement extends Components.BdsTypo, HTMLStencilElement {
    }
    var HTMLBdsTypoElement: {
        prototype: HTMLBdsTypoElement;
        new (): HTMLBdsTypoElement;
    };
    interface HTMLBdsUploadElement extends Components.BdsUpload, HTMLStencilElement {
    }
    var HTMLBdsUploadElement: {
        prototype: HTMLBdsUploadElement;
        new (): HTMLBdsUploadElement;
    };
    interface HTMLBdsWarningElement extends Components.BdsWarning, HTMLStencilElement {
    }
    var HTMLBdsWarningElement: {
        prototype: HTMLBdsWarningElement;
        new (): HTMLBdsWarningElement;
    };
    interface HTMLElementTagNameMap {
        "bds-accordion": HTMLBdsAccordionElement;
        "bds-accordion-body": HTMLBdsAccordionBodyElement;
        "bds-accordion-group": HTMLBdsAccordionGroupElement;
        "bds-accordion-header": HTMLBdsAccordionHeaderElement;
        "bds-alert": HTMLBdsAlertElement;
        "bds-alert-actions": HTMLBdsAlertActionsElement;
        "bds-alert-body": HTMLBdsAlertBodyElement;
        "bds-alert-header": HTMLBdsAlertHeaderElement;
        "bds-autocomplete": HTMLBdsAutocompleteElement;
        "bds-avatar": HTMLBdsAvatarElement;
        "bds-avatar-group": HTMLBdsAvatarGroupElement;
        "bds-badge": HTMLBdsBadgeElement;
        "bds-banner": HTMLBdsBannerElement;
        "bds-banner-link": HTMLBdsBannerLinkElement;
        "bds-button": HTMLBdsButtonElement;
        "bds-button-icon": HTMLBdsButtonIconElement;
        "bds-card": HTMLBdsCardElement;
        "bds-card-body": HTMLBdsCardBodyElement;
        "bds-card-color": HTMLBdsCardColorElement;
        "bds-card-footer": HTMLBdsCardFooterElement;
        "bds-card-header": HTMLBdsCardHeaderElement;
        "bds-card-subtitle": HTMLBdsCardSubtitleElement;
        "bds-card-title": HTMLBdsCardTitleElement;
        "bds-checkbox": HTMLBdsCheckboxElement;
        "bds-chip": HTMLBdsChipElement;
        "bds-chip-clickable": HTMLBdsChipClickableElement;
        "bds-chip-selected": HTMLBdsChipSelectedElement;
        "bds-chip-tag": HTMLBdsChipTagElement;
        "bds-counter-text": HTMLBdsCounterTextElement;
        "bds-data-table": HTMLBdsDataTableElement;
        "bds-datepicker": HTMLBdsDatepickerElement;
        "bds-datepicker-period": HTMLBdsDatepickerPeriodElement;
        "bds-datepicker-single": HTMLBdsDatepickerSingleElement;
        "bds-dropdown": HTMLBdsDropdownElement;
        "bds-expansion-panel": HTMLBdsExpansionPanelElement;
        "bds-expansion-panel-body": HTMLBdsExpansionPanelBodyElement;
        "bds-expansion-panel-header": HTMLBdsExpansionPanelHeaderElement;
        "bds-grid": HTMLBdsGridElement;
        "bds-icon": HTMLBdsIconElement;
        "bds-illustration": HTMLBdsIllustrationElement;
        "bds-input": HTMLBdsInputElement;
        "bds-input-chips": HTMLBdsInputChipsElement;
        "bds-input-editable": HTMLBdsInputEditableElement;
        "bds-input-password": HTMLBdsInputPasswordElement;
        "bds-input-phone-number": HTMLBdsInputPhoneNumberElement;
        "bds-list": HTMLBdsListElement;
        "bds-list-item": HTMLBdsListItemElement;
        "bds-loading-bar": HTMLBdsLoadingBarElement;
        "bds-loading-page": HTMLBdsLoadingPageElement;
        "bds-loading-spinner": HTMLBdsLoadingSpinnerElement;
        "bds-menu": HTMLBdsMenuElement;
        "bds-menu-action": HTMLBdsMenuActionElement;
        "bds-menu-exibition": HTMLBdsMenuExibitionElement;
        "bds-menu-list": HTMLBdsMenuListElement;
        "bds-menu-list-item": HTMLBdsMenuListItemElement;
        "bds-menu-separation": HTMLBdsMenuSeparationElement;
        "bds-modal": HTMLBdsModalElement;
        "bds-modal-action": HTMLBdsModalActionElement;
        "bds-modal-close-button": HTMLBdsModalCloseButtonElement;
        "bds-navbar": HTMLBdsNavbarElement;
        "bds-navbar-content": HTMLBdsNavbarContentElement;
        "bds-pagination": HTMLBdsPaginationElement;
        "bds-paper": HTMLBdsPaperElement;
        "bds-progress-bar": HTMLBdsProgressBarElement;
        "bds-radio": HTMLBdsRadioElement;
        "bds-radio-group": HTMLBdsRadioGroupElement;
        "bds-select": HTMLBdsSelectElement;
        "bds-select-chips": HTMLBdsSelectChipsElement;
        "bds-select-option": HTMLBdsSelectOptionElement;
        "bds-sidebar": HTMLBdsSidebarElement;
        "bds-step": HTMLBdsStepElement;
        "bds-stepper": HTMLBdsStepperElement;
        "bds-switch": HTMLBdsSwitchElement;
        "bds-tab": HTMLBdsTabElement;
        "bds-tab-group": HTMLBdsTabGroupElement;
        "bds-tab-item": HTMLBdsTabItemElement;
        "bds-tab-panel": HTMLBdsTabPanelElement;
        "bds-table": HTMLBdsTableElement;
        "bds-table-body": HTMLBdsTableBodyElement;
        "bds-table-cell": HTMLBdsTableCellElement;
        "bds-table-header": HTMLBdsTableHeaderElement;
        "bds-table-row": HTMLBdsTableRowElement;
        "bds-table-th": HTMLBdsTableThElement;
        "bds-tabs": HTMLBdsTabsElement;
        "bds-test-component": HTMLBdsTestComponentElement;
        "bds-theme-provider": HTMLBdsThemeProviderElement;
        "bds-toast": HTMLBdsToastElement;
        "bds-toast-container": HTMLBdsToastContainerElement;
        "bds-tooltip": HTMLBdsTooltipElement;
        "bds-typo": HTMLBdsTypoElement;
        "bds-upload": HTMLBdsUploadElement;
        "bds-warning": HTMLBdsWarningElement;
    }
}
declare namespace LocalJSX {
    interface BdsAccordion {
        /**
          * bdsAccordionOpen. Event to return value when accordion is closed.
         */
        "onBdsAccordionClose"?: (event: BdsAccordionCustomEvent<any>) => void;
        /**
          * bdsAccordionOpen. Event to return value when accordion is open.
         */
        "onBdsAccordionOpen"?: (event: BdsAccordionCustomEvent<any>) => void;
        /**
          * bdsToggle. Event to return value of toggle.
         */
        "onBdsToggle"?: (event: BdsAccordionCustomEvent<any>) => void;
        /**
          * A prop for make the accordion open when is render.
         */
        "startOpen"?: boolean;
    }
    interface BdsAccordionBody {
    }
    interface BdsAccordionGroup {
        /**
          * Focus Selected. Used to add title in header accordion.
         */
        "collapse"?: collapses;
        /**
          * bdsAccordionCloseAll. Event to return value when accordion is closed.
         */
        "onBdsAccordionCloseAll"?: (event: BdsAccordionGroupCustomEvent<any>) => void;
        /**
          * bdsAccordionOpenAll. Event to return value when accordion is opend.
         */
        "onBdsAccordionOpenAll"?: (event: BdsAccordionGroupCustomEvent<any>) => void;
    }
    interface BdsAccordionHeader {
        /**
          * Accordion Title. Used to add title in header accordion.
         */
        "accordionTitle"?: string;
        /**
          * Avatar Name. Used to add avatar in header accordion.
         */
        "avatarName"?: string;
        /**
          * Avatar Thumb. Used to add avatar in header accordion.
         */
        "avatarThumb"?: string;
        /**
          * Icon. Used to add icon in header accordion.
         */
        "icon"?: string;
    }
    interface BdsAlert {
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * Used to open/close the alert
         */
        "open"?: boolean;
        /**
          * Define whether the component will occupy the entire screen or just the parent.
         */
        "position"?: string;
    }
    interface BdsAlertActions {
    }
    interface BdsAlertBody {
    }
    interface BdsAlertHeader {
        /**
          * used for add icon the header. Uses the bds-icon component.
         */
        "icon"?: string;
        /**
          * Variant. Entered as one of the variant. Can be one of: 'system', 'error', 'warning', 'delete';
         */
        "variant"?: AlertHeaderVariannt;
    }
    interface BdsAutocomplete {
        /**
          * If true, the X icon will appear only when component is focused.
         */
        "clearIconOnFocus"?: boolean;
        /**
          * Add state danger on input, use for use feedback.
         */
        "danger"?: boolean;
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * Disabled input.
         */
        "disabled"?: boolean;
        /**
          * used for add icon in input left. Uses the bds-icon component.
         */
        "icon"?: string;
        /**
          * label in input, with he the input size increases.
         */
        "label"?: string;
        /**
          * Is Loading, is the prop to enable that the component is loading.
         */
        "loading"?: boolean;
        /**
          * Emitted when the select loses focus.
         */
        "onBdsBlur"?: (event: BdsAutocompleteCustomEvent<void>) => void;
        /**
          * Emitted when the selection is cancelled.
         */
        "onBdsCancel"?: (event: BdsAutocompleteCustomEvent<void>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onBdsChange"?: (event: BdsAutocompleteCustomEvent<AutocompleteChangeEventDetail>) => void;
        /**
          * Emitted when the select loses focus.
         */
        "onBdsFocus"?: (event: BdsAutocompleteCustomEvent<void>) => void;
        /**
          * Emitted when the input has changed.
         */
        "onBdsInput"?: (event: BdsAutocompleteCustomEvent<KeyboardEvent>) => void;
        /**
          * Emitted when the selected value has changed.
         */
        "onBdsMultiselectedChange"?: (event: BdsAutocompleteCustomEvent<any>) => void;
        /**
          * Emitted when the selected value has changed.
         */
        "onBdsSelectedChange"?: (event: BdsAutocompleteCustomEvent<AutocompleteSelectedChangeEventDetail>) => void;
        /**
          * The options of the select Should be passed this way: options='[{"value": "Cat", "label": "Meow"}, {"value": "Dog", "label": "Woof"}]' Options can also be passed as child by using bds-select-option component, but passing as a child you may have some compatibility problems with Angular.
         */
        "options"?: string | AutocompleteOption[];
        /**
          * Set the placement of the options menu. Can be 'bottom' or 'top'.
         */
        "optionsPosition"?: AutocompleteOptionsPositionType;
        /**
          * Placeholder for native input element.
         */
        "placeholder"?: string;
        /**
          * Search only the title property
         */
        "searchOnlyTitle"?: boolean;
        /**
          * the item selected.
         */
        "selected"?: HTMLBdsSelectOptionElement | null;
        /**
          * Selection Title, Prop to enable title to select.
         */
        "selectionTitle"?: string;
        /**
          * Multiselect, Prop to enable multi selections.
         */
        "selectionType"?: SelectionType;
        /**
          * the value of the select.
         */
        "value"?: string | null;
    }
    interface BdsAvatar {
        /**
          * Color, Entered as one of the color. Can be one of: 'system', 'success', 'warning', 'error', 'info'.
         */
        "color"?: colors;
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * Ellipses, serves to indicate the user number in the listing.
         */
        "ellipsis"?: number;
        /**
          * Name, Inserted for highlighted osuary name. Enter the full name.
         */
        "name"?: string;
        "onBdsClickAvatar"?: (event: BdsAvatarCustomEvent<any>) => void;
        /**
          * Size, Entered as one of the size. Can be one of: 'extra-small', 'small', 'standard', 'large', 'extra-large'.
         */
        "size"?: avatarSize;
        /**
          * Thumbnail, Inserted to highlight user image. Url field.
         */
        "thumbnail"?: string;
        /**
          * Upload, Serve to enable upload function on avatar.
         */
        "upload"?: boolean;
    }
    interface BdsAvatarGroup {
        "canClick"?: boolean;
        "onBdsClickAvatarGroup"?: (event: BdsAvatarGroupCustomEvent<any>) => void;
        /**
          * Size. Entered as one of the size. Can be one of: 'extra-small', 'small', 'standard', 'large', 'extra-large'.
         */
        "size"?: avatarSize;
        /**
          * The users of the select Should be passed this way: users='[   {"id": "1", "name": "Michael Scott", "thumbnail": "https://gcdn.pbrd.co/images/9Kt8iMvR10Lf.jpg?o=1"},   {"id": "2", "name": "Dwight Schrute", "thumbnail": "https://gcdn.pbrd.co/images/XAlbTPDwjZ2d.jpg?o=1"},   {"id": "3", "name": "Jim Halpert", "thumbnail": "https://gcdn.pbrd.co/images/tK0Ygb0KAHUm.jpg?o=1"},   {"id": "4", "name": "Pam Beesly", "thumbnail": "https://gcdn.pbrd.co/images/8NZSnCGfB9BD.jpg?o=1"},   {"id": "5", "name": "Ryan Howard", "thumbnail": "https://gcdn.pbrd.co/images/6wwIWI1EzzVq.jpg?o=1"},   {"id": "6", "name": "Andy Bernard", "thumbnail": "https://gcdn.pbrd.co/images/5dPYFWixftY4.jpg?o=1"} ]' users can also be passed as child by using bds-avatar-group component, but passing as a child you may have some compatibility problems with Angular.
         */
        "users"?: string | AvatarDataList[];
    }
    interface BdsBadge {
        /**
          * If true, actived the pulse animation.
         */
        "animation"?: boolean;
        /**
          * Set the color of the component.
         */
        "color"?: string;
        /**
          * Set witch icon will be render inside the component.
         */
        "icon"?: string;
        /**
          * Set the text in shape circle. Is just alow numbers, but if the number pass 999 a symbol '+' will be render.
         */
        "number"?: number;
        /**
          * Set the shape of the component.
         */
        "shape"?: Shape;
    }
    interface BdsBanner {
        /**
          * Set the banner aligment, it can be one of: 'center', 'right' or 'left'.
         */
        "bannerAlign"?: BannerAlign;
        /**
          * Set if show up the close button.
         */
        "buttonClose"?: ButtonClose;
        /**
          * Set if the banner is external or internal.
         */
        "context"?: Context;
        /**
          * Data test is the prop to specifically test the component action object. dtButtonClose is the data-test to button close.
         */
        "dtButtonClose"?: string;
        /**
          * Emitted when the banner is closed.
         */
        "onBdsBannerClose"?: (event: BdsBannerCustomEvent<any>) => void;
        /**
          * Set the banner varient, it can be 'system' or 'warning'.
         */
        "variant"?: BannerVariant;
    }
    interface BdsBannerLink {
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * Set the link pass.
         */
        "link"?: string;
        /**
          * Emitted when the link is clicked.
         */
        "onBdsBannerLink"?: (event: BdsBannerLinkCustomEvent<any>) => void;
    }
    interface BdsButton {
        /**
          * The arrow button
         */
        "arrow"?: boolean;
        /**
          * If true, shows the loading spinner
         */
        "bdsLoading"?: boolean;
        /**
          * If not empty, Sets the color of the spinner, can be 'primary','secondary' or 'ghost'
         */
        "bdsLoadingColor"?: colorsVariants;
        /**
          * If not empty, Sets the color of the spinner, can be 'primary','secondary' or 'ghost'
         */
        "bdsLoadingVariant"?: LoadingSpinnerVariant;
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * If true, the base button will be disabled.
         */
        "disabled"?: boolean;
        /**
          * used for add icon in input left. Uses the bds-icon component.
         */
        "icon"?: string;
        /**
          * Event buttom onClick.
         */
        "onBdsClick"?: (event: BdsButtonCustomEvent<any>) => void;
        /**
          * Size. Entered as one of the size. Can be one of: 'tall', 'standard', 'short';
         */
        "size"?: ButtonSize;
        /**
          * The type of the button. Can be one of: 'button', 'submit', 'reset';
         */
        "type"?: ButtonType;
        /**
          * The type of the icon. Can be one of: 'icon', 'logo', 'emoji';
         */
        "typeIcon"?: IconType;
        /**
          * Variant. Entered as one of the variant. Can be one of: 'primary', 'secondary', 'ghost', 'dashed';
         */
        "variant"?: ButtonVariant;
    }
    interface BdsButtonIcon {
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * If true, the base button will be disabled.
         */
        "disabled"?: boolean;
        /**
          * used for add icon in input left. Uses the bds-icon component.
         */
        "icon"?: string;
        /**
          * Size. Entered as one of the size. Can be one of: 'tall', 'standard', 'short';
         */
        "size"?: IconButtonSize;
        /**
          * Variant. Entered as one of the variant. Can be one of: 'primary', 'secondary', 'ghost', 'dashed';
         */
        "variant"?: IconButtonVariant;
    }
    interface BdsCard {
        /**
          * If the prop is true, the component will be clickable.
         */
        "clickable"?: boolean;
        /**
          * Prop for set the height of the component.
         */
        "height"?: string;
        /**
          * This event will be dispatch when click on the component.
         */
        "onBdsClick"?: (event: BdsCardCustomEvent<any>) => void;
        /**
          * Prop for set the width of the component.
         */
        "width"?: string;
    }
    interface BdsCardBody {
    }
    interface BdsCardColor {
        /**
          * Specifies if the hex is a linear gradient
         */
        "gradient"?: boolean;
        /**
          * Specifies HEX color, use Figma docs in Blip DS.
         */
        "hex"?: string;
        /**
          * If true, the text will be white
         */
        "lightText"?: boolean;
        /**
          * Specifies name color, use Figma docs in Blip DS.
         */
        "name": string;
        /**
          * Specifies variabel sass color, _variables.scss.
         */
        "variable": string;
    }
    interface BdsCardFooter {
        /**
          * Prop for internal elements alignment. Will follow the same values of css.
         */
        "align"?: justifyContent;
    }
    interface BdsCardHeader {
        /**
          * Prop for internal elements alignment. Will follow the same values of css.
         */
        "align"?: justifyContent;
    }
    interface BdsCardSubtitle {
        /**
          * Set the card subtitle.
         */
        "text"?: string;
    }
    interface BdsCardTitle {
        /**
          * Set the card title.
         */
        "text"?: string;
    }
    interface BdsCheckbox {
        /**
          * If `true`, the checkbox is selected.
         */
        "checked"?: boolean;
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * If `true`, the user cannot interact with the checkbox.
         */
        "disabled"?: boolean;
        "label": string;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * Emitted when the value has changed.
         */
        "onBdsChange"?: (event: BdsCheckboxCustomEvent<any>) => void;
        /**
          * Emitted when the input has changed.
         */
        "onBdsInput"?: (event: BdsCheckboxCustomEvent<KeyboardEvent>) => void;
        "refer": string;
    }
    interface BdsChip {
        /**
          * When 'true' and the component is using the primary variant, a hover is added
         */
        "clickable"?: boolean;
        /**
          * Add state danger on chip, use for use feedback.
         */
        "danger"?: boolean;
        /**
          * When 'true', the component recive remove button and dispach event onBdsDelete
         */
        "deletable"?: boolean;
        /**
          * When 'true', no events will be dispatched
         */
        "disabled"?: boolean;
        /**
          * Add state filter on chip whith specific color.
         */
        "filter"?: boolean;
        /**
          * used for add icon in left container. Uses the bds-icon component.
         */
        "icon"?: string;
        /**
          * Triggered after a mouse click on delete icon, return id element. Only fired when deletable is true.
         */
        "onBdsDelete"?: (event: BdsChipCustomEvent<any>) => void;
        /**
          * Chip size. Entered as one of the size design tokens. Can be one of: "standard" and "tall"
         */
        "size"?: ChipSize;
        /**
          * Variant. Entered as one of the variant. Can be one of: 'primary', 'default';
         */
        "variant"?: ChipVariant;
    }
    interface BdsChipClickable {
        /**
          * used for add avatar left container. Uses the bds-avatar component.
         */
        "avatar"?: string;
        /**
          * it makes the chip clickable.
         */
        "clickable"?: boolean;
        /**
          * used for delete the chip.
         */
        "close"?: boolean;
        /**
          * used for change the color. Uses one of them.
         */
        "color"?: Color;
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * the chip gone stay disabled while this prop be true.
         */
        "disabled"?: boolean;
        /**
          * Data test is the prop to specifically test the component action object. dtButtonClose is the data-test to button close.
         */
        "dtButtonClose"?: string;
        /**
          * used for add icon in left container. Uses the bds-icon component.
         */
        "icon"?: string;
        "onChipClickableClick"?: (event: BdsChipClickableCustomEvent<any>) => void;
        /**
          * Triggered after a mouse click on close icon, return id element. Only fired when close is true.
         */
        "onChipClickableClose"?: (event: BdsChipClickableCustomEvent<any>) => void;
        /**
          * used for change the size chip. Uses one of them.
         */
        "size"?: Size;
    }
    interface BdsChipSelected {
        /**
          * used for change the color. Uses one of them.
         */
        "color"?: Color;
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * When 'true', no events will be dispatched
         */
        "disabled"?: boolean;
        /**
          * used for add icon in left container. Uses the bds-icon component.
         */
        "icon"?: string;
        "onChipClick"?: (event: BdsChipSelectedCustomEvent<any>) => void;
        /**
          * used for set the initial setup for true;
         */
        "selected"?: boolean;
        /**
          * used for change the chip size. Use one of them;
         */
        "size"?: Size;
    }
    interface BdsChipTag {
        /**
          * used for change the color. Uses one of them.
         */
        "color"?: Color;
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * used for add icon in left container. Uses the bds-icon component.
         */
        "icon"?: string;
    }
    interface BdsCounterText {
        "active"?: boolean;
        "delete"?: CounterTextRule;
        "length": number;
        "max"?: number;
        "warning"?: CounterTextRule;
    }
    interface BdsDataTable {
        /**
          * Prop to activate the possibility of use chip in any column.
         */
        "actionArea"?: boolean;
        /**
          * Prop to activate the possibility of use avatar in any column.
         */
        "avatar"?: boolean;
        /**
          * Prop to activate the possibility of use chip in any column.
         */
        "chips"?: boolean;
        /**
          * Prop to recive the header and configuration of table.
         */
        "column"?: string;
        "onBdsTableChange"?: (event: BdsDataTableCustomEvent<any>) => void;
        "onBdsTableClick"?: (event: BdsDataTableCustomEvent<any>) => void;
        "onBdsTableDelete"?: (event: BdsDataTableCustomEvent<any>) => void;
        /**
          * Prop to recive the content of the table.
         */
        "options"?: string;
        /**
          * Prop to activate the sorting.
         */
        "sorting"?: boolean;
    }
    interface BdsDatepicker {
        /**
          * Disabled input.
         */
        "disabled"?: boolean;
        /**
          * Data test is the prop to specifically test the component action object. dtButtonClear is the data-test to button clear.
         */
        "dtButtonClear"?: string;
        /**
          * Data test is the prop to specifically test the component action object. dtButtonConfirm is the data-test to button confirm.
         */
        "dtButtonConfirm"?: string;
        /**
          * Data test is the prop to specifically test the component action object. dtButtonNext is the data-test to button next.
         */
        "dtButtonNext"?: string;
        /**
          * Data test is the prop to specifically test the component action object. dtButtonPrev is the data-test to button prev.
         */
        "dtButtonPrev"?: string;
        /**
          * Data test is the prop to specifically test the component action object. dtInputEnd is the data-test to input end.
         */
        "dtInputEnd"?: string;
        /**
          * Data test is the prop to specifically test the component action object. dtInputStart is the data-test to input start.
         */
        "dtInputStart"?: string;
        /**
          * Data test is the prop to specifically test the component action object. dtOutzone is the data-test to outzone.
         */
        "dtOutzone"?: string;
        /**
          * Data test is the prop to specifically test the component action object. dtSelectMonth is the data-test to select month.
         */
        "dtSelectMonth"?: string;
        /**
          * Data test is the prop to specifically test the component action object. dtSelectYear is the data-test to select year.
         */
        "dtSelectYear"?: string;
        /**
          * EndDateLimit. Insert a limiter to select the date period.
         */
        "endDateLimit"?: string;
        /**
          * Language, Entered as one of the languages. Can be one of: 'pt_BR', 'es_ES', 'en_US'.
         */
        "language"?: languages;
        /**
          * Message. Select type of date.
         */
        "message"?: string;
        /**
          * bdsStartDate. Event to return selected end date value.
         */
        "onBdsEndDate"?: (event: BdsDatepickerCustomEvent<any>) => void;
        /**
          * bdsStartDate. Event to return selected date value.
         */
        "onBdsStartDate"?: (event: BdsDatepickerCustomEvent<any>) => void;
        /**
          * bdsStartDate. Event to return selected end date value.
         */
        "onConcludeDatepicker"?: (event: BdsDatepickerCustomEvent<any>) => void;
        /**
          * StartDateLimit. Insert a limiter to select the date period.
         */
        "startDateLimit"?: string;
        /**
          * TypeOfDate. Select type of date.
         */
        "typeOfDate"?: typeDate;
        /**
          * Default value input.
         */
        "valueDateSelected"?: string;
        /**
          * Default value input.
         */
        "valueEndDateSelected"?: string;
    }
    interface BdsDatepickerPeriod {
        /**
          * Data test is the prop to specifically test the component action object. dtButtonNext is the data-test to button next.
         */
        "dtButtonNext"?: string;
        /**
          * Data test is the prop to specifically test the component action object. dtButtonPrev is the data-test to button prev.
         */
        "dtButtonPrev"?: string;
        /**
          * Data test is the prop to specifically test the component action object. dtSelectMonth is the data-test to select month.
         */
        "dtSelectMonth"?: string;
        /**
          * Data test is the prop to specifically test the component action object. dtSelectYear is the data-test to select year.
         */
        "dtSelectYear"?: string;
        /**
          * EndDate. Insert a limiter to select the date period.
         */
        "endDate"?: DaysList;
        /**
          * EndDateSelect. Insert a limiter to select the date period.
         */
        "endDateSelect"?: Date;
        /**
          * Language, Entered as one of the languages. Can be one of: 'pt_BR', 'es_ES', 'en_US'.
         */
        "language"?: languages;
        /**
          * bdsEndDate. Event to return selected end date value.
         */
        "onBdsEndDate"?: (event: BdsDatepickerPeriodCustomEvent<any>) => void;
        /**
          * bdsStartDate. Event to return selected date value.
         */
        "onBdsStartDate"?: (event: BdsDatepickerPeriodCustomEvent<any>) => void;
        /**
          * StartDate. Insert a limiter to select the date period.
         */
        "startDate"?: DaysList;
        /**
          * StartDateSelect. Insert a limiter to select the date period.
         */
        "startDateSelect"?: Date;
        /**
          * EndDateSelect. Insert a limiter to select the date period.
         */
        "stateSelect"?: stateSelect;
    }
    interface BdsDatepickerSingle {
        /**
          * dateSelect. Insert a limiter to select the date period.
         */
        "dateSelect"?: Date;
        /**
          * Data test is the prop to specifically test the component action object. dtButtonNext is the data-test to button next.
         */
        "dtButtonNext"?: string;
        /**
          * Data test is the prop to specifically test the component action object. dtButtonPrev is the data-test to button prev.
         */
        "dtButtonPrev"?: string;
        /**
          * Data test is the prop to specifically test the component action object. dtSelectMonth is the data-test to select month.
         */
        "dtSelectMonth"?: string;
        /**
          * Data test is the prop to specifically test the component action object. dtSelectYear is the data-test to select year.
         */
        "dtSelectYear"?: string;
        /**
          * EndDate. Insert a limiter to select the date period.
         */
        "endDate"?: DaysList;
        /**
          * Language, Entered as one of the languages. Can be one of: 'pt_BR', 'es_ES', 'en_US'.
         */
        "language"?: languages;
        /**
          * bdsDateSelected. Event to return selected date value.
         */
        "onBdsDateSelected"?: (event: BdsDatepickerSingleCustomEvent<any>) => void;
        /**
          * StartDate. Insert a limiter to select the date period.
         */
        "startDate"?: DaysList;
    }
    interface BdsDropdown {
        /**
          * Open. Used to open/close the dropdown.
         */
        "activeMode"?: activeMode;
        /**
          * bdsToggle. Event to return selected date value.
         */
        "onBdsToggle"?: (event: BdsDropdownCustomEvent<any>) => void;
        /**
          * Open. Used to open/close the dropdown.
         */
        "open"?: boolean;
        /**
          * Used to set drop position
         */
        "position"?: DropdownPostionType;
    }
    interface BdsExpansionPanel {
    }
    interface BdsExpansionPanelBody {
        "open"?: boolean;
        "text"?: string;
    }
    interface BdsExpansionPanelHeader {
        "text"?: string;
    }
    interface BdsGrid {
        "alignItems"?: alignItems;
        "container"?: boolean;
        "containerFluid"?: boolean;
        "direction"?: direction;
        "flexWrap"?: flexWrap;
        "gap"?: gap;
        "height"?: string;
        "justifyContent"?: justifyContent2;
        "lg"?: breakpoint;
        "lgOffset"?: breakpoint;
        "margin"?: margin;
        "md"?: breakpoint;
        "mdOffset"?: breakpoint;
        "padding"?: padding;
        "sm"?: breakpoint;
        "smOffset"?: breakpoint;
        "xg"?: breakpoint;
        "xgOffset"?: breakpoint;
        "xs"?: breakpoint;
        "xsOffset"?: breakpoint;
        "xxs"?: breakpoint;
        "xxsOffset"?: breakpoint;
    }
    interface BdsIcon {
        /**
          * Specifies the label to use for accessibility. Defaults to the icon name.
         */
        "ariaLabel"?: string;
        /**
          * Specifies the color to use.Specifies a color to use. The default is svg.
         */
        "color"?: string;
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * Specifies whether the icon should horizontally flip when `dir` is `"rtl"`.
         */
        "flipRtl"?: boolean;
        /**
          * A combination of both `name` and `src`. If a `src` url is detected it will set the `src` property. Otherwise it assumes it's a built-in named SVG and set the `name` property.
         */
        "icon"?: any;
        /**
          * If enabled, ion-icon will be loaded lazily when it's visible in the viewport. Default, `false`.
         */
        "lazy"?: boolean;
        /**
          * Specifies which icon to use from the built-in set of icons.
         */
        "name"?: string;
        /**
          * Icon size. Entered as one of the icon size design tokens. Can be one of: "xxx-small", "xx-small", "x-small", "small", "medium", "large", "x-large", "xx-large", "xxx-large", "brand".
         */
        "size"?: IconSize;
        /**
          * Specifies the exact `src` of an SVG file to use.
         */
        "src"?: string;
        /**
          * Specifies the theme to use outline or solid icons. Defaults to outline.
         */
        "theme"?: IconTheme;
        /**
          * Specifies the type of icon. If type is set to emoji, it will be able to set only emoji names on the name property.
         */
        "type"?: IconType1;
    }
    interface BdsIllustration {
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * Specifies the name of illustration. Verify the names on illustration tokens.
         */
        "name"?: string;
        /**
          * Specifies the type to use. Can be: 'default'.
         */
        "type"?: IllustrationType;
    }
    interface BdsInput {
        /**
          * Capitalizes every word's second character.
         */
        "autoCapitalize"?: InputAutocapitalize;
        /**
          * Hint for form autofill feature
         */
        "autoComplete"?: InputAutoComplete;
        /**
          * Internal prop to identify input chips
         */
        "chips"?: boolean;
        /**
          * The rows and cols attributes allow you to specify an exact size for the <textarea> to get. Setting this is a good idea for consistency, as the browser defaults may differ.
         */
        "cols"?: number;
        /**
          * Passing true to display a counter of available size, it is necessary to pass another maxlength property.
         */
        "counterLength"?: boolean;
        /**
          * Make it possible to pass the base values to the warning level and exclude, using the values between min and max.
         */
        "counterLengthRule"?: InputCounterLengthRules;
        /**
          * Add state danger on input, use for use feedback.
         */
        "danger"?: boolean;
        /**
          * Id to support Cypress.
         */
        "dataTest"?: string;
        /**
          * Disabled input.
         */
        "disabled"?: boolean;
        /**
          * Error message when the value isn't an email
         */
        "emailErrorMessage"?: string;
        /**
          * Indicated to pass an feeback to user.
         */
        "errorMessage"?: string;
        /**
          * Indicated to pass a help the user in complex filling.
         */
        "helperMessage"?: string;
        /**
          * used for add icon in input left. Uses the bds-icon component.
         */
        "icon"?: string;
        /**
          * Input Name
         */
        "inputName"?: string;
        /**
          * If `true`, the user cannot modify the value.
         */
        "isSubmit"?: boolean;
        /**
          * if `true` input switched to textarea
         */
        "isTextarea"?: boolean;
        /**
          * label in input, with he the input size increases.
         */
        "label"?: string;
        /**
          * The maximum value, which must not be less than its minimum (min attribute) value.
         */
        "max"?: string;
        /**
          * Error message when the value is higher than the max value
         */
        "maxErrorMessage"?: string;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.
         */
        "maxlength"?: number;
        /**
          * The minimum value, which must not be greater than its maximum (max attribute) value.
         */
        "min"?: string;
        /**
          * Error message when the value is lower than the min value
         */
        "minErrorMessage"?: string;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.
         */
        "minlength"?: number;
        /**
          * Error message when the value is lower than the minlength
         */
        "minlengthErrorMessage"?: string;
        /**
          * Error message when the value isn't an email
         */
        "numberErrorMessage"?: string;
        /**
          * Emitted when the value has changed.
         */
        "onBdsChange"?: (event: BdsInputCustomEvent<any>) => void;
        /**
          * Event input focus.
         */
        "onBdsFocus"?: (event: BdsInputCustomEvent<any>) => void;
        /**
          * Emitted when the input has changed.
         */
        "onBdsInput"?: (event: BdsInputCustomEvent<KeyboardEvent>) => void;
        /**
          * Event input key down backspace.
         */
        "onBdsKeyDownBackspace"?: (event: BdsInputCustomEvent<any>) => void;
        /**
          * Event input onblur.
         */
        "onBdsOnBlur"?: (event: BdsInputCustomEvent<any>) => void;
        /**
          * Event pattern validation.
         */
        "onBdsPatternValidation"?: (event: BdsInputCustomEvent<any>) => void;
        /**
          * Event input enter.
         */
        "onBdsSubmit"?: (event: BdsInputCustomEvent<any>) => void;
        /**
          * Indicated to pass a regex pattern to input
         */
        "pattern"?: string;
        /**
          * A tip for the user who can enter no controls.
         */
        "placeholder"?: string;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly"?: boolean;
        /**
          * If `true`, the input value will be required.
         */
        "required"?: boolean;
        /**
          * Error message when input is required
         */
        "requiredErrorMessage"?: string;
        /**
          * The rows and cols attributes allow you to specify an exact size for the <textarea> to get. Setting this is a good idea for consistency, as the browser defaults may differ.
         */
        "rows"?: number;
        /**
          * Add state success on input, use for use feedback.
         */
        "success"?: boolean;
        /**
          * Indicated to pass an feeback to user.
         */
        "successMessage"?: string;
        /**
          * Input type. Can be one of: "text", "password", "number" or "email".
         */
        "type"?: InputType;
        /**
          * The value of the input.
         */
        "value"?: string | null;
    }
    interface BdsInputChips {
        /**
          * The chips on the component Should be passed this way: chips='["chip1", "chip2"]'
         */
        "chips"?: string[] | string;
        /**
          * Passing true to display a counter of available size, it is necessary to pass another maxlength property.
         */
        "counterLength"?: boolean;
        /**
          * Add state danger on input, use for use feedback.
         */
        "danger"?: boolean;
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * The delimiter is used to add multiple chips in the same string.
         */
        "delimiters"?: RegExp;
        /**
          * If `true`, the user cannot modify the value.
         */
        "disableSubmit"?: boolean;
        /**
          * Disabled input
         */
        "disabled"?: boolean;
        /**
          * Data test is the prop to specifically test the component action object. dtButtonClose is the data-test to button close.
         */
        "dtButtonClose"?: string;
        /**
          * Do not accept duplicate chip elements.
         */
        "duplicated"?: boolean;
        /**
          * Indicated to pass an feedback to user.
         */
        "errorMessage"?: string;
        /**
          * Indicated to pass a help the user in complex filling.
         */
        "helperMessage"?: string;
        /**
          * used for add icon in input left. Uses the bds-icon component.
         */
        "icon"?: string;
        /**
          * Prop to insert the name of the input
         */
        "inputName"?: string;
        /**
          * label in input, with he the input size increases.
         */
        "label"?: string;
        /**
          * Set maximum length value for chips
         */
        "maxChipsLength"?: number;
        /**
          * Set maximum length value for the chip content
         */
        "maxlength"?: number;
        /**
          * Emitted when the chip has added.
         */
        "onBdsBlur"?: (event: BdsInputChipsCustomEvent<any>) => void;
        /**
          * Emitted when the chip has added.
         */
        "onBdsChange"?: (event: BdsInputChipsCustomEvent<any>) => void;
        /**
          * Emitted when the chip has added.
         */
        "onBdsChangeChips"?: (event: BdsInputChipsCustomEvent<any>) => void;
        /**
          * Emitted when a maximum value defined by the "max-chips-length" prop is entered
         */
        "onBdsExtendedQuantityInput"?: (event: BdsInputChipsCustomEvent<any>) => void;
        /**
          * Emitted when the chip has added.
         */
        "onBdsInputChipsFocus"?: (event: BdsInputChipsCustomEvent<any>) => void;
        /**
          * Emitted when the chip has added.
         */
        "onBdsInputChipsInput"?: (event: BdsInputChipsCustomEvent<any>) => void;
        /**
          * Emitted when the chip has added.
         */
        "onBdsSubmit"?: (event: BdsInputChipsCustomEvent<any>) => void;
        /**
          * A tip for the user who can enter no controls.
         */
        "placeholder"?: string;
        /**
          * Add state success on input, use for use feedback.
         */
        "success"?: boolean;
        /**
          * Indicated to pass an feeback to user.
         */
        "successMessage"?: string;
        /**
          * Defining the type is important so that it is possible to carry out validations. Can be one of: 'text' and 'email;
         */
        "type"?: InputChipsTypes;
        /**
          * The value of the input.
         */
        "value"?: string | null;
    }
    interface BdsInputEditable {
        /**
          * Add state danger on input, use for use feedback. If true avoid save confirmation.
         */
        "danger"?: boolean;
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * Data test is the prop to specifically test the component action object. dtButtonClose is the data-test to button close.
         */
        "dtButtonClose"?: string;
        /**
          * Data test is the prop to specifically test the component action object. dtButtonConfirm is the data-test to button confirm.
         */
        "dtButtonConfirm"?: string;
        /**
          * Data test is the prop to specifically test the component action object. dtButtonEdit is the data-test to button edit.
         */
        "dtButtonEdit"?: string;
        /**
          * Indicated to pass an feeback to user.
         */
        "errorMessage"?: string;
        /**
          * Defines whether the component will be expandable
         */
        "expand"?: boolean;
        /**
          * Indicated to pass a help to the user in complex filling.
         */
        "helperMessage"?: string;
        /**
          * Input Name
         */
        "inputName"?: string;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.
         */
        "maxlength"?: number;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.
         */
        "minlength"?: number;
        /**
          * Error message when the value is lower than the minlength
         */
        "minlengthErrorMessage"?: string;
        /**
          * Emitted when the select loses focus.
         */
        "onBdsBlur"?: (event: BdsInputEditableCustomEvent<void>) => void;
        /**
          * Emitted when the selection is cancelled.
         */
        "onBdsCancel"?: (event: BdsInputEditableCustomEvent<void>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onBdsChange"?: (event: BdsInputEditableCustomEvent<InputEditableEventDetail>) => void;
        /**
          * Emitted when the select loses focus.
         */
        "onBdsFocus"?: (event: BdsInputEditableCustomEvent<void>) => void;
        /**
          * Emitted when the input has changed.
         */
        "onBdsInput"?: (event: BdsInputEditableCustomEvent<KeyboardEvent>) => void;
        /**
          * Emitted when input text confirm.
         */
        "onBdsInputEditableSave"?: (event: BdsInputEditableCustomEvent<InputEditableEventDetail>) => void;
        /**
          * Placeholder for native input element.
         */
        "placeholder"?: string;
        /**
          * Error message when input is required
         */
        "requiredErrorMessage"?: string;
        /**
          * Set the component size. Can be one of: 'short' | 'standard' | 'tall';
         */
        "size"?: SizeInputEditable;
        /**
          * Add state success on input, use for use feedback.
         */
        "success"?: boolean;
        /**
          * Indicated to pass an feeback to user.
         */
        "successMessage"?: string;
        /**
          * The value of the input.
         */
        "value"?: string | null;
    }
    interface BdsInputPassword {
        /**
          * Capitalizes every word's second character.
         */
        "autoCapitalize"?: InputAutocapitalize;
        /**
          * Hint for form autofill feature
         */
        "autoComplete"?: InputAutoComplete;
        /**
          * Add state danger on input, use for use feedback.
         */
        "danger"?: boolean;
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * Disabled input.
         */
        "disabled"?: boolean;
        /**
          * Indicated to pass an feeback to user.
         */
        "errorMessage"?: string;
        /**
          * Indicated to pass a help the user in complex filling.
         */
        "helperMessage"?: string;
        /**
          * used for add icon in input left. Uses the bds-icon component.
         */
        "icon"?: string;
        /**
          * Input Name
         */
        "inputName"?: string;
        /**
          * label in input, with he the input size increases.
         */
        "label"?: string;
        /**
          * The maximum value, which must not be less than its minimum (min attribute) value.
         */
        "max"?: string;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.
         */
        "maxlength"?: number;
        /**
          * The minimum value, which must not be greater than its maximum (max attribute) value.
         */
        "min"?: string;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.
         */
        "minlength"?: number;
        /**
          * Event input onblur.
         */
        "onBdsInputPasswordBlur"?: (event: BdsInputPasswordCustomEvent<any>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onBdsInputPasswordChange"?: (event: BdsInputPasswordCustomEvent<any>) => void;
        /**
          * Event input focus.
         */
        "onBdsInputPasswordFocus"?: (event: BdsInputPasswordCustomEvent<any>) => void;
        /**
          * Emitted when the input has changed.
         */
        "onBdsInputPasswordInput"?: (event: BdsInputPasswordCustomEvent<KeyboardEvent>) => void;
        /**
          * Event input enter.
         */
        "onBdsInputPasswordSubmit"?: (event: BdsInputPasswordCustomEvent<any>) => void;
        /**
          * Event input key down backspace.
         */
        "onBdsKeyDownBackspace"?: (event: BdsInputPasswordCustomEvent<any>) => void;
        "openEyes"?: boolean;
        /**
          * A tip for the user who can enter no controls.
         */
        "placeholder"?: string;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly"?: boolean;
        /**
          * Add state success on input, use for use feedback.
         */
        "success"?: boolean;
        /**
          * Indicated to pass an feeback to user.
         */
        "successMessage"?: string;
        /**
          * The value of the input.
         */
        "value"?: string | null;
    }
    interface BdsInputPhoneNumber {
        /**
          * Add state danger on input, use for use feedback.
         */
        "danger"?: boolean;
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * Disabled input.
         */
        "disabled"?: boolean;
        /**
          * Data test is the prop to specifically test the component action object. dtSelectFlag is the data-test to button close.
         */
        "dtSelectFlag"?: string;
        /**
          * Indicated to pass an feeback to user.
         */
        "errorMessage"?: string;
        /**
          * Indicated to pass a help the user in complex filling.
         */
        "helperMessage"?: string;
        /**
          * used for add icon in input left. Uses the bds-icon component.
         */
        "icon"?: string;
        /**
          * label in input, with he the input size increases.
         */
        "label"?: string;
        /**
          * Error message when input is required
         */
        "numberErrorMessage"?: string;
        /**
          * Emitted when the select loses focus.
         */
        "onBdsBlur"?: (event: BdsInputPhoneNumberCustomEvent<void>) => void;
        /**
          * Emitted when the selection is cancelled.
         */
        "onBdsCancel"?: (event: BdsInputPhoneNumberCustomEvent<void>) => void;
        /**
          * Emitted when the select loses focus.
         */
        "onBdsFocus"?: (event: BdsInputPhoneNumberCustomEvent<void>) => void;
        /**
          * Emitted when the input has changed.
         */
        "onBdsInput"?: (event: BdsInputPhoneNumberCustomEvent<KeyboardEvent>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onBdsPhoneNumberChange"?: (event: BdsInputPhoneNumberCustomEvent<any>) => void;
        /**
          * The options of select.
         */
        "options"?: Array<Option>;
        /**
          * If `true`, the input value will be required.
         */
        "required"?: boolean;
        /**
          * Error message when input is required
         */
        "requiredErrorMessage"?: string;
        /**
          * Add state success on input, use for use feedback.
         */
        "success"?: boolean;
        /**
          * Indicated to pass an feeback to user.
         */
        "successMessage"?: string;
        /**
          * The value of the phone number input.
         */
        "text"?: string;
        /**
          * the value of the select.
         */
        "value"?: string | null;
    }
    interface BdsList {
        /**
          * The Data of the list Should be passed this way: data='[{"value": "01","text": "Text","secondaryText": "Secondary Text","avatarName": "","avatarThumbnail": "","checked"="true","icon": "settings-builder"}, {"value": "02","text": "Text","secondaryText": "Secondary Text","avatarName": "","avatarThumbnail": "","checked"="false","icon": "settings-builder",}]' Data can also be passed as child by using bds-list-item component, but passing as a child you may have some compatibility problems with Angular.
         */
        "data"?: string | Data[];
        /**
          * Emitted when click in someone actions buttom insert in data.
         */
        "onBdsClickActionsButtons"?: (event: BdsListCustomEvent<any>) => void;
        /**
          * Emitted when the value checkboxes has changed because of a click event.
         */
        "onBdsListCheckboxChange"?: (event: BdsListCustomEvent<any>) => void;
        /**
          * Emitted when the value radios has changed because of a click event.
         */
        "onBdsListRadioChange"?: (event: BdsListCustomEvent<any>) => void;
        /**
          * Emitted when the value switches has changed because of a click event.
         */
        "onBdsListSwitchChange"?: (event: BdsListCustomEvent<any>) => void;
        /**
          * Typelist. Used to .
         */
        "typeList"?: TypeList;
        /**
          * The value of the selected radio
         */
        "value"?: string;
    }
    interface BdsListItem {
        /**
          * The actions buttons on the component Should be passed this way: actions-buttons='["copy", "settings-general", "more-options-horizontal"]'
         */
        "actionsButtons"?: string | string[];
        /**
          * Active. Used to define when the item is highlighted.
         */
        "active"?: boolean;
        /**
          * AvatarName. Used to enter the avatar name.
         */
        "avatarName"?: string;
        /**
          * AvatarThumbnail. Used to insert the avatar photo.
         */
        "avatarThumbnail"?: string;
        /**
          * Enable rounded border on item
         */
        "borderRadius"?: boolean;
        "checked"?: boolean;
        /**
          * The chips on the component Should be passed this way: chips='["chip1", "chip2"]'
         */
        "chips"?: string | string[];
        /**
          * Clickable. Used to define if the item is clickable or not.
         */
        "clickable"?: boolean;
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * Icon. Used to add icon in list item.
         */
        "icon"?: string;
        /**
          * Emitted when the value has changed because of a click event.
         */
        "onBdsChecked"?: (event: BdsListItemCustomEvent<any>) => void;
        /**
          * Emitted when click in someone actions buttom insert in data.
         */
        "onBdsClickActionButtom"?: (event: BdsListItemCustomEvent<any>) => void;
        /**
          * SecondaryText. Used to insert a secondaryText in the display item.
         */
        "secondaryText"?: string;
        /**
          * Text. Used to insert a text in the display item.
         */
        "text"?: string;
        /**
          * Typelis. Used toselect type of item list.
         */
        "typeList"?: TypeList1;
        /**
          * Value. Used to insert a value in list item.
         */
        "value"?: string;
    }
    interface BdsLoadingBar {
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * Percent, property to enter the loading bar status percentage value.
         */
        "percent"?: number;
        /**
          * Size, property to define size of component.
         */
        "size"?: loadingBarSize;
        /**
          * Text, property to enable the bar info text.
         */
        "text"?: string;
    }
    interface BdsLoadingPage {
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
    }
    interface BdsLoadingSpinner {
        /**
          * Color, Entered as one of the color. Can be one of: 'default', 'white'.
         */
        "color"?: colorsVariants;
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * Size, Entered as one of the size. Can be one of: 'small', 'standard', 'large'.
         */
        "size"?: loadingSize;
        /**
          * Sets the color of the spinner, can be 'primary', 'secondary' or 'ghost'
         */
        "variant"?: LoadingSpinnerVariant;
    }
    interface BdsMenu {
        /**
          * Menu. Used to link the minus with the action button.
         */
        "menu"?: string;
        /**
          * bdsToggle. Event to return selected date value.
         */
        "onBdsToggle"?: (event: BdsMenuCustomEvent<any>) => void;
        /**
          * Open. Used to open/close the menu.
         */
        "open"?: boolean;
        /**
          * Position. Used to position the Menu. Either on the left or on the bottom.
         */
        "position"?: menuPosition;
    }
    interface BdsMenuAction {
        /**
          * ButtonText. Used to enter the display text for the item.
         */
        "buttonText"?: string;
        /**
          * Description. Used to insert a subtitle in the display item.
         */
        "description"?: string;
        /**
          * Disabled. Used to declare that the item will be disabled.
         */
        "disabled"?: boolean;
        /**
          * Iconleft. Used to insert the string icon and make the icon available to the left of the item.
         */
        "iconLeft"?: string;
        /**
          * Lipstick. Used to declare that the item will be a negative/error action.
         */
        "lipstick"?: boolean;
        /**
          * SubMenu. Used to declare that the button will have a submenu.
         */
        "subMenu"?: boolean;
        /**
          * Subtitle. Used to insert a subtitle in the display item.
         */
        "subtitle"?: string;
    }
    interface BdsMenuExibition {
        /**
          * AvatarName. Used to enter the avatar name.
         */
        "avatarName"?: string;
        /**
          * AvatarSize. Used to set avatar size.
         */
        "avatarSize"?: avatarSize;
        /**
          * AvatarThumbnail. Used to insert the avatar photo.
         */
        "avatarThumbnail"?: string;
        /**
          * Description. Used to insert a subtitle in the display item.
         */
        "description"?: string;
        /**
          * Disabled. Used to declare that the item will be disabled.
         */
        "disabled"?: boolean;
        /**
          * Subtitle. Used to insert a subtitle in the display item.
         */
        "subtitle"?: string;
        /**
          * Value. Used to insert a title in the display item.
         */
        "value"?: string;
    }
    interface BdsMenuList {
    }
    interface BdsMenuListItem {
        "color"?: string;
        /**
          * used for add icon in input left. Uses the bds-icon component.
         */
        "icon": string;
    }
    interface BdsMenuSeparation {
        /**
          * Size. Used to set the size of the divider.
         */
        "size"?: string;
        /**
          * Value. Used to insert a title to the divider.
         */
        "value"?: string;
    }
    interface BdsModal {
        /**
          * Used to hide or show the close button
         */
        "closeButton"?: boolean;
        /**
          * Data test is the prop to specifically test the component action object. dtButtonClose is the data-test to button close.
         */
        "dtButtonClose"?: string;
        /**
          * Data test is the prop to specifically test the component action object. dtOutzone is the data-test to button close.
         */
        "dtOutzone"?: string;
        /**
          * Emitted when modal status has changed.
         */
        "onBdsModalChanged"?: (event: BdsModalCustomEvent<any>) => void;
        /**
          * Used to open/close the modal
         */
        "open"?: boolean;
        /**
          * If true, the modal will close clicking outside the component.
         */
        "outzoneClose"?: boolean;
        /**
          * Used to change the modal heights.
         */
        "size"?: sizes;
    }
    interface BdsModalAction {
    }
    interface BdsModalCloseButton {
        /**
          * Used to hide or show the close button
         */
        "active"?: boolean;
    }
    interface BdsNavbar {
        /**
          * Width, number to define navbar width.
         */
        "backgroundColor"?: navbarBackground;
        /**
          * Justify Content. Used to align itens in navbar.
         */
        "justifyContent"?: justifyContent;
        /**
          * Navbar orientation. Used to orientation the navbar. Either on the left or on the right.
         */
        "orientation"?: orientation;
    }
    interface BdsNavbarContent {
    }
    interface BdsPagination {
        /**
          * Data test is the prop to specifically test the component action object. dtButtonEnd is the data-test to button end
         */
        "dtButtonEnd"?: string;
        /**
          * Data test is the prop to specifically test the component action object. dtButtonInitial is the data-test to button initial.
         */
        "dtButtonInitial"?: string;
        /**
          * Data test is the prop to specifically test the component action object. dtButtonNext is the data-test to button next.
         */
        "dtButtonNext"?: string;
        /**
          * Data test is the prop to specifically test the component action object. dtButtonPrev is the data-test to button prev.
         */
        "dtButtonPrev"?: string;
        /**
          * Data test is the prop to specifically test the component action object. dtSelectNumber is the data-test to select number.
         */
        "dtSelectNumber"?: string;
        /**
          * When de value of component change, the event are dispache.
         */
        "onBdsPaginationChange"?: (event: BdsPaginationCustomEvent<any>) => void;
        /**
          * Set the placement of the options menu. Can be 'bottom' or 'top'.
         */
        "optionsPosition"?: PaginationOptionsPositionType;
        /**
          * Prop to recive the number of pages.
         */
        "pages"?: number;
        /**
          * When the component are render this page are set.
         */
        "startedPage"?: number;
    }
    interface BdsPaper {
        /**
          * Prop for set the border of the component.
         */
        "border"?: boolean;
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * Size. Entered as one of the size. Can be one of: 'static', 'primary', 'secondary';
         */
        "elevation"?: PaperElevation;
        /**
          * Prop for set the height of the component.
         */
        "height"?: string;
        /**
          * Prop for set the width of the component.
         */
        "width"?: string;
    }
    interface BdsProgressBar {
        /**
          * Text, property to define status of component.
         */
        "color"?: progressBarColor;
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * Percent, property to enter the progress bar status percentage value.
         */
        "percent"?: number;
        /**
          * Size, property to define size of component.
         */
        "size"?: progressBarSize;
        /**
          * Text, property to enable the bar info text.
         */
        "text"?: string;
    }
    interface BdsRadio {
        /**
          * If `true`, the checkbox is selected.
         */
        "checked"?: boolean;
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * If `true`, the user cannot interact with the checkbox.
         */
        "disabled"?: boolean;
        /**
          * label in radio, with he the input size increases.
         */
        "label"?: string;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the value has changed.
         */
        "onBdsChange"?: (event: BdsRadioCustomEvent<any>) => void;
        /**
          * Emitted when the value has changed because of a click event.
         */
        "onBdsClickChange"?: (event: BdsRadioCustomEvent<any>) => void;
        /**
          * Refer. Field to add refer in radio buttom.
         */
        "refer"?: string;
        /**
          * The value of the input.
         */
        "value": string;
    }
    interface BdsRadioGroup {
        /**
          * Emitted when the value has changed due to a click event.
         */
        "onBdsRadioGroupChange"?: (event: BdsRadioGroupCustomEvent<any>) => void;
        /**
          * The value of the selected radio
         */
        "value"?: string;
    }
    interface BdsSelect {
        /**
          * Add state danger on input, use for use feedback.
         */
        "danger"?: boolean;
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * Disabled input.
         */
        "disabled"?: boolean;
        /**
          * Indicated to pass an feeback to user.
         */
        "errorMessage"?: string;
        /**
          * Indicated to pass a help the user in complex filling.
         */
        "helperMessage"?: string;
        /**
          * used for add icon in input left. Uses the bds-icon component.
         */
        "icon"?: string;
        /**
          * label in input, with he the input size increases.
         */
        "label"?: string;
        /**
          * Emitted when the select loses focus.
         */
        "onBdsBlur"?: (event: BdsSelectCustomEvent<void>) => void;
        /**
          * Emitted when the selection is cancelled.
         */
        "onBdsCancel"?: (event: BdsSelectCustomEvent<void>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onBdsChange"?: (event: BdsSelectCustomEvent<SelectChangeEventDetail>) => void;
        /**
          * Emitted when the select loses focus.
         */
        "onBdsFocus"?: (event: BdsSelectCustomEvent<void>) => void;
        /**
          * The options of the select Should be passed this way: options='[{"value": "Cat", "label": "Meow"}, {"value": "Dog", "label": "Woof"}]' Options can also be passed as child by using bds-select-option component, but passing as a child you may have some compatibility problems with Angular.
         */
        "options"?: string | Option[];
        /**
          * Set the placement of the options menu. Can be 'bottom' or 'top'.
         */
        "optionsPosition"?: SelectOptionsPositionType;
        /**
          * Placeholder for native input element.
         */
        "placeholder"?: string;
        /**
          * Add state success on input, use for use feedback.
         */
        "success"?: boolean;
        /**
          * Indicated to pass an feeback to user.
         */
        "successMessage"?: string;
        /**
          * the value of the select.
         */
        "value"?: any | null;
    }
    interface BdsSelectChips {
        /**
          * Specify if is possible to create a new tag that is not on the options.
         */
        "canAddNew"?: boolean;
        /**
          * The chips on the component Should be passed this way: chips='["chip1", "chip2"]'
         */
        "chips"?: string | string[];
        /**
          * Add state danger on input, use for use feedback.
         */
        "danger"?: boolean;
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * The delimiter is used to add multiple chips in the same string.
         */
        "delimiters"?: RegExp;
        /**
          * If `true`, the user cannot modify the value.
         */
        "disableSubmit"?: boolean;
        /**
          * Disabled input.
         */
        "disabled"?: boolean;
        /**
          * Do not accept duplicate chip elements.
         */
        "duplicated"?: boolean;
        /**
          * Indicated to pass an feedback to user.
         */
        "errorMessage"?: string;
        /**
          * Indicated to pass a help the user in complex filling.
         */
        "helperMessage"?: string;
        /**
          * used for add icon in input left. Uses the bds-icon component.
         */
        "icon"?: string;
        /**
          * Prop to insert the name of the input
         */
        "inputName"?: string;
        /**
          * label in input, with he the input size increases.
         */
        "label"?: string;
        /**
          * Set maximum length value for the chip content
         */
        "maxlength"?: number;
        /**
          * Used for add prefix on new option select.
         */
        "newPrefix"?: string;
        /**
          * Specify if is possible to create a new tag that is not on the options.
         */
        "notFoundMessage"?: string;
        /**
          * Emitted when the select loses focus.
         */
        "onBdsBlur"?: (event: BdsSelectChipsCustomEvent<void>) => void;
        /**
          * Emitted when the selection is cancelled.
         */
        "onBdsCancel"?: (event: BdsSelectChipsCustomEvent<void>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onBdsChange"?: (event: BdsSelectChipsCustomEvent<SelectChangeEventDetail>) => void;
        /**
          * Emitted when the chip has added.
         */
        "onBdsChangeChips"?: (event: BdsSelectChipsCustomEvent<any>) => void;
        /**
          * Emitted when the select loses focus.
         */
        "onBdsFocus"?: (event: BdsSelectChipsCustomEvent<void>) => void;
        /**
          * Emitted when the chip has added.
         */
        "onBdsSelectChipsInput"?: (event: BdsSelectChipsCustomEvent<any>) => void;
        /**
          * Emitted when the chip has added.
         */
        "onBdsSubmit"?: (event: BdsSelectChipsCustomEvent<any>) => void;
        /**
          * The options of the select Should be passed this way: options='[{"value": "Cat", "label": "Meow"}, {"value": "Dog", "label": "Woof"}]' Options can also be passed as child by using bds-select-option component, but passing as a child you may have some compatibility problems with Angular.
         */
        "options"?: string | Option[];
        /**
          * Set the placement of the options menu. Can be 'bottom' or 'top'.
         */
        "optionsPosition"?: SelectOptionsPositionType;
        /**
          * A tip for the user who can enter no controls.
         */
        "placeholder"?: string;
        /**
          * Add state success on input, use for use feedback.
         */
        "success"?: boolean;
        /**
          * Indicated to pass an feeback to user.
         */
        "successMessage"?: string;
        /**
          * Defining the type is important so that it is possible to carry out validations. Can be one of: 'text' and 'email;
         */
        "type"?: InputChipsTypes;
        /**
          * the value of the select.
         */
        "value"?: string | null;
    }
    interface BdsSelectOption {
        /**
          * Quantity Description on option value, this item is locate to rigth in component.
         */
        "bulkOption"?: string;
        /**
          * If `true`, the checkbox is selected.
         */
        "checked"?: boolean;
        /**
          * Add state danger on input, use for use feedback.
         */
        "danger"?: boolean;
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * If `true`, the user cannot interact with the select option.
         */
        "disabled"?: boolean;
        /**
          * Add state danger on input, use for use feedback.
         */
        "invisible"?: boolean;
        "onOptionChecked"?: (event: BdsSelectOptionCustomEvent<any>) => void;
        "onOptionSelected"?: (event: BdsSelectOptionCustomEvent<any>) => void;
        /**
          * The text value of the option.
         */
        "selected"?: boolean;
        /**
          * Alignment of input-left slot. The value need to be one of the values used on flexbox align-self property.
         */
        "slotAlign"?: string;
        /**
          * If set, a text will be displayed on the right side of the option label
         */
        "status"?: string;
        /**
          * If set, a title will be shown under the text
         */
        "titleText"?: string;
        /**
          * Type Option. Used toselect type of item list.
         */
        "typeOption"?: TypeOption;
        "value": any;
    }
    interface BdsSidebar {
        /**
          * Width, number to define sidebar width.
         */
        "background"?: sidebarBackground;
        /**
          * Data test is the prop to specifically test the component action object. dtButtonClose is the data-test to button close.
         */
        "dtButtonClose"?: string;
        /**
          * Data test is the prop to specifically test the component action object. dtOutzone is the data-test to button close.
         */
        "dtOutzone"?: string;
        /**
          * ; isOpen. Used to open sidebar.
         */
        "isOpen"?: boolean;
        /**
          * If true, a lateral margin will apear in the content.
         */
        "margin"?: boolean;
        /**
          * Emitted when the isOpen has changed.
         */
        "onBdsToggle"?: (event: BdsSidebarCustomEvent<any>) => void;
        /**
          * sidebar position. Used to position the sidebar. Either on the left or on the right.
         */
        "sidebarPosition"?: sidebarPosition;
        /**
          * sidebar type. Used to define how open.
         */
        "type"?: sidebarType;
        /**
          * Width, number to define sidebar width.
         */
        "width"?: number;
    }
    interface BdsStep {
        /**
          * Used to set the step as active
         */
        "active"?: boolean;
        /**
          * Used to complete the step
         */
        "completed"?: boolean;
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * Used to set the step as disabled
         */
        "disabled"?: boolean;
        /**
          * Used to set the index of the steps
         */
        "index"?: number;
        /**
          * Used to define the last step component on the list
         */
        "last"?: boolean;
        /**
          * Used to set cursor pointer on the step (useful to allow clicks on the steps)
         */
        "pointer"?: boolean;
    }
    interface BdsStepper {
    }
    interface BdsSwitch {
        /**
          * If `true`, the switch is selected.
         */
        "checked"?: boolean;
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * If `true`, the user cannot interact with the switch.
         */
        "disabled"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * Emitted when the value has changed.
         */
        "onBdsChange"?: (event: BdsSwitchCustomEvent<any>) => void;
        /**
          * The refer of the control.
         */
        "refer": string;
        /**
          * Size. Entered as one of the size. Can be one of: 'tall', 'standard', 'short';
         */
        "size"?: SwitchSize;
    }
    interface BdsTab {
        /**
          * Prop to control externally if a tab will be active by default
         */
        "active"?: boolean;
        /**
          * Specifies the Tab group. Used to link it to the TabPanel.
         */
        "group": string;
        /**
          * The text to be shown at the Tab
         */
        "label": string;
        /**
          * Event to emmit when the active tab should be updated
         */
        "onBdsTabChange"?: (event: BdsTabCustomEvent<any>) => void;
    }
    interface BdsTabGroup {
        "align"?: 'left' | 'center' | 'right';
        "contentScrollable"?: boolean;
        /**
          * Data test is the prop to specifically test the component action object. dtButtonNext is the data-test to button next.
         */
        "dtButtonNext"?: string;
        /**
          * Data test is the prop to specifically test the component action object. dtButtonPrev is the data-test to button prev.
         */
        "dtButtonPrev"?: string;
        /**
          * bdsTabChange. Event to return value when Tabs is change.
         */
        "onBdsTabChange"?: (event: BdsTabGroupCustomEvent<any>) => void;
        /**
          * bdsTabDisabled. Event to return value when Tabs disable is change.
         */
        "onBdsTabDisabled"?: (event: BdsTabGroupCustomEvent<any>) => void;
    }
    interface BdsTabItem {
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * Prop for disable the especific tab.
         */
        "disable"?: boolean;
        /**
          * The text to be shown at the Tab item.
         */
        "label"?: string;
        /**
          * Use to set number of tabItem.
         */
        "numberElement"?: number;
        "onTabDisabled"?: (event: BdsTabItemCustomEvent<any>) => void;
        /**
          * Used to open/close the Tab item.
         */
        "open"?: boolean;
    }
    interface BdsTabPanel {
        /**
          * Specifies the TabPanel group. Used to link it to the Tab.
         */
        "group": string;
    }
    interface BdsTable {
    }
    interface BdsTableBody {
    }
    interface BdsTableCell {
        "sortable"?: boolean;
        "type"?: string;
    }
    interface BdsTableHeader {
    }
    interface BdsTableRow {
        /**
          * Prop to make hover animation.
         */
        "clickable"?: boolean;
        /**
          * Prop to highlight the row selected.
         */
        "selected"?: boolean;
    }
    interface BdsTableTh {
        "arrow"?: string;
        "sortable"?: boolean;
    }
    interface BdsTabs {
        "align"?: 'left' | 'center' | 'right';
        "onBdsTabInit"?: (event: BdsTabsCustomEvent<any>) => void;
        "onScrollButtonClick"?: (event: BdsTabsCustomEvent<Overflow>) => void;
    }
    interface BdsTestComponent {
    }
    interface BdsThemeProvider {
        /**
          * Set what theme will be aplyed inside the component. 'light', 'dark';
         */
        "theme"?: Themes;
    }
    interface BdsToast {
        /**
          * ActionType. Defines if the button should have a button or an icon. Can be one of: 'icon', 'button';
         */
        "actionType"?: ActionType;
        /**
          * Define an action to the button toast. Can be one of: 'close', 'custom'; if the action type is set to close, the button will close automatically. if the action type is set to custom, a function need to be passed when the toastButtonClick is emitted.
         */
        "buttonAction"?: ButtonActionType;
        /**
          * If the action type is button, this will be the text of the button:
         */
        "buttonText"?: string;
        /**
          * Data test is the prop to specifically test the component action object. dtButtonAction is the data-test to button action.
         */
        "dtButtonAction"?: string;
        /**
          * Data test is the prop to specifically test the component action object. dtButtonClose is the data-test to button close.
         */
        "dtButtonClose"?: string;
        /**
          * Time to close the toast in seconds 0 = never close automatically (default value)
         */
        "duration"?: number;
        /**
          * Controls the hide event of the component:
         */
        "hide"?: boolean;
        /**
          * used for add the icon. Uses the bds-icon component.
         */
        "icon"?: string;
        /**
          * Event used to execute some action when the action button on the toast is clicked
         */
        "onToastButtonClick"?: (event: BdsToastCustomEvent<any>) => void;
        /**
          * The toast position on the screen. Can be one of: 'top-right', 'top-left', 'bottom-right', 'bottom-left' (default value);
         */
        "position"?: PositionType;
        /**
          * Controls the open event of the component:
         */
        "show"?: boolean;
        /**
          * The text content of the component:
         */
        "toastText"?: string;
        /**
          * The title of the component:
         */
        "toastTitle"?: string;
        /**
          * Variant. Defines the color of the toast. Can be one of: 'system', 'error', 'success', 'warning', 'undo', 'redo';
         */
        "variant"?: VariantType;
    }
    interface BdsToastContainer {
    }
    interface BdsTooltip {
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * Used to disable tooltip when the button are avalible
         */
        "disabled"?: boolean;
        /**
          * Used to set tooltip position
         */
        "position"?: TooltipPostionType;
        /**
          * Used to set tooltip text
         */
        "tooltipText"?: string;
    }
    interface BdsTypo {
        /**
          * Bold. Entered as one of the bold. Can be one of: 'regular', 'semi-bold', 'bold', 'extra-bold';
         */
        "bold"?: Bold;
        /**
          * Data test is the prop to specifically test the component action object.
         */
        "dataTest"?: string;
        /**
          * Added font style italic
         */
        "italic"?: boolean;
        /**
          * Line Height. Entered as one of the line hieght. Can be one of: 'none', 'small', 'simple', 'plus', 'double'
         */
        "lineHeight"?: FontLineHeight;
        /**
          * If true, adds default margin values
         */
        "margin"?: boolean;
        /**
          * Added style no wrap
         */
        "noWrap"?: boolean;
        /**
          * Tranform text in paragraph
         */
        "paragraph"?: boolean;
        /**
          * Define element tag, must be used for acessibilty
         */
        "tag"?: Tag;
        /**
          * Variant. Entered as one of the font size variant. Can be one of: 'fs-10' ,'fs-12' ,'fs-14' ,'fs-16' ,'fs-20' ,'fs-24' ,'fs-32' ,'fs-40';
         */
        "variant"?: FontSize;
    }
    interface BdsUpload {
        /**
          * Used to accept a especific type of file.
         */
        "accept"?: string;
        /**
          * Used for add a error message. In case a verify.
         */
        "error"?: string;
        /**
          * Set the language for fixed texts.
         */
        "language"?: languages1;
        /**
          * Used to allow upload multiple files.
         */
        "multiple"?: boolean;
        /**
          * Event emited when change the value of Upload.
         */
        "onBdsUploadChange"?: (event: BdsUploadCustomEvent<any>) => void;
        /**
          * Event emited when delete a item from the list.
         */
        "onBdsUploadDelete"?: (event: BdsUploadCustomEvent<any>) => void;
        /**
          * Used for add a text on subtitle.
         */
        "subtitle"?: string;
        /**
          * Used for add a text on title.
         */
        "titleName"?: string;
    }
    interface BdsWarning {
    }
    interface IntrinsicElements {
        "bds-accordion": BdsAccordion;
        "bds-accordion-body": BdsAccordionBody;
        "bds-accordion-group": BdsAccordionGroup;
        "bds-accordion-header": BdsAccordionHeader;
        "bds-alert": BdsAlert;
        "bds-alert-actions": BdsAlertActions;
        "bds-alert-body": BdsAlertBody;
        "bds-alert-header": BdsAlertHeader;
        "bds-autocomplete": BdsAutocomplete;
        "bds-avatar": BdsAvatar;
        "bds-avatar-group": BdsAvatarGroup;
        "bds-badge": BdsBadge;
        "bds-banner": BdsBanner;
        "bds-banner-link": BdsBannerLink;
        "bds-button": BdsButton;
        "bds-button-icon": BdsButtonIcon;
        "bds-card": BdsCard;
        "bds-card-body": BdsCardBody;
        "bds-card-color": BdsCardColor;
        "bds-card-footer": BdsCardFooter;
        "bds-card-header": BdsCardHeader;
        "bds-card-subtitle": BdsCardSubtitle;
        "bds-card-title": BdsCardTitle;
        "bds-checkbox": BdsCheckbox;
        "bds-chip": BdsChip;
        "bds-chip-clickable": BdsChipClickable;
        "bds-chip-selected": BdsChipSelected;
        "bds-chip-tag": BdsChipTag;
        "bds-counter-text": BdsCounterText;
        "bds-data-table": BdsDataTable;
        "bds-datepicker": BdsDatepicker;
        "bds-datepicker-period": BdsDatepickerPeriod;
        "bds-datepicker-single": BdsDatepickerSingle;
        "bds-dropdown": BdsDropdown;
        "bds-expansion-panel": BdsExpansionPanel;
        "bds-expansion-panel-body": BdsExpansionPanelBody;
        "bds-expansion-panel-header": BdsExpansionPanelHeader;
        "bds-grid": BdsGrid;
        "bds-icon": BdsIcon;
        "bds-illustration": BdsIllustration;
        "bds-input": BdsInput;
        "bds-input-chips": BdsInputChips;
        "bds-input-editable": BdsInputEditable;
        "bds-input-password": BdsInputPassword;
        "bds-input-phone-number": BdsInputPhoneNumber;
        "bds-list": BdsList;
        "bds-list-item": BdsListItem;
        "bds-loading-bar": BdsLoadingBar;
        "bds-loading-page": BdsLoadingPage;
        "bds-loading-spinner": BdsLoadingSpinner;
        "bds-menu": BdsMenu;
        "bds-menu-action": BdsMenuAction;
        "bds-menu-exibition": BdsMenuExibition;
        "bds-menu-list": BdsMenuList;
        "bds-menu-list-item": BdsMenuListItem;
        "bds-menu-separation": BdsMenuSeparation;
        "bds-modal": BdsModal;
        "bds-modal-action": BdsModalAction;
        "bds-modal-close-button": BdsModalCloseButton;
        "bds-navbar": BdsNavbar;
        "bds-navbar-content": BdsNavbarContent;
        "bds-pagination": BdsPagination;
        "bds-paper": BdsPaper;
        "bds-progress-bar": BdsProgressBar;
        "bds-radio": BdsRadio;
        "bds-radio-group": BdsRadioGroup;
        "bds-select": BdsSelect;
        "bds-select-chips": BdsSelectChips;
        "bds-select-option": BdsSelectOption;
        "bds-sidebar": BdsSidebar;
        "bds-step": BdsStep;
        "bds-stepper": BdsStepper;
        "bds-switch": BdsSwitch;
        "bds-tab": BdsTab;
        "bds-tab-group": BdsTabGroup;
        "bds-tab-item": BdsTabItem;
        "bds-tab-panel": BdsTabPanel;
        "bds-table": BdsTable;
        "bds-table-body": BdsTableBody;
        "bds-table-cell": BdsTableCell;
        "bds-table-header": BdsTableHeader;
        "bds-table-row": BdsTableRow;
        "bds-table-th": BdsTableTh;
        "bds-tabs": BdsTabs;
        "bds-test-component": BdsTestComponent;
        "bds-theme-provider": BdsThemeProvider;
        "bds-toast": BdsToast;
        "bds-toast-container": BdsToastContainer;
        "bds-tooltip": BdsTooltip;
        "bds-typo": BdsTypo;
        "bds-upload": BdsUpload;
        "bds-warning": BdsWarning;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "bds-accordion": LocalJSX.BdsAccordion & JSXBase.HTMLAttributes<HTMLBdsAccordionElement>;
            "bds-accordion-body": LocalJSX.BdsAccordionBody & JSXBase.HTMLAttributes<HTMLBdsAccordionBodyElement>;
            "bds-accordion-group": LocalJSX.BdsAccordionGroup & JSXBase.HTMLAttributes<HTMLBdsAccordionGroupElement>;
            "bds-accordion-header": LocalJSX.BdsAccordionHeader & JSXBase.HTMLAttributes<HTMLBdsAccordionHeaderElement>;
            "bds-alert": LocalJSX.BdsAlert & JSXBase.HTMLAttributes<HTMLBdsAlertElement>;
            "bds-alert-actions": LocalJSX.BdsAlertActions & JSXBase.HTMLAttributes<HTMLBdsAlertActionsElement>;
            "bds-alert-body": LocalJSX.BdsAlertBody & JSXBase.HTMLAttributes<HTMLBdsAlertBodyElement>;
            "bds-alert-header": LocalJSX.BdsAlertHeader & JSXBase.HTMLAttributes<HTMLBdsAlertHeaderElement>;
            "bds-autocomplete": LocalJSX.BdsAutocomplete & JSXBase.HTMLAttributes<HTMLBdsAutocompleteElement>;
            "bds-avatar": LocalJSX.BdsAvatar & JSXBase.HTMLAttributes<HTMLBdsAvatarElement>;
            "bds-avatar-group": LocalJSX.BdsAvatarGroup & JSXBase.HTMLAttributes<HTMLBdsAvatarGroupElement>;
            "bds-badge": LocalJSX.BdsBadge & JSXBase.HTMLAttributes<HTMLBdsBadgeElement>;
            "bds-banner": LocalJSX.BdsBanner & JSXBase.HTMLAttributes<HTMLBdsBannerElement>;
            "bds-banner-link": LocalJSX.BdsBannerLink & JSXBase.HTMLAttributes<HTMLBdsBannerLinkElement>;
            "bds-button": LocalJSX.BdsButton & JSXBase.HTMLAttributes<HTMLBdsButtonElement>;
            "bds-button-icon": LocalJSX.BdsButtonIcon & JSXBase.HTMLAttributes<HTMLBdsButtonIconElement>;
            "bds-card": LocalJSX.BdsCard & JSXBase.HTMLAttributes<HTMLBdsCardElement>;
            "bds-card-body": LocalJSX.BdsCardBody & JSXBase.HTMLAttributes<HTMLBdsCardBodyElement>;
            "bds-card-color": LocalJSX.BdsCardColor & JSXBase.HTMLAttributes<HTMLBdsCardColorElement>;
            "bds-card-footer": LocalJSX.BdsCardFooter & JSXBase.HTMLAttributes<HTMLBdsCardFooterElement>;
            "bds-card-header": LocalJSX.BdsCardHeader & JSXBase.HTMLAttributes<HTMLBdsCardHeaderElement>;
            "bds-card-subtitle": LocalJSX.BdsCardSubtitle & JSXBase.HTMLAttributes<HTMLBdsCardSubtitleElement>;
            "bds-card-title": LocalJSX.BdsCardTitle & JSXBase.HTMLAttributes<HTMLBdsCardTitleElement>;
            "bds-checkbox": LocalJSX.BdsCheckbox & JSXBase.HTMLAttributes<HTMLBdsCheckboxElement>;
            "bds-chip": LocalJSX.BdsChip & JSXBase.HTMLAttributes<HTMLBdsChipElement>;
            "bds-chip-clickable": LocalJSX.BdsChipClickable & JSXBase.HTMLAttributes<HTMLBdsChipClickableElement>;
            "bds-chip-selected": LocalJSX.BdsChipSelected & JSXBase.HTMLAttributes<HTMLBdsChipSelectedElement>;
            "bds-chip-tag": LocalJSX.BdsChipTag & JSXBase.HTMLAttributes<HTMLBdsChipTagElement>;
            "bds-counter-text": LocalJSX.BdsCounterText & JSXBase.HTMLAttributes<HTMLBdsCounterTextElement>;
            "bds-data-table": LocalJSX.BdsDataTable & JSXBase.HTMLAttributes<HTMLBdsDataTableElement>;
            "bds-datepicker": LocalJSX.BdsDatepicker & JSXBase.HTMLAttributes<HTMLBdsDatepickerElement>;
            "bds-datepicker-period": LocalJSX.BdsDatepickerPeriod & JSXBase.HTMLAttributes<HTMLBdsDatepickerPeriodElement>;
            "bds-datepicker-single": LocalJSX.BdsDatepickerSingle & JSXBase.HTMLAttributes<HTMLBdsDatepickerSingleElement>;
            "bds-dropdown": LocalJSX.BdsDropdown & JSXBase.HTMLAttributes<HTMLBdsDropdownElement>;
            "bds-expansion-panel": LocalJSX.BdsExpansionPanel & JSXBase.HTMLAttributes<HTMLBdsExpansionPanelElement>;
            "bds-expansion-panel-body": LocalJSX.BdsExpansionPanelBody & JSXBase.HTMLAttributes<HTMLBdsExpansionPanelBodyElement>;
            "bds-expansion-panel-header": LocalJSX.BdsExpansionPanelHeader & JSXBase.HTMLAttributes<HTMLBdsExpansionPanelHeaderElement>;
            "bds-grid": LocalJSX.BdsGrid & JSXBase.HTMLAttributes<HTMLBdsGridElement>;
            "bds-icon": LocalJSX.BdsIcon & JSXBase.HTMLAttributes<HTMLBdsIconElement>;
            "bds-illustration": LocalJSX.BdsIllustration & JSXBase.HTMLAttributes<HTMLBdsIllustrationElement>;
            "bds-input": LocalJSX.BdsInput & JSXBase.HTMLAttributes<HTMLBdsInputElement>;
            "bds-input-chips": LocalJSX.BdsInputChips & JSXBase.HTMLAttributes<HTMLBdsInputChipsElement>;
            "bds-input-editable": LocalJSX.BdsInputEditable & JSXBase.HTMLAttributes<HTMLBdsInputEditableElement>;
            "bds-input-password": LocalJSX.BdsInputPassword & JSXBase.HTMLAttributes<HTMLBdsInputPasswordElement>;
            "bds-input-phone-number": LocalJSX.BdsInputPhoneNumber & JSXBase.HTMLAttributes<HTMLBdsInputPhoneNumberElement>;
            "bds-list": LocalJSX.BdsList & JSXBase.HTMLAttributes<HTMLBdsListElement>;
            "bds-list-item": LocalJSX.BdsListItem & JSXBase.HTMLAttributes<HTMLBdsListItemElement>;
            "bds-loading-bar": LocalJSX.BdsLoadingBar & JSXBase.HTMLAttributes<HTMLBdsLoadingBarElement>;
            "bds-loading-page": LocalJSX.BdsLoadingPage & JSXBase.HTMLAttributes<HTMLBdsLoadingPageElement>;
            "bds-loading-spinner": LocalJSX.BdsLoadingSpinner & JSXBase.HTMLAttributes<HTMLBdsLoadingSpinnerElement>;
            "bds-menu": LocalJSX.BdsMenu & JSXBase.HTMLAttributes<HTMLBdsMenuElement>;
            "bds-menu-action": LocalJSX.BdsMenuAction & JSXBase.HTMLAttributes<HTMLBdsMenuActionElement>;
            "bds-menu-exibition": LocalJSX.BdsMenuExibition & JSXBase.HTMLAttributes<HTMLBdsMenuExibitionElement>;
            "bds-menu-list": LocalJSX.BdsMenuList & JSXBase.HTMLAttributes<HTMLBdsMenuListElement>;
            "bds-menu-list-item": LocalJSX.BdsMenuListItem & JSXBase.HTMLAttributes<HTMLBdsMenuListItemElement>;
            "bds-menu-separation": LocalJSX.BdsMenuSeparation & JSXBase.HTMLAttributes<HTMLBdsMenuSeparationElement>;
            "bds-modal": LocalJSX.BdsModal & JSXBase.HTMLAttributes<HTMLBdsModalElement>;
            "bds-modal-action": LocalJSX.BdsModalAction & JSXBase.HTMLAttributes<HTMLBdsModalActionElement>;
            "bds-modal-close-button": LocalJSX.BdsModalCloseButton & JSXBase.HTMLAttributes<HTMLBdsModalCloseButtonElement>;
            "bds-navbar": LocalJSX.BdsNavbar & JSXBase.HTMLAttributes<HTMLBdsNavbarElement>;
            "bds-navbar-content": LocalJSX.BdsNavbarContent & JSXBase.HTMLAttributes<HTMLBdsNavbarContentElement>;
            "bds-pagination": LocalJSX.BdsPagination & JSXBase.HTMLAttributes<HTMLBdsPaginationElement>;
            "bds-paper": LocalJSX.BdsPaper & JSXBase.HTMLAttributes<HTMLBdsPaperElement>;
            "bds-progress-bar": LocalJSX.BdsProgressBar & JSXBase.HTMLAttributes<HTMLBdsProgressBarElement>;
            "bds-radio": LocalJSX.BdsRadio & JSXBase.HTMLAttributes<HTMLBdsRadioElement>;
            "bds-radio-group": LocalJSX.BdsRadioGroup & JSXBase.HTMLAttributes<HTMLBdsRadioGroupElement>;
            "bds-select": LocalJSX.BdsSelect & JSXBase.HTMLAttributes<HTMLBdsSelectElement>;
            "bds-select-chips": LocalJSX.BdsSelectChips & JSXBase.HTMLAttributes<HTMLBdsSelectChipsElement>;
            "bds-select-option": LocalJSX.BdsSelectOption & JSXBase.HTMLAttributes<HTMLBdsSelectOptionElement>;
            "bds-sidebar": LocalJSX.BdsSidebar & JSXBase.HTMLAttributes<HTMLBdsSidebarElement>;
            "bds-step": LocalJSX.BdsStep & JSXBase.HTMLAttributes<HTMLBdsStepElement>;
            "bds-stepper": LocalJSX.BdsStepper & JSXBase.HTMLAttributes<HTMLBdsStepperElement>;
            "bds-switch": LocalJSX.BdsSwitch & JSXBase.HTMLAttributes<HTMLBdsSwitchElement>;
            "bds-tab": LocalJSX.BdsTab & JSXBase.HTMLAttributes<HTMLBdsTabElement>;
            "bds-tab-group": LocalJSX.BdsTabGroup & JSXBase.HTMLAttributes<HTMLBdsTabGroupElement>;
            "bds-tab-item": LocalJSX.BdsTabItem & JSXBase.HTMLAttributes<HTMLBdsTabItemElement>;
            "bds-tab-panel": LocalJSX.BdsTabPanel & JSXBase.HTMLAttributes<HTMLBdsTabPanelElement>;
            "bds-table": LocalJSX.BdsTable & JSXBase.HTMLAttributes<HTMLBdsTableElement>;
            "bds-table-body": LocalJSX.BdsTableBody & JSXBase.HTMLAttributes<HTMLBdsTableBodyElement>;
            "bds-table-cell": LocalJSX.BdsTableCell & JSXBase.HTMLAttributes<HTMLBdsTableCellElement>;
            "bds-table-header": LocalJSX.BdsTableHeader & JSXBase.HTMLAttributes<HTMLBdsTableHeaderElement>;
            "bds-table-row": LocalJSX.BdsTableRow & JSXBase.HTMLAttributes<HTMLBdsTableRowElement>;
            "bds-table-th": LocalJSX.BdsTableTh & JSXBase.HTMLAttributes<HTMLBdsTableThElement>;
            "bds-tabs": LocalJSX.BdsTabs & JSXBase.HTMLAttributes<HTMLBdsTabsElement>;
            "bds-test-component": LocalJSX.BdsTestComponent & JSXBase.HTMLAttributes<HTMLBdsTestComponentElement>;
            "bds-theme-provider": LocalJSX.BdsThemeProvider & JSXBase.HTMLAttributes<HTMLBdsThemeProviderElement>;
            "bds-toast": LocalJSX.BdsToast & JSXBase.HTMLAttributes<HTMLBdsToastElement>;
            "bds-toast-container": LocalJSX.BdsToastContainer & JSXBase.HTMLAttributes<HTMLBdsToastContainerElement>;
            "bds-tooltip": LocalJSX.BdsTooltip & JSXBase.HTMLAttributes<HTMLBdsTooltipElement>;
            "bds-typo": LocalJSX.BdsTypo & JSXBase.HTMLAttributes<HTMLBdsTypoElement>;
            "bds-upload": LocalJSX.BdsUpload & JSXBase.HTMLAttributes<HTMLBdsUploadElement>;
            "bds-warning": LocalJSX.BdsWarning & JSXBase.HTMLAttributes<HTMLBdsWarningElement>;
        }
    }
}
