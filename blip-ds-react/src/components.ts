'use client';

/**
 * This file was automatically generated by the Stencil React Output Target.
 * Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
 */

/* eslint-disable */

import type { EventName, StencilReactComponent } from '@stencil/react-output-target/runtime';
import { createComponent } from '@stencil/react-output-target/runtime';
import { type AutocompleteChangeEventDetail, type AutocompleteMultiSelectedChangeEventDetail, type AutocompleteSelectedChangeEventDetail, type BdsAutocompleteCustomEvent, type BdsCheckboxCustomEvent, type BdsInputCustomEvent, type BdsInputEditableCustomEvent, type BdsInputPasswordCustomEvent, type BdsInputPhoneNumberCustomEvent, type BdsRichTextCustomEvent, type BdsSelectChipsCustomEvent, type BdsSelectCustomEvent, type BdsTabsCustomEvent, type InputEditableEventDetail, type Overflow, type SelectChangeEvent, type SelectChangeEventDetail } from "blip-ds";
import { BdsAccordionBody as BdsAccordionBodyElement, defineCustomElement as defineBdsAccordionBody } from "blip-ds/dist/components/bds-accordion-body.js";
import { BdsAccordionGroup as BdsAccordionGroupElement, defineCustomElement as defineBdsAccordionGroup } from "blip-ds/dist/components/bds-accordion-group.js";
import { BdsAccordionHeader as BdsAccordionHeaderElement, defineCustomElement as defineBdsAccordionHeader } from "blip-ds/dist/components/bds-accordion-header.js";
import { BdsAccordion as BdsAccordionElement, defineCustomElement as defineBdsAccordion } from "blip-ds/dist/components/bds-accordion.js";
import { BdsAlertActions as BdsAlertActionsElement, defineCustomElement as defineBdsAlertActions } from "blip-ds/dist/components/bds-alert-actions.js";
import { BdsAlertBody as BdsAlertBodyElement, defineCustomElement as defineBdsAlertBody } from "blip-ds/dist/components/bds-alert-body.js";
import { BdsAlertHeader as BdsAlertHeaderElement, defineCustomElement as defineBdsAlertHeader } from "blip-ds/dist/components/bds-alert-header.js";
import { BdsAlert as BdsAlertElement, defineCustomElement as defineBdsAlert } from "blip-ds/dist/components/bds-alert.js";
import { BdsAutocomplete as BdsAutocompleteElement, defineCustomElement as defineBdsAutocomplete } from "blip-ds/dist/components/bds-autocomplete.js";
import { BdsAvatarGroup as BdsAvatarGroupElement, defineCustomElement as defineBdsAvatarGroup } from "blip-ds/dist/components/bds-avatar-group.js";
import { BdsAvatar as BdsAvatarElement, defineCustomElement as defineBdsAvatar } from "blip-ds/dist/components/bds-avatar.js";
import { BdsBadge as BdsBadgeElement, defineCustomElement as defineBdsBadge } from "blip-ds/dist/components/bds-badge.js";
import { BdsBannerLink as BdsBannerLinkElement, defineCustomElement as defineBdsBannerLink } from "blip-ds/dist/components/bds-banner-link.js";
import { BdsBanner as BdsBannerElement, defineCustomElement as defineBdsBanner } from "blip-ds/dist/components/bds-banner.js";
import { BdsBreadcrumb as BdsBreadcrumbElement, defineCustomElement as defineBdsBreadcrumb } from "blip-ds/dist/components/bds-breadcrumb.js";
import { BdsButtonGroup as BdsButtonGroupElement, defineCustomElement as defineBdsButtonGroup } from "blip-ds/dist/components/bds-button-group.js";
import { BdsButtonIcon as BdsButtonIconElement, defineCustomElement as defineBdsButtonIcon } from "blip-ds/dist/components/bds-button-icon.js";
import { BdsButton as BdsButtonElement, defineCustomElement as defineBdsButton } from "blip-ds/dist/components/bds-button.js";
import { BdsCardBody as BdsCardBodyElement, defineCustomElement as defineBdsCardBody } from "blip-ds/dist/components/bds-card-body.js";
import { BdsCardColor as BdsCardColorElement, defineCustomElement as defineBdsCardColor } from "blip-ds/dist/components/bds-card-color.js";
import { BdsCardFooter as BdsCardFooterElement, defineCustomElement as defineBdsCardFooter } from "blip-ds/dist/components/bds-card-footer.js";
import { BdsCardHeader as BdsCardHeaderElement, defineCustomElement as defineBdsCardHeader } from "blip-ds/dist/components/bds-card-header.js";
import { BdsCardSubtitle as BdsCardSubtitleElement, defineCustomElement as defineBdsCardSubtitle } from "blip-ds/dist/components/bds-card-subtitle.js";
import { BdsCardTitle as BdsCardTitleElement, defineCustomElement as defineBdsCardTitle } from "blip-ds/dist/components/bds-card-title.js";
import { BdsCard as BdsCardElement, defineCustomElement as defineBdsCard } from "blip-ds/dist/components/bds-card.js";
import { BdsCarouselItem as BdsCarouselItemElement, defineCustomElement as defineBdsCarouselItem } from "blip-ds/dist/components/bds-carousel-item.js";
import { BdsCarousel as BdsCarouselElement, defineCustomElement as defineBdsCarousel } from "blip-ds/dist/components/bds-carousel.js";
import { BdsCheckbox as BdsCheckboxElement, defineCustomElement as defineBdsCheckbox } from "blip-ds/dist/components/bds-checkbox.js";
import { BdsChipClickable as BdsChipClickableElement, defineCustomElement as defineBdsChipClickable } from "blip-ds/dist/components/bds-chip-clickable.js";
import { BdsChipSelected as BdsChipSelectedElement, defineCustomElement as defineBdsChipSelected } from "blip-ds/dist/components/bds-chip-selected.js";
import { BdsChipTag as BdsChipTagElement, defineCustomElement as defineBdsChipTag } from "blip-ds/dist/components/bds-chip-tag.js";
import { BdsChip as BdsChipElement, defineCustomElement as defineBdsChip } from "blip-ds/dist/components/bds-chip.js";
import { BdsCounterText as BdsCounterTextElement, defineCustomElement as defineBdsCounterText } from "blip-ds/dist/components/bds-counter-text.js";
import { BdsDataTable as BdsDataTableElement, defineCustomElement as defineBdsDataTable } from "blip-ds/dist/components/bds-data-table.js";
import { BdsDatepickerPeriod as BdsDatepickerPeriodElement, defineCustomElement as defineBdsDatepickerPeriod } from "blip-ds/dist/components/bds-datepicker-period.js";
import { BdsDatepickerSingle as BdsDatepickerSingleElement, defineCustomElement as defineBdsDatepickerSingle } from "blip-ds/dist/components/bds-datepicker-single.js";
import { BdsDatepicker as BdsDatepickerElement, defineCustomElement as defineBdsDatepicker } from "blip-ds/dist/components/bds-datepicker.js";
import { BdsDivider as BdsDividerElement, defineCustomElement as defineBdsDivider } from "blip-ds/dist/components/bds-divider.js";
import { BdsDropdown as BdsDropdownElement, defineCustomElement as defineBdsDropdown } from "blip-ds/dist/components/bds-dropdown.js";
import { BdsExpansionPanelBody as BdsExpansionPanelBodyElement, defineCustomElement as defineBdsExpansionPanelBody } from "blip-ds/dist/components/bds-expansion-panel-body.js";
import { BdsExpansionPanelHeader as BdsExpansionPanelHeaderElement, defineCustomElement as defineBdsExpansionPanelHeader } from "blip-ds/dist/components/bds-expansion-panel-header.js";
import { BdsExpansionPanel as BdsExpansionPanelElement, defineCustomElement as defineBdsExpansionPanel } from "blip-ds/dist/components/bds-expansion-panel.js";
import { BdsGrid as BdsGridElement, defineCustomElement as defineBdsGrid } from "blip-ds/dist/components/bds-grid.js";
import { BdsIcon as BdsIconElement, defineCustomElement as defineBdsIcon } from "blip-ds/dist/components/bds-icon.js";
import { BdsIllustration as BdsIllustrationElement, defineCustomElement as defineBdsIllustration } from "blip-ds/dist/components/bds-illustration.js";
import { BdsImage as BdsImageElement, defineCustomElement as defineBdsImage } from "blip-ds/dist/components/bds-image.js";
import { BdsInputChips as BdsInputChipsElement, defineCustomElement as defineBdsInputChips } from "blip-ds/dist/components/bds-input-chips.js";
import { BdsInputEditable as BdsInputEditableElement, defineCustomElement as defineBdsInputEditable } from "blip-ds/dist/components/bds-input-editable.js";
import { BdsInputPassword as BdsInputPasswordElement, defineCustomElement as defineBdsInputPassword } from "blip-ds/dist/components/bds-input-password.js";
import { BdsInputPhoneNumber as BdsInputPhoneNumberElement, defineCustomElement as defineBdsInputPhoneNumber } from "blip-ds/dist/components/bds-input-phone-number.js";
import { BdsInput as BdsInputElement, defineCustomElement as defineBdsInput } from "blip-ds/dist/components/bds-input.js";
import { BdsListItemContent as BdsListItemContentElement, defineCustomElement as defineBdsListItemContent } from "blip-ds/dist/components/bds-list-item-content.js";
import { BdsListItem as BdsListItemElement, defineCustomElement as defineBdsListItem } from "blip-ds/dist/components/bds-list-item.js";
import { BdsList as BdsListElement, defineCustomElement as defineBdsList } from "blip-ds/dist/components/bds-list.js";
import { BdsLoadingBar as BdsLoadingBarElement, defineCustomElement as defineBdsLoadingBar } from "blip-ds/dist/components/bds-loading-bar.js";
import { BdsLoadingPage as BdsLoadingPageElement, defineCustomElement as defineBdsLoadingPage } from "blip-ds/dist/components/bds-loading-page.js";
import { BdsLoadingSpinner as BdsLoadingSpinnerElement, defineCustomElement as defineBdsLoadingSpinner } from "blip-ds/dist/components/bds-loading-spinner.js";
import { BdsMenuAction as BdsMenuActionElement, defineCustomElement as defineBdsMenuAction } from "blip-ds/dist/components/bds-menu-action.js";
import { BdsMenuExibition as BdsMenuExibitionElement, defineCustomElement as defineBdsMenuExibition } from "blip-ds/dist/components/bds-menu-exibition.js";
import { BdsMenuListItem as BdsMenuListItemElement, defineCustomElement as defineBdsMenuListItem } from "blip-ds/dist/components/bds-menu-list-item.js";
import { BdsMenuList as BdsMenuListElement, defineCustomElement as defineBdsMenuList } from "blip-ds/dist/components/bds-menu-list.js";
import { BdsMenuSeparation as BdsMenuSeparationElement, defineCustomElement as defineBdsMenuSeparation } from "blip-ds/dist/components/bds-menu-separation.js";
import { BdsMenu as BdsMenuElement, defineCustomElement as defineBdsMenu } from "blip-ds/dist/components/bds-menu.js";
import { BdsModalAction as BdsModalActionElement, defineCustomElement as defineBdsModalAction } from "blip-ds/dist/components/bds-modal-action.js";
import { BdsModalCloseButton as BdsModalCloseButtonElement, defineCustomElement as defineBdsModalCloseButton } from "blip-ds/dist/components/bds-modal-close-button.js";
import { BdsModal as BdsModalElement, defineCustomElement as defineBdsModal } from "blip-ds/dist/components/bds-modal.js";
import { BdsNavTreeGroup as BdsNavTreeGroupElement, defineCustomElement as defineBdsNavTreeGroup } from "blip-ds/dist/components/bds-nav-tree-group.js";
import { BdsNavTreeItem as BdsNavTreeItemElement, defineCustomElement as defineBdsNavTreeItem } from "blip-ds/dist/components/bds-nav-tree-item.js";
import { BdsNavTree as BdsNavTreeElement, defineCustomElement as defineBdsNavTree } from "blip-ds/dist/components/bds-nav-tree.js";
import { BdsNavbarContent as BdsNavbarContentElement, defineCustomElement as defineBdsNavbarContent } from "blip-ds/dist/components/bds-navbar-content.js";
import { BdsNavbar as BdsNavbarElement, defineCustomElement as defineBdsNavbar } from "blip-ds/dist/components/bds-navbar.js";
import { BdsPagination as BdsPaginationElement, defineCustomElement as defineBdsPagination } from "blip-ds/dist/components/bds-pagination.js";
import { BdsPaper as BdsPaperElement, defineCustomElement as defineBdsPaper } from "blip-ds/dist/components/bds-paper.js";
import { BdsProgressBar as BdsProgressBarElement, defineCustomElement as defineBdsProgressBar } from "blip-ds/dist/components/bds-progress-bar.js";
import { BdsRadioGroup as BdsRadioGroupElement, defineCustomElement as defineBdsRadioGroup } from "blip-ds/dist/components/bds-radio-group.js";
import { BdsRadio as BdsRadioElement, defineCustomElement as defineBdsRadio } from "blip-ds/dist/components/bds-radio.js";
import { BdsRichText as BdsRichTextElement, defineCustomElement as defineBdsRichText } from "blip-ds/dist/components/bds-rich-text.js";
import { BdsSelectChips as BdsSelectChipsElement, defineCustomElement as defineBdsSelectChips } from "blip-ds/dist/components/bds-select-chips.js";
import { BdsSelectOption as BdsSelectOptionElement, defineCustomElement as defineBdsSelectOption } from "blip-ds/dist/components/bds-select-option.js";
import { BdsSelect as BdsSelectElement, defineCustomElement as defineBdsSelect } from "blip-ds/dist/components/bds-select.js";
import { BdsSidebar as BdsSidebarElement, defineCustomElement as defineBdsSidebar } from "blip-ds/dist/components/bds-sidebar.js";
import { BdsSkeleton as BdsSkeletonElement, defineCustomElement as defineBdsSkeleton } from "blip-ds/dist/components/bds-skeleton.js";
import { BdsSlider as BdsSliderElement, defineCustomElement as defineBdsSlider } from "blip-ds/dist/components/bds-slider.js";
import { BdsStep as BdsStepElement, defineCustomElement as defineBdsStep } from "blip-ds/dist/components/bds-step.js";
import { BdsStepper as BdsStepperElement, defineCustomElement as defineBdsStepper } from "blip-ds/dist/components/bds-stepper.js";
import { BdsSwitch as BdsSwitchElement, defineCustomElement as defineBdsSwitch } from "blip-ds/dist/components/bds-switch.js";
import { BdsTabGroup as BdsTabGroupElement, defineCustomElement as defineBdsTabGroup } from "blip-ds/dist/components/bds-tab-group.js";
import { BdsTabItem as BdsTabItemElement, defineCustomElement as defineBdsTabItem } from "blip-ds/dist/components/bds-tab-item.js";
import { BdsTabPanel as BdsTabPanelElement, defineCustomElement as defineBdsTabPanel } from "blip-ds/dist/components/bds-tab-panel.js";
import { BdsTab as BdsTabElement, defineCustomElement as defineBdsTab } from "blip-ds/dist/components/bds-tab.js";
import { BdsTableBody as BdsTableBodyElement, defineCustomElement as defineBdsTableBody } from "blip-ds/dist/components/bds-table-body.js";
import { BdsTableCell as BdsTableCellElement, defineCustomElement as defineBdsTableCell } from "blip-ds/dist/components/bds-table-cell.js";
import { BdsTableHeader as BdsTableHeaderElement, defineCustomElement as defineBdsTableHeader } from "blip-ds/dist/components/bds-table-header.js";
import { BdsTableRow as BdsTableRowElement, defineCustomElement as defineBdsTableRow } from "blip-ds/dist/components/bds-table-row.js";
import { BdsTableTh as BdsTableThElement, defineCustomElement as defineBdsTableTh } from "blip-ds/dist/components/bds-table-th.js";
import { BdsTable as BdsTableElement, defineCustomElement as defineBdsTable } from "blip-ds/dist/components/bds-table.js";
import { BdsTabs as BdsTabsElement, defineCustomElement as defineBdsTabs } from "blip-ds/dist/components/bds-tabs.js";
import { BdsTestComponent as BdsTestComponentElement, defineCustomElement as defineBdsTestComponent } from "blip-ds/dist/components/bds-test-component.js";
import { BdsThemeProvider as BdsThemeProviderElement, defineCustomElement as defineBdsThemeProvider } from "blip-ds/dist/components/bds-theme-provider.js";
import { BdsToastContainer as BdsToastContainerElement, defineCustomElement as defineBdsToastContainer } from "blip-ds/dist/components/bds-toast-container.js";
import { BdsToast as BdsToastElement, defineCustomElement as defineBdsToast } from "blip-ds/dist/components/bds-toast.js";
import { BdsTooltip as BdsTooltipElement, defineCustomElement as defineBdsTooltip } from "blip-ds/dist/components/bds-tooltip.js";
import { BdsTypo as BdsTypoElement, defineCustomElement as defineBdsTypo } from "blip-ds/dist/components/bds-typo.js";
import { BdsUpload as BdsUploadElement, defineCustomElement as defineBdsUpload } from "blip-ds/dist/components/bds-upload.js";
import { BdsWarning as BdsWarningElement, defineCustomElement as defineBdsWarning } from "blip-ds/dist/components/bds-warning.js";
import React from 'react';

export type BdsAccordionEvents = {
    onBdsToggle: EventName<CustomEvent<any>>,
    onBdsAccordionOpen: EventName<CustomEvent<any>>,
    onBdsAccordionClose: EventName<CustomEvent<any>>
};

export const BdsAccordion: StencilReactComponent<BdsAccordionElement, BdsAccordionEvents> = /*@__PURE__*/ createComponent<BdsAccordionElement, BdsAccordionEvents>({
    tagName: 'bds-accordion',
    elementClass: BdsAccordionElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {
        onBdsToggle: 'bdsToggle',
        onBdsAccordionOpen: 'bdsAccordionOpen',
        onBdsAccordionClose: 'bdsAccordionClose'
    } as BdsAccordionEvents,
    defineCustomElement: defineBdsAccordion
});

export type BdsAccordionBodyEvents = NonNullable<unknown>;

export const BdsAccordionBody: StencilReactComponent<BdsAccordionBodyElement, BdsAccordionBodyEvents> = /*@__PURE__*/ createComponent<BdsAccordionBodyElement, BdsAccordionBodyEvents>({
    tagName: 'bds-accordion-body',
    elementClass: BdsAccordionBodyElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as BdsAccordionBodyEvents,
    defineCustomElement: defineBdsAccordionBody
});

export type BdsAccordionGroupEvents = {
    onBdsAccordionCloseAll: EventName<CustomEvent<any>>,
    onBdsAccordionOpenAll: EventName<CustomEvent<any>>
};

export const BdsAccordionGroup: StencilReactComponent<BdsAccordionGroupElement, BdsAccordionGroupEvents> = /*@__PURE__*/ createComponent<BdsAccordionGroupElement, BdsAccordionGroupEvents>({
    tagName: 'bds-accordion-group',
    elementClass: BdsAccordionGroupElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {
        onBdsAccordionCloseAll: 'bdsAccordionCloseAll',
        onBdsAccordionOpenAll: 'bdsAccordionOpenAll'
    } as BdsAccordionGroupEvents,
    defineCustomElement: defineBdsAccordionGroup
});

export type BdsAccordionHeaderEvents = NonNullable<unknown>;

export const BdsAccordionHeader: StencilReactComponent<BdsAccordionHeaderElement, BdsAccordionHeaderEvents> = /*@__PURE__*/ createComponent<BdsAccordionHeaderElement, BdsAccordionHeaderEvents>({
    tagName: 'bds-accordion-header',
    elementClass: BdsAccordionHeaderElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as BdsAccordionHeaderEvents,
    defineCustomElement: defineBdsAccordionHeader
});

export type BdsAlertEvents = { onBdsAlertChanged: EventName<CustomEvent<any>> };

export const BdsAlert: StencilReactComponent<BdsAlertElement, BdsAlertEvents> = /*@__PURE__*/ createComponent<BdsAlertElement, BdsAlertEvents>({
    tagName: 'bds-alert',
    elementClass: BdsAlertElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onBdsAlertChanged: 'bdsAlertChanged' } as BdsAlertEvents,
    defineCustomElement: defineBdsAlert
});

export type BdsAlertActionsEvents = NonNullable<unknown>;

export const BdsAlertActions: StencilReactComponent<BdsAlertActionsElement, BdsAlertActionsEvents> = /*@__PURE__*/ createComponent<BdsAlertActionsElement, BdsAlertActionsEvents>({
    tagName: 'bds-alert-actions',
    elementClass: BdsAlertActionsElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as BdsAlertActionsEvents,
    defineCustomElement: defineBdsAlertActions
});

export type BdsAlertBodyEvents = NonNullable<unknown>;

export const BdsAlertBody: StencilReactComponent<BdsAlertBodyElement, BdsAlertBodyEvents> = /*@__PURE__*/ createComponent<BdsAlertBodyElement, BdsAlertBodyEvents>({
    tagName: 'bds-alert-body',
    elementClass: BdsAlertBodyElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as BdsAlertBodyEvents,
    defineCustomElement: defineBdsAlertBody
});

export type BdsAlertHeaderEvents = NonNullable<unknown>;

export const BdsAlertHeader: StencilReactComponent<BdsAlertHeaderElement, BdsAlertHeaderEvents> = /*@__PURE__*/ createComponent<BdsAlertHeaderElement, BdsAlertHeaderEvents>({
    tagName: 'bds-alert-header',
    elementClass: BdsAlertHeaderElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as BdsAlertHeaderEvents,
    defineCustomElement: defineBdsAlertHeader
});

export type BdsAutocompleteEvents = {
    onBdsChange: EventName<BdsAutocompleteCustomEvent<AutocompleteChangeEventDetail>>,
    onBdsSelectedChange: EventName<BdsAutocompleteCustomEvent<AutocompleteSelectedChangeEventDetail>>,
    onBdsMultiselectedChange: EventName<BdsAutocompleteCustomEvent<AutocompleteMultiSelectedChangeEventDetail>>,
    onBdsInput: EventName<BdsAutocompleteCustomEvent<KeyboardEvent>>,
    onBdsCancel: EventName<BdsAutocompleteCustomEvent<AutocompleteChangeEventDetail>>,
    onBdsFocus: EventName<CustomEvent<void>>,
    onBdsBlur: EventName<CustomEvent<void>>
};

export const BdsAutocomplete: StencilReactComponent<BdsAutocompleteElement, BdsAutocompleteEvents> = /*@__PURE__*/ createComponent<BdsAutocompleteElement, BdsAutocompleteEvents>({
    tagName: 'bds-autocomplete',
    elementClass: BdsAutocompleteElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {
        onBdsChange: 'bdsChange',
        onBdsSelectedChange: 'bdsSelectedChange',
        onBdsMultiselectedChange: 'bdsMultiselectedChange',
        onBdsInput: 'bdsInput',
        onBdsCancel: 'bdsCancel',
        onBdsFocus: 'bdsFocus',
        onBdsBlur: 'bdsBlur'
    } as BdsAutocompleteEvents,
    defineCustomElement: defineBdsAutocomplete
});

export type BdsAvatarEvents = {
    onBdsClickAvatar: EventName<CustomEvent<any>>,
    onBdsImageUpload: EventName<CustomEvent<any>>
};

export const BdsAvatar: StencilReactComponent<BdsAvatarElement, BdsAvatarEvents> = /*@__PURE__*/ createComponent<BdsAvatarElement, BdsAvatarEvents>({
    tagName: 'bds-avatar',
    elementClass: BdsAvatarElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {
        onBdsClickAvatar: 'bdsClickAvatar',
        onBdsImageUpload: 'bdsImageUpload'
    } as BdsAvatarEvents,
    defineCustomElement: defineBdsAvatar
});

export type BdsAvatarGroupEvents = { onBdsClickAvatarGroup: EventName<CustomEvent<any>> };

export const BdsAvatarGroup: StencilReactComponent<BdsAvatarGroupElement, BdsAvatarGroupEvents> = /*@__PURE__*/ createComponent<BdsAvatarGroupElement, BdsAvatarGroupEvents>({
    tagName: 'bds-avatar-group',
    elementClass: BdsAvatarGroupElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onBdsClickAvatarGroup: 'bdsClickAvatarGroup' } as BdsAvatarGroupEvents,
    defineCustomElement: defineBdsAvatarGroup
});

export type BdsBadgeEvents = NonNullable<unknown>;

export const BdsBadge: StencilReactComponent<BdsBadgeElement, BdsBadgeEvents> = /*@__PURE__*/ createComponent<BdsBadgeElement, BdsBadgeEvents>({
    tagName: 'bds-badge',
    elementClass: BdsBadgeElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as BdsBadgeEvents,
    defineCustomElement: defineBdsBadge
});

export type BdsBannerEvents = { onBdsBannerClose: EventName<CustomEvent<any>> };

export const BdsBanner: StencilReactComponent<BdsBannerElement, BdsBannerEvents> = /*@__PURE__*/ createComponent<BdsBannerElement, BdsBannerEvents>({
    tagName: 'bds-banner',
    elementClass: BdsBannerElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onBdsBannerClose: 'bdsBannerClose' } as BdsBannerEvents,
    defineCustomElement: defineBdsBanner
});

export type BdsBannerLinkEvents = { onBdsBannerLink: EventName<CustomEvent<any>> };

export const BdsBannerLink: StencilReactComponent<BdsBannerLinkElement, BdsBannerLinkEvents> = /*@__PURE__*/ createComponent<BdsBannerLinkElement, BdsBannerLinkEvents>({
    tagName: 'bds-banner-link',
    elementClass: BdsBannerLinkElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onBdsBannerLink: 'bdsBannerLink' } as BdsBannerLinkEvents,
    defineCustomElement: defineBdsBannerLink
});

export type BdsBreadcrumbEvents = NonNullable<unknown>;

export const BdsBreadcrumb: StencilReactComponent<BdsBreadcrumbElement, BdsBreadcrumbEvents> = /*@__PURE__*/ createComponent<BdsBreadcrumbElement, BdsBreadcrumbEvents>({
    tagName: 'bds-breadcrumb',
    elementClass: BdsBreadcrumbElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as BdsBreadcrumbEvents,
    defineCustomElement: defineBdsBreadcrumb
});

export type BdsButtonEvents = { onBdsClick: EventName<CustomEvent<any>> };

export const BdsButton: StencilReactComponent<BdsButtonElement, BdsButtonEvents> = /*@__PURE__*/ createComponent<BdsButtonElement, BdsButtonEvents>({
    tagName: 'bds-button',
    elementClass: BdsButtonElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onBdsClick: 'bdsClick' } as BdsButtonEvents,
    defineCustomElement: defineBdsButton
});

export type BdsButtonGroupEvents = { onButtonSelected: EventName<CustomEvent<any>> };

export const BdsButtonGroup: StencilReactComponent<BdsButtonGroupElement, BdsButtonGroupEvents> = /*@__PURE__*/ createComponent<BdsButtonGroupElement, BdsButtonGroupEvents>({
    tagName: 'bds-button-group',
    elementClass: BdsButtonGroupElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onButtonSelected: 'buttonSelected' } as BdsButtonGroupEvents,
    defineCustomElement: defineBdsButtonGroup
});

export type BdsButtonIconEvents = { onBdsClick: EventName<CustomEvent<any>> };

export const BdsButtonIcon: StencilReactComponent<BdsButtonIconElement, BdsButtonIconEvents> = /*@__PURE__*/ createComponent<BdsButtonIconElement, BdsButtonIconEvents>({
    tagName: 'bds-button-icon',
    elementClass: BdsButtonIconElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onBdsClick: 'bdsClick' } as BdsButtonIconEvents,
    defineCustomElement: defineBdsButtonIcon
});

export type BdsCardEvents = { onBdsClick: EventName<CustomEvent<any>> };

export const BdsCard: StencilReactComponent<BdsCardElement, BdsCardEvents> = /*@__PURE__*/ createComponent<BdsCardElement, BdsCardEvents>({
    tagName: 'bds-card',
    elementClass: BdsCardElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onBdsClick: 'bdsClick' } as BdsCardEvents,
    defineCustomElement: defineBdsCard
});

export type BdsCardBodyEvents = NonNullable<unknown>;

export const BdsCardBody: StencilReactComponent<BdsCardBodyElement, BdsCardBodyEvents> = /*@__PURE__*/ createComponent<BdsCardBodyElement, BdsCardBodyEvents>({
    tagName: 'bds-card-body',
    elementClass: BdsCardBodyElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as BdsCardBodyEvents,
    defineCustomElement: defineBdsCardBody
});

export type BdsCardColorEvents = NonNullable<unknown>;

export const BdsCardColor: StencilReactComponent<BdsCardColorElement, BdsCardColorEvents> = /*@__PURE__*/ createComponent<BdsCardColorElement, BdsCardColorEvents>({
    tagName: 'bds-card-color',
    elementClass: BdsCardColorElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as BdsCardColorEvents,
    defineCustomElement: defineBdsCardColor
});

export type BdsCardFooterEvents = NonNullable<unknown>;

export const BdsCardFooter: StencilReactComponent<BdsCardFooterElement, BdsCardFooterEvents> = /*@__PURE__*/ createComponent<BdsCardFooterElement, BdsCardFooterEvents>({
    tagName: 'bds-card-footer',
    elementClass: BdsCardFooterElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as BdsCardFooterEvents,
    defineCustomElement: defineBdsCardFooter
});

export type BdsCardHeaderEvents = NonNullable<unknown>;

export const BdsCardHeader: StencilReactComponent<BdsCardHeaderElement, BdsCardHeaderEvents> = /*@__PURE__*/ createComponent<BdsCardHeaderElement, BdsCardHeaderEvents>({
    tagName: 'bds-card-header',
    elementClass: BdsCardHeaderElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as BdsCardHeaderEvents,
    defineCustomElement: defineBdsCardHeader
});

export type BdsCardSubtitleEvents = NonNullable<unknown>;

export const BdsCardSubtitle: StencilReactComponent<BdsCardSubtitleElement, BdsCardSubtitleEvents> = /*@__PURE__*/ createComponent<BdsCardSubtitleElement, BdsCardSubtitleEvents>({
    tagName: 'bds-card-subtitle',
    elementClass: BdsCardSubtitleElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as BdsCardSubtitleEvents,
    defineCustomElement: defineBdsCardSubtitle
});

export type BdsCardTitleEvents = NonNullable<unknown>;

export const BdsCardTitle: StencilReactComponent<BdsCardTitleElement, BdsCardTitleEvents> = /*@__PURE__*/ createComponent<BdsCardTitleElement, BdsCardTitleEvents>({
    tagName: 'bds-card-title',
    elementClass: BdsCardTitleElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as BdsCardTitleEvents,
    defineCustomElement: defineBdsCardTitle
});

export type BdsCarouselEvents = { onBdsChangeCarousel: EventName<CustomEvent<any>> };

export const BdsCarousel: StencilReactComponent<BdsCarouselElement, BdsCarouselEvents> = /*@__PURE__*/ createComponent<BdsCarouselElement, BdsCarouselEvents>({
    tagName: 'bds-carousel',
    elementClass: BdsCarouselElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onBdsChangeCarousel: 'bdsChangeCarousel' } as BdsCarouselEvents,
    defineCustomElement: defineBdsCarousel
});

export type BdsCarouselItemEvents = NonNullable<unknown>;

export const BdsCarouselItem: StencilReactComponent<BdsCarouselItemElement, BdsCarouselItemEvents> = /*@__PURE__*/ createComponent<BdsCarouselItemElement, BdsCarouselItemEvents>({
    tagName: 'bds-carousel-item',
    elementClass: BdsCarouselItemElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as BdsCarouselItemEvents,
    defineCustomElement: defineBdsCarouselItem
});

export type BdsCheckboxEvents = {
    onBdsChange: EventName<CustomEvent<any>>,
    onBdsInput: EventName<BdsCheckboxCustomEvent<KeyboardEvent>>
};

export const BdsCheckbox: StencilReactComponent<BdsCheckboxElement, BdsCheckboxEvents> = /*@__PURE__*/ createComponent<BdsCheckboxElement, BdsCheckboxEvents>({
    tagName: 'bds-checkbox',
    elementClass: BdsCheckboxElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {
        onBdsChange: 'bdsChange',
        onBdsInput: 'bdsInput'
    } as BdsCheckboxEvents,
    defineCustomElement: defineBdsCheckbox
});

export type BdsChipEvents = { onBdsDelete: EventName<CustomEvent<any>> };

export const BdsChip: StencilReactComponent<BdsChipElement, BdsChipEvents> = /*@__PURE__*/ createComponent<BdsChipElement, BdsChipEvents>({
    tagName: 'bds-chip',
    elementClass: BdsChipElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onBdsDelete: 'bdsDelete' } as BdsChipEvents,
    defineCustomElement: defineBdsChip
});

export type BdsChipClickableEvents = {
    onChipClickableClose: EventName<CustomEvent<any>>,
    onChipClickableClick: EventName<CustomEvent<any>>
};

export const BdsChipClickable: StencilReactComponent<BdsChipClickableElement, BdsChipClickableEvents> = /*@__PURE__*/ createComponent<BdsChipClickableElement, BdsChipClickableEvents>({
    tagName: 'bds-chip-clickable',
    elementClass: BdsChipClickableElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {
        onChipClickableClose: 'chipClickableClose',
        onChipClickableClick: 'chipClickableClick'
    } as BdsChipClickableEvents,
    defineCustomElement: defineBdsChipClickable
});

export type BdsChipSelectedEvents = { onChipClick: EventName<CustomEvent<any>> };

export const BdsChipSelected: StencilReactComponent<BdsChipSelectedElement, BdsChipSelectedEvents> = /*@__PURE__*/ createComponent<BdsChipSelectedElement, BdsChipSelectedEvents>({
    tagName: 'bds-chip-selected',
    elementClass: BdsChipSelectedElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onChipClick: 'chipClick' } as BdsChipSelectedEvents,
    defineCustomElement: defineBdsChipSelected
});

export type BdsChipTagEvents = NonNullable<unknown>;

export const BdsChipTag: StencilReactComponent<BdsChipTagElement, BdsChipTagEvents> = /*@__PURE__*/ createComponent<BdsChipTagElement, BdsChipTagEvents>({
    tagName: 'bds-chip-tag',
    elementClass: BdsChipTagElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as BdsChipTagEvents,
    defineCustomElement: defineBdsChipTag
});

export type BdsCounterTextEvents = NonNullable<unknown>;

export const BdsCounterText: StencilReactComponent<BdsCounterTextElement, BdsCounterTextEvents> = /*@__PURE__*/ createComponent<BdsCounterTextElement, BdsCounterTextEvents>({
    tagName: 'bds-counter-text',
    elementClass: BdsCounterTextElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as BdsCounterTextEvents,
    defineCustomElement: defineBdsCounterText
});

export type BdsDataTableEvents = {
    onBdsTableClick: EventName<CustomEvent<any>>,
    onBdsTableDelete: EventName<CustomEvent<any>>,
    onBdsTableChange: EventName<CustomEvent<any>>
};

export const BdsDataTable: StencilReactComponent<BdsDataTableElement, BdsDataTableEvents> = /*@__PURE__*/ createComponent<BdsDataTableElement, BdsDataTableEvents>({
    tagName: 'bds-data-table',
    elementClass: BdsDataTableElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {
        onBdsTableClick: 'bdsTableClick',
        onBdsTableDelete: 'bdsTableDelete',
        onBdsTableChange: 'bdsTableChange'
    } as BdsDataTableEvents,
    defineCustomElement: defineBdsDataTable
});

export type BdsDatepickerEvents = {
    onBdsStartDate: EventName<CustomEvent<any>>,
    onBdsEndDate: EventName<CustomEvent<any>>,
    onConcludeDatepicker: EventName<CustomEvent<any>>,
    onEmptyConcludeDatepicker: EventName<CustomEvent<any>>
};

export const BdsDatepicker: StencilReactComponent<BdsDatepickerElement, BdsDatepickerEvents> = /*@__PURE__*/ createComponent<BdsDatepickerElement, BdsDatepickerEvents>({
    tagName: 'bds-datepicker',
    elementClass: BdsDatepickerElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {
        onBdsStartDate: 'bdsStartDate',
        onBdsEndDate: 'bdsEndDate',
        onConcludeDatepicker: 'concludeDatepicker',
        onEmptyConcludeDatepicker: 'emptyConcludeDatepicker'
    } as BdsDatepickerEvents,
    defineCustomElement: defineBdsDatepicker
});

export type BdsDatepickerPeriodEvents = {
    onBdsStartDate: EventName<CustomEvent<any>>,
    onBdsEndDate: EventName<CustomEvent<any>>,
    onBdsClickDayButton: EventName<CustomEvent<any>>
};

export const BdsDatepickerPeriod: StencilReactComponent<BdsDatepickerPeriodElement, BdsDatepickerPeriodEvents> = /*@__PURE__*/ createComponent<BdsDatepickerPeriodElement, BdsDatepickerPeriodEvents>({
    tagName: 'bds-datepicker-period',
    elementClass: BdsDatepickerPeriodElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {
        onBdsStartDate: 'bdsStartDate',
        onBdsEndDate: 'bdsEndDate',
        onBdsClickDayButton: 'bdsClickDayButton'
    } as BdsDatepickerPeriodEvents,
    defineCustomElement: defineBdsDatepickerPeriod
});

export type BdsDatepickerSingleEvents = { onBdsDateSelected: EventName<CustomEvent<any>> };

export const BdsDatepickerSingle: StencilReactComponent<BdsDatepickerSingleElement, BdsDatepickerSingleEvents> = /*@__PURE__*/ createComponent<BdsDatepickerSingleElement, BdsDatepickerSingleEvents>({
    tagName: 'bds-datepicker-single',
    elementClass: BdsDatepickerSingleElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onBdsDateSelected: 'bdsDateSelected' } as BdsDatepickerSingleEvents,
    defineCustomElement: defineBdsDatepickerSingle
});

export type BdsDividerEvents = NonNullable<unknown>;

export const BdsDivider: StencilReactComponent<BdsDividerElement, BdsDividerEvents> = /*@__PURE__*/ createComponent<BdsDividerElement, BdsDividerEvents>({
    tagName: 'bds-divider',
    elementClass: BdsDividerElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as BdsDividerEvents,
    defineCustomElement: defineBdsDivider
});

export type BdsDropdownEvents = { onBdsToggle: EventName<CustomEvent<any>> };

export const BdsDropdown: StencilReactComponent<BdsDropdownElement, BdsDropdownEvents> = /*@__PURE__*/ createComponent<BdsDropdownElement, BdsDropdownEvents>({
    tagName: 'bds-dropdown',
    elementClass: BdsDropdownElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onBdsToggle: 'bdsToggle' } as BdsDropdownEvents,
    defineCustomElement: defineBdsDropdown
});

export type BdsExpansionPanelEvents = NonNullable<unknown>;

export const BdsExpansionPanel: StencilReactComponent<BdsExpansionPanelElement, BdsExpansionPanelEvents> = /*@__PURE__*/ createComponent<BdsExpansionPanelElement, BdsExpansionPanelEvents>({
    tagName: 'bds-expansion-panel',
    elementClass: BdsExpansionPanelElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as BdsExpansionPanelEvents,
    defineCustomElement: defineBdsExpansionPanel
});

export type BdsExpansionPanelBodyEvents = NonNullable<unknown>;

export const BdsExpansionPanelBody: StencilReactComponent<BdsExpansionPanelBodyElement, BdsExpansionPanelBodyEvents> = /*@__PURE__*/ createComponent<BdsExpansionPanelBodyElement, BdsExpansionPanelBodyEvents>({
    tagName: 'bds-expansion-panel-body',
    elementClass: BdsExpansionPanelBodyElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as BdsExpansionPanelBodyEvents,
    defineCustomElement: defineBdsExpansionPanelBody
});

export type BdsExpansionPanelHeaderEvents = NonNullable<unknown>;

export const BdsExpansionPanelHeader: StencilReactComponent<BdsExpansionPanelHeaderElement, BdsExpansionPanelHeaderEvents> = /*@__PURE__*/ createComponent<BdsExpansionPanelHeaderElement, BdsExpansionPanelHeaderEvents>({
    tagName: 'bds-expansion-panel-header',
    elementClass: BdsExpansionPanelHeaderElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as BdsExpansionPanelHeaderEvents,
    defineCustomElement: defineBdsExpansionPanelHeader
});

export type BdsGridEvents = NonNullable<unknown>;

export const BdsGrid: StencilReactComponent<BdsGridElement, BdsGridEvents> = /*@__PURE__*/ createComponent<BdsGridElement, BdsGridEvents>({
    tagName: 'bds-grid',
    elementClass: BdsGridElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as BdsGridEvents,
    defineCustomElement: defineBdsGrid
});

export type BdsIconEvents = NonNullable<unknown>;

export const BdsIcon: StencilReactComponent<BdsIconElement, BdsIconEvents> = /*@__PURE__*/ createComponent<BdsIconElement, BdsIconEvents>({
    tagName: 'bds-icon',
    elementClass: BdsIconElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as BdsIconEvents,
    defineCustomElement: defineBdsIcon
});

export type BdsIllustrationEvents = NonNullable<unknown>;

export const BdsIllustration: StencilReactComponent<BdsIllustrationElement, BdsIllustrationEvents> = /*@__PURE__*/ createComponent<BdsIllustrationElement, BdsIllustrationEvents>({
    tagName: 'bds-illustration',
    elementClass: BdsIllustrationElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as BdsIllustrationEvents,
    defineCustomElement: defineBdsIllustration
});

export type BdsImageEvents = NonNullable<unknown>;

export const BdsImage: StencilReactComponent<BdsImageElement, BdsImageEvents> = /*@__PURE__*/ createComponent<BdsImageElement, BdsImageEvents>({
    tagName: 'bds-image',
    elementClass: BdsImageElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as BdsImageEvents,
    defineCustomElement: defineBdsImage
});

export type BdsInputEvents = {
    onBdsChange: EventName<CustomEvent<any>>,
    onBdsInput: EventName<BdsInputCustomEvent<KeyboardEvent>>,
    onBdsOnBlur: EventName<CustomEvent<any>>,
    onBdsFocus: EventName<CustomEvent<any>>,
    onBdsSubmit: EventName<CustomEvent<any>>,
    onBdsPatternValidation: EventName<CustomEvent<any>>,
    onBdsKeyDownBackspace: EventName<CustomEvent<any>>
};

export const BdsInput: StencilReactComponent<BdsInputElement, BdsInputEvents> = /*@__PURE__*/ createComponent<BdsInputElement, BdsInputEvents>({
    tagName: 'bds-input',
    elementClass: BdsInputElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {
        onBdsChange: 'bdsChange',
        onBdsInput: 'bdsInput',
        onBdsOnBlur: 'bdsOnBlur',
        onBdsFocus: 'bdsFocus',
        onBdsSubmit: 'bdsSubmit',
        onBdsPatternValidation: 'bdsPatternValidation',
        onBdsKeyDownBackspace: 'bdsKeyDownBackspace'
    } as BdsInputEvents,
    defineCustomElement: defineBdsInput
});

export type BdsInputChipsEvents = {
    onBdsChange: EventName<CustomEvent<any>>,
    onBdsChangeChips: EventName<CustomEvent<any>>,
    onBdsInputChipsFocus: EventName<CustomEvent<any>>,
    onBdsBlur: EventName<CustomEvent<any>>,
    onBdsInputChipsInput: EventName<CustomEvent<any>>,
    onBdsExtendedQuantityInput: EventName<CustomEvent<any>>,
    onBdsSubmit: EventName<CustomEvent<any>>
};

export const BdsInputChips: StencilReactComponent<BdsInputChipsElement, BdsInputChipsEvents> = /*@__PURE__*/ createComponent<BdsInputChipsElement, BdsInputChipsEvents>({
    tagName: 'bds-input-chips',
    elementClass: BdsInputChipsElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {
        onBdsChange: 'bdsChange',
        onBdsChangeChips: 'bdsChangeChips',
        onBdsInputChipsFocus: 'bdsInputChipsFocus',
        onBdsBlur: 'bdsBlur',
        onBdsInputChipsInput: 'bdsInputChipsInput',
        onBdsExtendedQuantityInput: 'bdsExtendedQuantityInput',
        onBdsSubmit: 'bdsSubmit'
    } as BdsInputChipsEvents,
    defineCustomElement: defineBdsInputChips
});

export type BdsInputEditableEvents = {
    onBdsInputEditableSave: EventName<BdsInputEditableCustomEvent<InputEditableEventDetail>>,
    onBdsChange: EventName<BdsInputEditableCustomEvent<InputEditableEventDetail>>,
    onBdsInput: EventName<BdsInputEditableCustomEvent<KeyboardEvent>>,
    onBdsCancel: EventName<CustomEvent<void>>,
    onBdsFocus: EventName<CustomEvent<void>>,
    onBdsBlur: EventName<CustomEvent<void>>
};

export const BdsInputEditable: StencilReactComponent<BdsInputEditableElement, BdsInputEditableEvents> = /*@__PURE__*/ createComponent<BdsInputEditableElement, BdsInputEditableEvents>({
    tagName: 'bds-input-editable',
    elementClass: BdsInputEditableElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {
        onBdsInputEditableSave: 'bdsInputEditableSave',
        onBdsChange: 'bdsChange',
        onBdsInput: 'bdsInput',
        onBdsCancel: 'bdsCancel',
        onBdsFocus: 'bdsFocus',
        onBdsBlur: 'bdsBlur'
    } as BdsInputEditableEvents,
    defineCustomElement: defineBdsInputEditable
});

export type BdsInputPasswordEvents = {
    onBdsInputPasswordChange: EventName<CustomEvent<any>>,
    onBdsInputPasswordInput: EventName<BdsInputPasswordCustomEvent<KeyboardEvent>>,
    onBdsInputPasswordBlur: EventName<CustomEvent<any>>,
    onBdsInputPasswordFocus: EventName<CustomEvent<any>>,
    onBdsInputPasswordSubmit: EventName<CustomEvent<any>>,
    onBdsKeyDownBackspace: EventName<CustomEvent<any>>
};

export const BdsInputPassword: StencilReactComponent<BdsInputPasswordElement, BdsInputPasswordEvents> = /*@__PURE__*/ createComponent<BdsInputPasswordElement, BdsInputPasswordEvents>({
    tagName: 'bds-input-password',
    elementClass: BdsInputPasswordElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {
        onBdsInputPasswordChange: 'bdsInputPasswordChange',
        onBdsInputPasswordInput: 'bdsInputPasswordInput',
        onBdsInputPasswordBlur: 'bdsInputPasswordBlur',
        onBdsInputPasswordFocus: 'bdsInputPasswordFocus',
        onBdsInputPasswordSubmit: 'bdsInputPasswordSubmit',
        onBdsKeyDownBackspace: 'bdsKeyDownBackspace'
    } as BdsInputPasswordEvents,
    defineCustomElement: defineBdsInputPassword
});

export type BdsInputPhoneNumberEvents = {
    onBdsPhoneNumberChange: EventName<CustomEvent<any>>,
    onBdsInput: EventName<BdsInputPhoneNumberCustomEvent<KeyboardEvent>>,
    onBdsCancel: EventName<CustomEvent<void>>,
    onBdsFocus: EventName<CustomEvent<void>>,
    onBdsBlur: EventName<CustomEvent<void>>
};

export const BdsInputPhoneNumber: StencilReactComponent<BdsInputPhoneNumberElement, BdsInputPhoneNumberEvents> = /*@__PURE__*/ createComponent<BdsInputPhoneNumberElement, BdsInputPhoneNumberEvents>({
    tagName: 'bds-input-phone-number',
    elementClass: BdsInputPhoneNumberElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {
        onBdsPhoneNumberChange: 'bdsPhoneNumberChange',
        onBdsInput: 'bdsInput',
        onBdsCancel: 'bdsCancel',
        onBdsFocus: 'bdsFocus',
        onBdsBlur: 'bdsBlur'
    } as BdsInputPhoneNumberEvents,
    defineCustomElement: defineBdsInputPhoneNumber
});

export type BdsListEvents = {
    onBdsListCheckboxChange: EventName<CustomEvent<any>>,
    onBdsListRadioChange: EventName<CustomEvent<any>>,
    onBdsListSwitchChange: EventName<CustomEvent<any>>,
    onBdsClickActionsButtons: EventName<CustomEvent<any>>
};

export const BdsList: StencilReactComponent<BdsListElement, BdsListEvents> = /*@__PURE__*/ createComponent<BdsListElement, BdsListEvents>({
    tagName: 'bds-list',
    elementClass: BdsListElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {
        onBdsListCheckboxChange: 'bdsListCheckboxChange',
        onBdsListRadioChange: 'bdsListRadioChange',
        onBdsListSwitchChange: 'bdsListSwitchChange',
        onBdsClickActionsButtons: 'bdsClickActionsButtons'
    } as BdsListEvents,
    defineCustomElement: defineBdsList
});

export type BdsListItemEvents = {
    onBdsChecked: EventName<CustomEvent<any>>,
    onBdsClickActionButtom: EventName<CustomEvent<any>>
};

export const BdsListItem: StencilReactComponent<BdsListItemElement, BdsListItemEvents> = /*@__PURE__*/ createComponent<BdsListItemElement, BdsListItemEvents>({
    tagName: 'bds-list-item',
    elementClass: BdsListItemElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {
        onBdsChecked: 'bdsChecked',
        onBdsClickActionButtom: 'bdsClickActionButtom'
    } as BdsListItemEvents,
    defineCustomElement: defineBdsListItem
});

export type BdsListItemContentEvents = NonNullable<unknown>;

export const BdsListItemContent: StencilReactComponent<BdsListItemContentElement, BdsListItemContentEvents> = /*@__PURE__*/ createComponent<BdsListItemContentElement, BdsListItemContentEvents>({
    tagName: 'bds-list-item-content',
    elementClass: BdsListItemContentElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as BdsListItemContentEvents,
    defineCustomElement: defineBdsListItemContent
});

export type BdsLoadingBarEvents = NonNullable<unknown>;

export const BdsLoadingBar: StencilReactComponent<BdsLoadingBarElement, BdsLoadingBarEvents> = /*@__PURE__*/ createComponent<BdsLoadingBarElement, BdsLoadingBarEvents>({
    tagName: 'bds-loading-bar',
    elementClass: BdsLoadingBarElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as BdsLoadingBarEvents,
    defineCustomElement: defineBdsLoadingBar
});

export type BdsLoadingPageEvents = NonNullable<unknown>;

export const BdsLoadingPage: StencilReactComponent<BdsLoadingPageElement, BdsLoadingPageEvents> = /*@__PURE__*/ createComponent<BdsLoadingPageElement, BdsLoadingPageEvents>({
    tagName: 'bds-loading-page',
    elementClass: BdsLoadingPageElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as BdsLoadingPageEvents,
    defineCustomElement: defineBdsLoadingPage
});

export type BdsLoadingSpinnerEvents = NonNullable<unknown>;

export const BdsLoadingSpinner: StencilReactComponent<BdsLoadingSpinnerElement, BdsLoadingSpinnerEvents> = /*@__PURE__*/ createComponent<BdsLoadingSpinnerElement, BdsLoadingSpinnerEvents>({
    tagName: 'bds-loading-spinner',
    elementClass: BdsLoadingSpinnerElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as BdsLoadingSpinnerEvents,
    defineCustomElement: defineBdsLoadingSpinner
});

export type BdsMenuEvents = { onBdsToggle: EventName<CustomEvent<any>> };

export const BdsMenu: StencilReactComponent<BdsMenuElement, BdsMenuEvents> = /*@__PURE__*/ createComponent<BdsMenuElement, BdsMenuEvents>({
    tagName: 'bds-menu',
    elementClass: BdsMenuElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onBdsToggle: 'bdsToggle' } as BdsMenuEvents,
    defineCustomElement: defineBdsMenu
});

export type BdsMenuActionEvents = NonNullable<unknown>;

export const BdsMenuAction: StencilReactComponent<BdsMenuActionElement, BdsMenuActionEvents> = /*@__PURE__*/ createComponent<BdsMenuActionElement, BdsMenuActionEvents>({
    tagName: 'bds-menu-action',
    elementClass: BdsMenuActionElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as BdsMenuActionEvents,
    defineCustomElement: defineBdsMenuAction
});

export type BdsMenuExibitionEvents = NonNullable<unknown>;

export const BdsMenuExibition: StencilReactComponent<BdsMenuExibitionElement, BdsMenuExibitionEvents> = /*@__PURE__*/ createComponent<BdsMenuExibitionElement, BdsMenuExibitionEvents>({
    tagName: 'bds-menu-exibition',
    elementClass: BdsMenuExibitionElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as BdsMenuExibitionEvents,
    defineCustomElement: defineBdsMenuExibition
});

export type BdsMenuListEvents = NonNullable<unknown>;

export const BdsMenuList: StencilReactComponent<BdsMenuListElement, BdsMenuListEvents> = /*@__PURE__*/ createComponent<BdsMenuListElement, BdsMenuListEvents>({
    tagName: 'bds-menu-list',
    elementClass: BdsMenuListElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as BdsMenuListEvents,
    defineCustomElement: defineBdsMenuList
});

export type BdsMenuListItemEvents = NonNullable<unknown>;

export const BdsMenuListItem: StencilReactComponent<BdsMenuListItemElement, BdsMenuListItemEvents> = /*@__PURE__*/ createComponent<BdsMenuListItemElement, BdsMenuListItemEvents>({
    tagName: 'bds-menu-list-item',
    elementClass: BdsMenuListItemElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as BdsMenuListItemEvents,
    defineCustomElement: defineBdsMenuListItem
});

export type BdsMenuSeparationEvents = NonNullable<unknown>;

export const BdsMenuSeparation: StencilReactComponent<BdsMenuSeparationElement, BdsMenuSeparationEvents> = /*@__PURE__*/ createComponent<BdsMenuSeparationElement, BdsMenuSeparationEvents>({
    tagName: 'bds-menu-separation',
    elementClass: BdsMenuSeparationElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as BdsMenuSeparationEvents,
    defineCustomElement: defineBdsMenuSeparation
});

export type BdsModalEvents = { onBdsModalChanged: EventName<CustomEvent<any>> };

export const BdsModal: StencilReactComponent<BdsModalElement, BdsModalEvents> = /*@__PURE__*/ createComponent<BdsModalElement, BdsModalEvents>({
    tagName: 'bds-modal',
    elementClass: BdsModalElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onBdsModalChanged: 'bdsModalChanged' } as BdsModalEvents,
    defineCustomElement: defineBdsModal
});

export type BdsModalActionEvents = NonNullable<unknown>;

export const BdsModalAction: StencilReactComponent<BdsModalActionElement, BdsModalActionEvents> = /*@__PURE__*/ createComponent<BdsModalActionElement, BdsModalActionEvents>({
    tagName: 'bds-modal-action',
    elementClass: BdsModalActionElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as BdsModalActionEvents,
    defineCustomElement: defineBdsModalAction
});

export type BdsModalCloseButtonEvents = NonNullable<unknown>;

export const BdsModalCloseButton: StencilReactComponent<BdsModalCloseButtonElement, BdsModalCloseButtonEvents> = /*@__PURE__*/ createComponent<BdsModalCloseButtonElement, BdsModalCloseButtonEvents>({
    tagName: 'bds-modal-close-button',
    elementClass: BdsModalCloseButtonElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as BdsModalCloseButtonEvents,
    defineCustomElement: defineBdsModalCloseButton
});

export type BdsNavTreeEvents = { onBdsToogleChange: EventName<CustomEvent<any>> };

export const BdsNavTree: StencilReactComponent<BdsNavTreeElement, BdsNavTreeEvents> = /*@__PURE__*/ createComponent<BdsNavTreeElement, BdsNavTreeEvents>({
    tagName: 'bds-nav-tree',
    elementClass: BdsNavTreeElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onBdsToogleChange: 'bdsToogleChange' } as BdsNavTreeEvents,
    defineCustomElement: defineBdsNavTree
});

export type BdsNavTreeGroupEvents = {
    onBdsNavTreeGroupCloseAll: EventName<CustomEvent<any>>,
    onBdsNavTreeGroupOpenAll: EventName<CustomEvent<any>>
};

export const BdsNavTreeGroup: StencilReactComponent<BdsNavTreeGroupElement, BdsNavTreeGroupEvents> = /*@__PURE__*/ createComponent<BdsNavTreeGroupElement, BdsNavTreeGroupEvents>({
    tagName: 'bds-nav-tree-group',
    elementClass: BdsNavTreeGroupElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {
        onBdsNavTreeGroupCloseAll: 'bdsNavTreeGroupCloseAll',
        onBdsNavTreeGroupOpenAll: 'bdsNavTreeGroupOpenAll'
    } as BdsNavTreeGroupEvents,
    defineCustomElement: defineBdsNavTreeGroup
});

export type BdsNavTreeItemEvents = { onBdsToogleChange: EventName<CustomEvent<any>> };

export const BdsNavTreeItem: StencilReactComponent<BdsNavTreeItemElement, BdsNavTreeItemEvents> = /*@__PURE__*/ createComponent<BdsNavTreeItemElement, BdsNavTreeItemEvents>({
    tagName: 'bds-nav-tree-item',
    elementClass: BdsNavTreeItemElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onBdsToogleChange: 'bdsToogleChange' } as BdsNavTreeItemEvents,
    defineCustomElement: defineBdsNavTreeItem
});

export type BdsNavbarEvents = NonNullable<unknown>;

export const BdsNavbar: StencilReactComponent<BdsNavbarElement, BdsNavbarEvents> = /*@__PURE__*/ createComponent<BdsNavbarElement, BdsNavbarEvents>({
    tagName: 'bds-navbar',
    elementClass: BdsNavbarElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as BdsNavbarEvents,
    defineCustomElement: defineBdsNavbar
});

export type BdsNavbarContentEvents = NonNullable<unknown>;

export const BdsNavbarContent: StencilReactComponent<BdsNavbarContentElement, BdsNavbarContentEvents> = /*@__PURE__*/ createComponent<BdsNavbarContentElement, BdsNavbarContentEvents>({
    tagName: 'bds-navbar-content',
    elementClass: BdsNavbarContentElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as BdsNavbarContentEvents,
    defineCustomElement: defineBdsNavbarContent
});

export type BdsPaginationEvents = {
    onBdsPaginationChange: EventName<CustomEvent<any>>,
    onBdsItemsPerPageChange: EventName<CustomEvent<any>>
};

export const BdsPagination: StencilReactComponent<BdsPaginationElement, BdsPaginationEvents> = /*@__PURE__*/ createComponent<BdsPaginationElement, BdsPaginationEvents>({
    tagName: 'bds-pagination',
    elementClass: BdsPaginationElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {
        onBdsPaginationChange: 'bdsPaginationChange',
        onBdsItemsPerPageChange: 'bdsItemsPerPageChange'
    } as BdsPaginationEvents,
    defineCustomElement: defineBdsPagination
});

export type BdsPaperEvents = NonNullable<unknown>;

export const BdsPaper: StencilReactComponent<BdsPaperElement, BdsPaperEvents> = /*@__PURE__*/ createComponent<BdsPaperElement, BdsPaperEvents>({
    tagName: 'bds-paper',
    elementClass: BdsPaperElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as BdsPaperEvents,
    defineCustomElement: defineBdsPaper
});

export type BdsProgressBarEvents = NonNullable<unknown>;

export const BdsProgressBar: StencilReactComponent<BdsProgressBarElement, BdsProgressBarEvents> = /*@__PURE__*/ createComponent<BdsProgressBarElement, BdsProgressBarEvents>({
    tagName: 'bds-progress-bar',
    elementClass: BdsProgressBarElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as BdsProgressBarEvents,
    defineCustomElement: defineBdsProgressBar
});

export type BdsRadioEvents = {
    onBdsChange: EventName<CustomEvent<any>>,
    onBdsClickChange: EventName<CustomEvent<any>>
};

export const BdsRadio: StencilReactComponent<BdsRadioElement, BdsRadioEvents> = /*@__PURE__*/ createComponent<BdsRadioElement, BdsRadioEvents>({
    tagName: 'bds-radio',
    elementClass: BdsRadioElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {
        onBdsChange: 'bdsChange',
        onBdsClickChange: 'bdsClickChange'
    } as BdsRadioEvents,
    defineCustomElement: defineBdsRadio
});

export type BdsRadioGroupEvents = { onBdsRadioGroupChange: EventName<CustomEvent<any>> };

export const BdsRadioGroup: StencilReactComponent<BdsRadioGroupElement, BdsRadioGroupEvents> = /*@__PURE__*/ createComponent<BdsRadioGroupElement, BdsRadioGroupEvents>({
    tagName: 'bds-radio-group',
    elementClass: BdsRadioGroupElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onBdsRadioGroupChange: 'bdsRadioGroupChange' } as BdsRadioGroupEvents,
    defineCustomElement: defineBdsRadioGroup
});

export type BdsRichTextEvents = {
    onBdsRichTextChange: EventName<CustomEvent<any>>,
    onBdsRichTextInput: EventName<BdsRichTextCustomEvent<KeyboardEvent>>,
    onBdsBlur: EventName<CustomEvent<any>>,
    onBdsFocus: EventName<CustomEvent<any>>
};

export const BdsRichText: StencilReactComponent<BdsRichTextElement, BdsRichTextEvents> = /*@__PURE__*/ createComponent<BdsRichTextElement, BdsRichTextEvents>({
    tagName: 'bds-rich-text',
    elementClass: BdsRichTextElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {
        onBdsRichTextChange: 'bdsRichTextChange',
        onBdsRichTextInput: 'bdsRichTextInput',
        onBdsBlur: 'bdsBlur',
        onBdsFocus: 'bdsFocus'
    } as BdsRichTextEvents,
    defineCustomElement: defineBdsRichText
});

export type BdsSelectEvents = {
    onBdsChange: EventName<BdsSelectCustomEvent<SelectChangeEventDetail>>,
    onBdsCancel: EventName<CustomEvent<void>>,
    onBdsFocus: EventName<CustomEvent<void>>,
    onBdsBlur: EventName<CustomEvent<void>>
};

export const BdsSelect: StencilReactComponent<BdsSelectElement, BdsSelectEvents> = /*@__PURE__*/ createComponent<BdsSelectElement, BdsSelectEvents>({
    tagName: 'bds-select',
    elementClass: BdsSelectElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {
        onBdsChange: 'bdsChange',
        onBdsCancel: 'bdsCancel',
        onBdsFocus: 'bdsFocus',
        onBdsBlur: 'bdsBlur'
    } as BdsSelectEvents,
    defineCustomElement: defineBdsSelect
});

export type BdsSelectChipsEvents = {
    onBdsChange: EventName<BdsSelectChipsCustomEvent<SelectChangeEvent>>,
    onBdsCancel: EventName<CustomEvent<void>>,
    onBdsFocus: EventName<CustomEvent<void>>,
    onBdsBlur: EventName<CustomEvent<void>>,
    onBdsChangeChips: EventName<CustomEvent<any>>,
    onBdsSelectChipsInput: EventName<CustomEvent<any>>,
    onBdsSubmit: EventName<CustomEvent<any>>
};

export const BdsSelectChips: StencilReactComponent<BdsSelectChipsElement, BdsSelectChipsEvents> = /*@__PURE__*/ createComponent<BdsSelectChipsElement, BdsSelectChipsEvents>({
    tagName: 'bds-select-chips',
    elementClass: BdsSelectChipsElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {
        onBdsChange: 'bdsChange',
        onBdsCancel: 'bdsCancel',
        onBdsFocus: 'bdsFocus',
        onBdsBlur: 'bdsBlur',
        onBdsChangeChips: 'bdsChangeChips',
        onBdsSelectChipsInput: 'bdsSelectChipsInput',
        onBdsSubmit: 'bdsSubmit'
    } as BdsSelectChipsEvents,
    defineCustomElement: defineBdsSelectChips
});

export type BdsSelectOptionEvents = {
    onOptionSelected: EventName<CustomEvent<any>>,
    onOptionChecked: EventName<CustomEvent<any>>
};

export const BdsSelectOption: StencilReactComponent<BdsSelectOptionElement, BdsSelectOptionEvents> = /*@__PURE__*/ createComponent<BdsSelectOptionElement, BdsSelectOptionEvents>({
    tagName: 'bds-select-option',
    elementClass: BdsSelectOptionElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {
        onOptionSelected: 'optionSelected',
        onOptionChecked: 'optionChecked'
    } as BdsSelectOptionEvents,
    defineCustomElement: defineBdsSelectOption
});

export type BdsSidebarEvents = { onBdsToggle: EventName<CustomEvent<any>> };

export const BdsSidebar: StencilReactComponent<BdsSidebarElement, BdsSidebarEvents> = /*@__PURE__*/ createComponent<BdsSidebarElement, BdsSidebarEvents>({
    tagName: 'bds-sidebar',
    elementClass: BdsSidebarElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onBdsToggle: 'bdsToggle' } as BdsSidebarEvents,
    defineCustomElement: defineBdsSidebar
});

export type BdsSkeletonEvents = NonNullable<unknown>;

export const BdsSkeleton: StencilReactComponent<BdsSkeletonElement, BdsSkeletonEvents> = /*@__PURE__*/ createComponent<BdsSkeletonElement, BdsSkeletonEvents>({
    tagName: 'bds-skeleton',
    elementClass: BdsSkeletonElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as BdsSkeletonEvents,
    defineCustomElement: defineBdsSkeleton
});

export type BdsSliderEvents = { onBdsChange: EventName<CustomEvent<any>> };

export const BdsSlider: StencilReactComponent<BdsSliderElement, BdsSliderEvents> = /*@__PURE__*/ createComponent<BdsSliderElement, BdsSliderEvents>({
    tagName: 'bds-slider',
    elementClass: BdsSliderElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onBdsChange: 'bdsChange' } as BdsSliderEvents,
    defineCustomElement: defineBdsSlider
});

export type BdsStepEvents = NonNullable<unknown>;

export const BdsStep: StencilReactComponent<BdsStepElement, BdsStepEvents> = /*@__PURE__*/ createComponent<BdsStepElement, BdsStepEvents>({
    tagName: 'bds-step',
    elementClass: BdsStepElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as BdsStepEvents,
    defineCustomElement: defineBdsStep
});

export type BdsStepperEvents = NonNullable<unknown>;

export const BdsStepper: StencilReactComponent<BdsStepperElement, BdsStepperEvents> = /*@__PURE__*/ createComponent<BdsStepperElement, BdsStepperEvents>({
    tagName: 'bds-stepper',
    elementClass: BdsStepperElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as BdsStepperEvents,
    defineCustomElement: defineBdsStepper
});

export type BdsSwitchEvents = { onBdsChange: EventName<CustomEvent<any>> };

export const BdsSwitch: StencilReactComponent<BdsSwitchElement, BdsSwitchEvents> = /*@__PURE__*/ createComponent<BdsSwitchElement, BdsSwitchEvents>({
    tagName: 'bds-switch',
    elementClass: BdsSwitchElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onBdsChange: 'bdsChange' } as BdsSwitchEvents,
    defineCustomElement: defineBdsSwitch
});

export type BdsTabEvents = { onBdsTabChange: EventName<CustomEvent<any>> };

export const BdsTab: StencilReactComponent<BdsTabElement, BdsTabEvents> = /*@__PURE__*/ createComponent<BdsTabElement, BdsTabEvents>({
    tagName: 'bds-tab',
    elementClass: BdsTabElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onBdsTabChange: 'bdsTabChange' } as BdsTabEvents,
    defineCustomElement: defineBdsTab
});

export type BdsTabGroupEvents = {
    onBdsTabChange: EventName<CustomEvent<any>>,
    onBdsTabDisabled: EventName<CustomEvent<any>>
};

export const BdsTabGroup: StencilReactComponent<BdsTabGroupElement, BdsTabGroupEvents> = /*@__PURE__*/ createComponent<BdsTabGroupElement, BdsTabGroupEvents>({
    tagName: 'bds-tab-group',
    elementClass: BdsTabGroupElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {
        onBdsTabChange: 'bdsTabChange',
        onBdsTabDisabled: 'bdsTabDisabled'
    } as BdsTabGroupEvents,
    defineCustomElement: defineBdsTabGroup
});

export type BdsTabItemEvents = { onTabDisabled: EventName<CustomEvent<any>> };

export const BdsTabItem: StencilReactComponent<BdsTabItemElement, BdsTabItemEvents> = /*@__PURE__*/ createComponent<BdsTabItemElement, BdsTabItemEvents>({
    tagName: 'bds-tab-item',
    elementClass: BdsTabItemElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onTabDisabled: 'tabDisabled' } as BdsTabItemEvents,
    defineCustomElement: defineBdsTabItem
});

export type BdsTabPanelEvents = NonNullable<unknown>;

export const BdsTabPanel: StencilReactComponent<BdsTabPanelElement, BdsTabPanelEvents> = /*@__PURE__*/ createComponent<BdsTabPanelElement, BdsTabPanelEvents>({
    tagName: 'bds-tab-panel',
    elementClass: BdsTabPanelElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as BdsTabPanelEvents,
    defineCustomElement: defineBdsTabPanel
});

export type BdsTableEvents = NonNullable<unknown>;

export const BdsTable: StencilReactComponent<BdsTableElement, BdsTableEvents> = /*@__PURE__*/ createComponent<BdsTableElement, BdsTableEvents>({
    tagName: 'bds-table',
    elementClass: BdsTableElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as BdsTableEvents,
    defineCustomElement: defineBdsTable
});

export type BdsTableBodyEvents = NonNullable<unknown>;

export const BdsTableBody: StencilReactComponent<BdsTableBodyElement, BdsTableBodyEvents> = /*@__PURE__*/ createComponent<BdsTableBodyElement, BdsTableBodyEvents>({
    tagName: 'bds-table-body',
    elementClass: BdsTableBodyElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as BdsTableBodyEvents,
    defineCustomElement: defineBdsTableBody
});

export type BdsTableCellEvents = NonNullable<unknown>;

export const BdsTableCell: StencilReactComponent<BdsTableCellElement, BdsTableCellEvents> = /*@__PURE__*/ createComponent<BdsTableCellElement, BdsTableCellEvents>({
    tagName: 'bds-table-cell',
    elementClass: BdsTableCellElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as BdsTableCellEvents,
    defineCustomElement: defineBdsTableCell
});

export type BdsTableHeaderEvents = NonNullable<unknown>;

export const BdsTableHeader: StencilReactComponent<BdsTableHeaderElement, BdsTableHeaderEvents> = /*@__PURE__*/ createComponent<BdsTableHeaderElement, BdsTableHeaderEvents>({
    tagName: 'bds-table-header',
    elementClass: BdsTableHeaderElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as BdsTableHeaderEvents,
    defineCustomElement: defineBdsTableHeader
});

export type BdsTableRowEvents = NonNullable<unknown>;

export const BdsTableRow: StencilReactComponent<BdsTableRowElement, BdsTableRowEvents> = /*@__PURE__*/ createComponent<BdsTableRowElement, BdsTableRowEvents>({
    tagName: 'bds-table-row',
    elementClass: BdsTableRowElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as BdsTableRowEvents,
    defineCustomElement: defineBdsTableRow
});

export type BdsTableThEvents = NonNullable<unknown>;

export const BdsTableTh: StencilReactComponent<BdsTableThElement, BdsTableThEvents> = /*@__PURE__*/ createComponent<BdsTableThElement, BdsTableThEvents>({
    tagName: 'bds-table-th',
    elementClass: BdsTableThElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as BdsTableThEvents,
    defineCustomElement: defineBdsTableTh
});

export type BdsTabsEvents = {
    onScrollButtonClick: EventName<BdsTabsCustomEvent<Overflow>>,
    onBdsTabInit: EventName<CustomEvent<any>>
};

export const BdsTabs: StencilReactComponent<BdsTabsElement, BdsTabsEvents> = /*@__PURE__*/ createComponent<BdsTabsElement, BdsTabsEvents>({
    tagName: 'bds-tabs',
    elementClass: BdsTabsElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {
        onScrollButtonClick: 'scrollButtonClick',
        onBdsTabInit: 'bdsTabInit'
    } as BdsTabsEvents,
    defineCustomElement: defineBdsTabs
});

export type BdsTestComponentEvents = NonNullable<unknown>;

export const BdsTestComponent: StencilReactComponent<BdsTestComponentElement, BdsTestComponentEvents> = /*@__PURE__*/ createComponent<BdsTestComponentElement, BdsTestComponentEvents>({
    tagName: 'bds-test-component',
    elementClass: BdsTestComponentElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as BdsTestComponentEvents,
    defineCustomElement: defineBdsTestComponent
});

export type BdsThemeProviderEvents = NonNullable<unknown>;

export const BdsThemeProvider: StencilReactComponent<BdsThemeProviderElement, BdsThemeProviderEvents> = /*@__PURE__*/ createComponent<BdsThemeProviderElement, BdsThemeProviderEvents>({
    tagName: 'bds-theme-provider',
    elementClass: BdsThemeProviderElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as BdsThemeProviderEvents,
    defineCustomElement: defineBdsThemeProvider
});

export type BdsToastEvents = { onToastButtonClick: EventName<CustomEvent<any>> };

export const BdsToast: StencilReactComponent<BdsToastElement, BdsToastEvents> = /*@__PURE__*/ createComponent<BdsToastElement, BdsToastEvents>({
    tagName: 'bds-toast',
    elementClass: BdsToastElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onToastButtonClick: 'toastButtonClick' } as BdsToastEvents,
    defineCustomElement: defineBdsToast
});

export type BdsToastContainerEvents = NonNullable<unknown>;

export const BdsToastContainer: StencilReactComponent<BdsToastContainerElement, BdsToastContainerEvents> = /*@__PURE__*/ createComponent<BdsToastContainerElement, BdsToastContainerEvents>({
    tagName: 'bds-toast-container',
    elementClass: BdsToastContainerElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as BdsToastContainerEvents,
    defineCustomElement: defineBdsToastContainer
});

export type BdsTooltipEvents = NonNullable<unknown>;

export const BdsTooltip: StencilReactComponent<BdsTooltipElement, BdsTooltipEvents> = /*@__PURE__*/ createComponent<BdsTooltipElement, BdsTooltipEvents>({
    tagName: 'bds-tooltip',
    elementClass: BdsTooltipElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as BdsTooltipEvents,
    defineCustomElement: defineBdsTooltip
});

export type BdsTypoEvents = NonNullable<unknown>;

export const BdsTypo: StencilReactComponent<BdsTypoElement, BdsTypoEvents> = /*@__PURE__*/ createComponent<BdsTypoElement, BdsTypoEvents>({
    tagName: 'bds-typo',
    elementClass: BdsTypoElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as BdsTypoEvents,
    defineCustomElement: defineBdsTypo
});

export type BdsUploadEvents = {
    onBdsUploadDelete: EventName<CustomEvent<any>>,
    onBdsUploadChange: EventName<CustomEvent<any>>
};

export const BdsUpload: StencilReactComponent<BdsUploadElement, BdsUploadEvents> = /*@__PURE__*/ createComponent<BdsUploadElement, BdsUploadEvents>({
    tagName: 'bds-upload',
    elementClass: BdsUploadElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {
        onBdsUploadDelete: 'bdsUploadDelete',
        onBdsUploadChange: 'bdsUploadChange'
    } as BdsUploadEvents,
    defineCustomElement: defineBdsUpload
});

export type BdsWarningEvents = NonNullable<unknown>;

export const BdsWarning: StencilReactComponent<BdsWarningElement, BdsWarningEvents> = /*@__PURE__*/ createComponent<BdsWarningElement, BdsWarningEvents>({
    tagName: 'bds-warning',
    elementClass: BdsWarningElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as BdsWarningEvents,
    defineCustomElement: defineBdsWarning
});
