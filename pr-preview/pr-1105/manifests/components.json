{"v":0,"components":{"tokens-colors":{"id":"tokens-colors","name":"Colors","path":"./src/components/card-color/card-color.stories.jsx","examples":[{"name":"light","snippet":"const light = () => (\n  <>\n    {getSectionColor('Light', getColorsCards(Light))}\n  </>\n);"},{"name":"dark","snippet":"const dark = () => (\n  <>\n    {getSectionColor('Dark', getColorsCards(Dark))}\n  </>\n);"},{"name":"highContrast","snippet":"const highContrast = () => (\n  <>\n    {getSectionColor('High-contrast', getColorsCards(HighContrast))}\n  </>\n);"},{"name":"extendedColor","snippet":"const extendedColor = () => (\n  <>\n    {getSectionColor('Extended-color', getColorsCards(ExtendedColor))}\n  </>\n);"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  2 | import DocumentationTemplate from './card-color.mdx';\n  3 |\n> 4 | export default {\n    | ^\n  5 |   title: 'Tokens/Colors',\n  6 |   parameters: {\n  7 |     docs: {"}},"components-accordion-group":{"id":"components-accordion-group","name":"Accordion Group","path":"./src/components/accordion/accordion-group.stories.jsx","examples":[{"name":"Properties","snippet":"const Properties = () => {\n    return (\n        <bds-accordion-group collapse=\"single\" divisor>\n            <bds-accordion start-open={args.startOpen}>\n                <bds-accordion-header accordion-title=\"Titulo do accordion\" />\n                <bds-accordion-body>\n                    <bds-typo variant=\"fs-16\">{paragraph}</bds-typo>\n                </bds-accordion-body>\n            </bds-accordion>\n            <bds-accordion start-open={args.startOpen}>\n                <bds-accordion-header accordion-title=\"Titulo do accordion\" />\n                <bds-accordion-body>\n                    <bds-typo variant=\"fs-16\">{paragraph}</bds-typo>\n                </bds-accordion-body>\n            </bds-accordion>\n        </bds-accordion-group>\n    );\n};"},{"name":"Methods","snippet":"const Methods = () => {\n  const handleOpen = async (id) => {\n    const acc = document.getElementById(id);\n    await acc.openAll();\n  };\n\n  const handleClose = async (id) => {\n    const acc = document.getElementById(id);\n    await acc.closeAll();\n  };\n\n  return (\n    <bds-grid>\n      <bds-grid direction=\"column\" gap=\"2\">\n        <bds-grid gap=\"2\">\n          <bds-button onClick={() => handleOpen('gp')} variant=\"primary\" size=\"short\">\n            OpenAll\n          </bds-button>\n          <bds-button onClick={() => handleClose('gp')} variant=\"primary\" size=\"short\">\n            CloseAll\n          </bds-button>\n        </bds-grid>\n        <bds-accordion-group id=\"gp\" collapse=\"multiple\">\n          <bds-accordion id=\"primeiro-accordion\">\n            <bds-accordion-header accordion-title=\"Título do accordion\"></bds-accordion-header>\n            <bds-accordion-body>\n              <bds-typo variant=\"fs-16\">{paragraph}</bds-typo>\n            </bds-accordion-body>\n          </bds-accordion>\n          <bds-accordion id=\"segundo-accordion\">\n            <bds-accordion-header accordion-title=\"Título do accordion\"></bds-accordion-header>\n            <bds-accordion-body>\n              <bds-typo variant=\"fs-16\">{paragraph}</bds-typo>\n            </bds-accordion-body>\n          </bds-accordion>\n        </bds-accordion-group>\n      </bds-grid>\n    </bds-grid>\n  );\n};"},{"name":"Events","snippet":"const Events = () => {\n  useEffect(() => {\n    const accGroupEvent = document.getElementById('accGroupEvent');\n    accGroupEvent.addEventListener('bdsAccordionCloseAll', () => {\n      console.log('Evento do accordion group funcionando');\n    });\n  });\n  const handleCloseAll = (id) => {\n    const close = document.getElementById(id);\n    close.closeAll();\n  };\n  return (\n    <bds-grid direction=\"column\" gap=\"2\">\n      <bds-button onClick={() => handleCloseAll('accGroupEvent')} variant=\"primary\" size=\"short\">\n        Close All\n      </bds-button>\n      <bds-accordion-group id=\"accGroupEvent\" collapse=\"multiple\">\n        <bds-accordion>\n          <bds-accordion-header accordion-title=\"Título do accordion\"></bds-accordion-header>\n          <bds-accordion-body>\n            <bds-typo variant=\"fs-16\">{paragraph}</bds-typo>\n          </bds-accordion-body>\n        </bds-accordion>\n        <bds-accordion>\n          <bds-accordion-header accordion-title=\"Título do accordion\"></bds-accordion-header>\n          <bds-accordion-body>\n            <bds-typo variant=\"fs-16\">{paragraph}</bds-typo>\n          </bds-accordion-body>\n        </bds-accordion>\n      </bds-accordion-group>\n    </bds-grid>\n  );\n};"},{"name":"FrameworkReact","snippet":"const FrameworkReact = () => {\n  return (\n    <BdsAccordionGroup collapse=\"multiple\">\n      <BdsAccordion>\n        <BdsAccordionHeader accordion-title=\"Título do accordion\"></BdsAccordionHeader>\n        <BdsAccordionBody>\n          <BdsTypo variant=\"fs-16\">{paragraph}</BdsTypo>\n        </BdsAccordionBody>\n      </BdsAccordion>\n      <BdsAccordion>\n        <BdsAccordionHeader accordion-title=\"Título do accordion\"></BdsAccordionHeader>\n        <BdsAccordionBody>\n          <BdsTypo variant=\"fs-16\">{paragraph}</BdsTypo>\n        </BdsAccordionBody>\n      </BdsAccordion>\n    </BdsAccordionGroup>\n  );\n};"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  10 | } from '../../../blip-ds-react/dist/components';\n  11 |\n> 12 | export default {\n     | ^\n  13 |   title: 'Components/Accordion Group',\n  14 |   tags: ['autodocs'],\n  15 |   parameters: {"}},"components-accordion":{"id":"components-accordion","name":"Accordion","path":"./src/components/accordion/accordion.stories.jsx","examples":[{"name":"Properties","snippet":"const Properties = () => {\n    return (\n        <bds-accordion start-open={false} divisor>\n            <bds-accordion-header\n                accordion-title=\"Título do accordion\"\n                icon=\"\"\n                avatar-name=\"\"\n                avatar-thumb=\"\" />\n            <bds-accordion-body>\n                <bds-typo variant=\"fs-16\">{paragraph}</bds-typo>\n            </bds-accordion-body>\n        </bds-accordion>\n    );\n};"},{"name":"Methods","snippet":"const Methods = () => {\n  const btToggle = async (id) => {\n    const acc = document.getElementById(id);\n    await acc.toggle();\n  };\n  const btOpen = async (id) => {\n    const acc = document.getElementById(id);\n    await acc.open();\n  };\n  const btClose = async (id) => {\n    const acc = document.getElementById(id);\n    await acc.close();\n  };\n  return (\n    <bds-grid direction=\"column\" gap=\"2\">\n      <bds-grid gap=\"2\">\n        <bds-button onClick={() => btToggle('accordion')} variant=\"primary\" size=\"short\">\n          Toggle\n        </bds-button>\n        <bds-button onClick={() => btOpen('accordion')} variant=\"primary\" size=\"short\">\n          Open\n        </bds-button>\n        <bds-button onClick={() => btClose('accordion')} variant=\"primary\" size=\"short\">\n          Close\n        </bds-button>\n      </bds-grid>\n      <bds-accordion id=\"accordion\">\n        <bds-accordion-header\n          accordion-title=\"Título do accordion\"\n          icon=\"\"\n          avatar-name=\"\"\n          avatar-thumb=\"\"\n        ></bds-accordion-header>\n        <bds-accordion-body>\n          <bds-typo variant=\"fs-16\">{paragraph}</bds-typo>\n        </bds-accordion-body>\n      </bds-accordion>\n    </bds-grid>\n  );\n};"},{"name":"Events","snippet":"const Events = () => {\n  useEffect(() => {\n    const accToggle = document.getElementById('accEvent');\n    accToggle.addEventListener('bdsToggle', () => {\n      console.log('Evento toggle funcionando');\n    });\n    const accOpen = document.getElementById('accEvent');\n    accOpen.addEventListener('bdsAccordionOpen', () => {\n      console.log('Evento Open funcionando');\n    });\n    const accClose = document.getElementById('accEvent');\n    accClose.addEventListener('bdsAccordionClose', () => {\n      console.log('Evento Close funcionando');\n    });\n  });\n  return (\n    <bds-accordion id=\"accEvent\">\n      <bds-accordion-header accordion-title=\"Título do accordion (Veja o resultado do evento na aba Actions)\"></bds-accordion-header>\n      <bds-accordion-body>\n        <bds-typo variant=\"fs-16\">{paragraph}</bds-typo>\n      </bds-accordion-body>\n    </bds-accordion>\n  );\n};"},{"name":"FrameworkReact","snippet":"const FrameworkReact = () => {\n  return (\n    <BdsAccordion>\n      <BdsAccordionHeader accordion-title=\"Título do accordion\"></BdsAccordionHeader>\n      <BdsAccordionBody>\n        <BdsTypo variant=\"fs-16\">{paragraph}</BdsTypo>\n      </BdsAccordionBody>\n    </BdsAccordion>\n  );\n};"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  4 | import { BdsAccordion, BdsAccordionBody, BdsAccordionHeader, BdsTypo } from '../../../blip-ds-react/dist/components';\n  5 |\n> 6 | export default {\n    | ^\n  7 |   title: 'Components/Accordion',\n  8 |   tags: ['autodocs'],\n  9 |   parameters: {"}},"components-alert":{"id":"components-alert","name":"Alert","path":"./src/components/alert/alert.stories.jsx","examples":[{"name":"Properties","snippet":"const Properties = () => {\n    const el = document.getElementsByClassName('sb-story');\n    if (el.length !== 0) {\n      el[0].style.width = '720px';\n      el[0].style.height = '400px';\n      el[0].style.position = 'relative';\n      el[0].style.background = 'none';\n    }\n\n    return (\n        <bds-alert open position=\"contain\">\n            <bds-alert-header variant=\"system\" icon=\"info\">Atenção!\n                      </bds-alert-header>\n            <bds-alert-body>Lorem ipsum dolor, sit amet consectetur adipisicing elit. At corporis eligendi cumque ratione nulla a quos\n                        error!\n                      </bds-alert-body>\n            <bds-alert-actions>\n                <bds-button variant=\"secondary\" bold={true}>Cancelar\n                            </bds-button>\n                <bds-button variant=\"secondary\" bold={true}>Confirmar\n                            </bds-button>\n            </bds-alert-actions>\n        </bds-alert>\n    );\n};"},{"name":"Events","snippet":"const Events = () => {\n\n  useEffect(() => {\n    const avatar = document.getElementById('alert');\n    avatar.addEventListener('bdsAlertChanged', () => {\n      console.log('Evento Click funcionando');\n    });\n  });\n\n  const btToggle = async id => {\n    const alert = document.getElementById(id);\n    alert.toggle();\n  }\n  return (\n    <BdsGrid>\n      <BdsButton onClick={() => btToggle('alert')}>\n        Abrir Alert\n      </BdsButton>\n      <BdsAlert id=\"alert\">\n      <BdsAlertHeader variant=\"system\" icon=\"info\">\n        Atenção!\n      </BdsAlertHeader>\n      <BdsAlertBody>\n        Lorem ipsum dolor, sit amet consectetur adipisicing elit. At corporis eligendi cumque ratione nulla a quos\n        error!\n      </BdsAlertBody>\n      <BdsAlertActions>\n        <BdsButton variant=\"tertiary\" onClick={() => btToggle('alert')}>Cancelar</BdsButton>\n        <bds-button variant=\"primary\" onClick={() => btToggle('alert')}>Confirmar</bds-button>\n      </BdsAlertActions>\n    </BdsAlert>\n    </BdsGrid>\n  );\n};"},{"name":"Methods","snippet":"const Methods = () => {\n\n  const btToggle = async id => {\n    const alert = document.getElementById(id);\n    alert.toggle();\n  }\n  return (\n    <BdsGrid>\n      <BdsButton onClick={() => btToggle('alert')}>\n        Abrir Alert\n      </BdsButton>\n      <BdsAlert id=\"alert\">\n      <BdsAlertHeader variant=\"system\" icon=\"info\">\n        Atenção!\n      </BdsAlertHeader>\n      <BdsAlertBody>\n        Lorem ipsum dolor, sit amet consectetur adipisicing elit. At corporis eligendi cumque ratione nulla a quos\n        error!\n      </BdsAlertBody>\n      <BdsAlertActions>\n        <BdsButton variant=\"tertiary\" onClick={() => btToggle('alert')}>Cancelar</BdsButton>\n        <bds-button variant=\"primary\" onClick={() => btToggle('alert')}>Confirmar</bds-button>\n      </BdsAlertActions>\n    </BdsAlert>\n    </BdsGrid>\n  );\n};"},{"name":"FrameworkReact","snippet":"const FrameworkReact = () => {\n  return (\n    <BdsAlert open={true} id=\"alert\">\n      <BdsAlertHeader variant=\"system\" icon=\"info\">\n        Atenção!\n      </BdsAlertHeader>\n      <BdsAlertBody>\n        Lorem ipsum dolor, sit amet consectetur adipisicing elit. At corporis eligendi cumque ratione nulla a quos\n        error!\n      </BdsAlertBody>\n      <BdsAlertActions>\n        <BdsButton variant=\"tertiary\">Cancelar</BdsButton>\n        <bds-button variant=\"primary\">Confirmar</bds-button>\n      </BdsAlertActions>\n    </BdsAlert>\n  );\n};"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  10 | import DocumentationTemplate from './alert.mdx';\n  11 |\n> 12 | export default {\n     | ^\n  13 |   title: 'Components/Alert',\n  14 |   parameters: {\n  15 |     docs: {"}},"components-autocomplete":{"id":"components-autocomplete","name":"Autocomplete","path":"./src/components/autocomplete/autocomplete.stories.jsx","examples":[{"name":"Properties","snippet":"const Properties = () => {\n    const el = document.getElementsByClassName('sb-story');\n    if (el.length !== 0) {\n      el[0].style.height = '300px';\n      el[0].style.position = 'relative';\n      el[0].style.background = 'none';\n    }\n\n    return (\n        <bds-autocomplete\n            label=\"Label\"\n            icon=\"\"\n            value={args.value}\n            disabled={false}\n            placeholder=\"Selecione uma opção\"\n            selection-type=\"single\"\n            selection-title=\"Selection Title\"\n            selected-all\n            options-position={args.optionsPosition}\n            danger={false}\n            error-message=\"\"\n            helper-message=\"\"\n            success-message=\"\"\n            success={false}\n            options=\"[{\\\"value\\\": \\\"1\\\", \\\"label\\\": \\\"Millie Bobby\\\"}, {\\\"value\\\": \\\"2\\\", \\\"label\\\": \\\"Finn Wolfhard\\\"}, {\\\"value\\\": \\\"3\\\", \\\"label\\\": \\\"David Harbour\\\"}, {\\\"value\\\": \\\"4\\\", \\\"label\\\": \\\"Gaten Matarazzo\\\"}, {\\\"value\\\": \\\"5\\\", \\\"label\\\": \\\"Caleb McLaughlin\\\"}, {\\\"value\\\": \\\"6\\\", \\\"label\\\": \\\"Noah Schnapp\\\"}]\"\n            search-only-title\n            clear-icon-on-focus={false}\n            data-test=\"\"\n            loading={false}>\n            <bds-select-option value=\"1\">Millie Bobby</bds-select-option>\n            <bds-select-option value=\"2\">Finn Wolfhard</bds-select-option>\n            <bds-select-option value=\"3\">David Harbour</bds-select-option>\n            <bds-select-option value=\"4\">Gaten Matarazzo</bds-select-option>\n            <bds-select-option value=\"5\">Caleb McLaughlin</bds-select-option>\n            <bds-select-option value=\"6\">Noah Schnapp</bds-select-option>\n        </bds-autocomplete>\n    );\n};"},{"name":"Events","snippet":"const Events = () => {\n  useEffect(() => {\n    const autocomplete = document.getElementById('autocomplete');\n    autocomplete.addEventListener('bdsMultiselectedChange', () => {\n      console.log('Evento Multiselected Change funcionando');\n    });\n    autocomplete.addEventListener('bdsBlur', () => {\n      console.log('Evento Blur funcionando');\n    });\n    autocomplete.addEventListener('bdsCancel', () => {\n      console.log('Evento Cancel funcionando');\n    });\n    autocomplete.addEventListener('bdsChange', () => {\n      console.log('Evento Change funcionando');\n    });\n    autocomplete.addEventListener('bdsFocus', () => {\n      console.log('Evento Focus funcionando');\n    });\n    autocomplete.addEventListener('bdsInput', () => {\n      console.log('Evento Input funcionando');\n    });\n    autocomplete.addEventListener('bdsSelectedChange', () => {\n      console.log('Evento Selected Change funcionando');\n    });\n  });\n  return (\n    <>\n      <bds-autocomplete id=\"autocomplete\" label=\"label\" icon=\"email\" value=\"\" disabled={false} placeholder=\"Select\">\n        <bds-select-option value=\"1\">Millie Bobby</bds-select-option>\n        <bds-select-option value=\"2\">Finn Wolfhard</bds-select-option>\n        <bds-select-option value=\"3\">David Harbour</bds-select-option>\n        <bds-select-option value=\"4\">Gaten Matarazzo</bds-select-option>\n        <bds-select-option value=\"5\">Caleb McLaughlin</bds-select-option>\n        <bds-select-option value=\"6\">Noah Schnapp</bds-select-option>\n      </bds-autocomplete>\n    </>\n  );\n};"},{"name":"FrameworkReact","snippet":"const FrameworkReact = () => {\n  return (\n    <BdsAutocomplete label=\"label\" icon=\"email\" value=\"\" disabled={false} placeholder=\"Select\">\n      <BdsSelectOption value=\"1\">Millie Bobby</BdsSelectOption>\n      <BdsSelectOption value=\"2\">Finn Wolfhard</BdsSelectOption>\n      <BdsSelectOption value=\"3\">David Harbour</BdsSelectOption>\n      <BdsSelectOption value=\"4\">Gaten Matarazzo</BdsSelectOption>\n      <BdsSelectOption value=\"5\">Caleb McLaughlin</BdsSelectOption>\n      <BdsSelectOption value=\"6\">Noah Schnapp</BdsSelectOption>\n    </BdsAutocomplete>\n  );\n};"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  3 | import { BdsAutocomplete, BdsSelectOption } from '../../../blip-ds-react/dist/components';\n  4 |\n> 5 | export default {\n    | ^\n  6 |   title: 'Components/Autocomplete',\n  7 |   tags: ['autodocs'],\n  8 |   parameters: {"}},"components-avatar-group":{"id":"components-avatar-group","name":"Avatar Group","path":"./src/components/avatar/avatar-group.stories.jsx","examples":[{"name":"Properties","snippet":"const Properties = () => {\n    return <bds-avatar-group can-click={false} size=\"standard\" users={JSON.stringify(users)} />;\n};"},{"name":"Events","snippet":"const Events = () => {\n    useEffect(() => {\n        const avatarGroup = document.getElementById('avatar-group');\n        avatarGroup.addEventListener('bdsClickAvatarGroup', () => {\n          console.log('Evento Click funcionando');\n        });\n      });\n    return (\n        <bds-avatar-group id=\"avatar-group\" can-click={true} size='standard' users={JSON.stringify(users)}></bds-avatar-group>\n    );\n  };"},{"name":"FrameworkReact","snippet":"const FrameworkReact = () => (\n      <BdsAvatarGroup id=\"avatar-group\" can-click={true} size='standard' users={JSON.stringify(users)}></BdsAvatarGroup>\n  );"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  3 | import { BdsAvatarGroup } from '../../../blip-ds-react/dist/components';\n  4 |\n> 5 | export default {\n    | ^\n  6 |   title: 'Components/Avatar Group',\n  7 |   parameters: {\n  8 |     docs: {"}},"components-avatar-single":{"id":"components-avatar-single","name":"Avatar Single","path":"./src/components/avatar/avatar.stories.jsx","examples":[{"name":"Properties","snippet":"const Properties = () => {\n    return (\n        <bds-avatar\n            name=\"Michael Scott\"\n            thumbnail=\"\"\n            open-upload={false}\n            size=\"standard\"\n            color=\"colorLetter\"\n            upload={false} />\n    );\n};"},{"name":"Events","snippet":"const Events = () => {\n  useEffect(() => {\n    const avatar = document.getElementById('avatar');\n    avatar.addEventListener('bdsClickAvatar', () => {\n      console.log('Evento Click funcionando');\n    });\n  });\n  return (\n    <bds-avatar id=\"avatar\" name=\"Michael Scott\" thumbnail=\"\" size=\"standard\" upload=\"true\"></bds-avatar>\n  );\n};"},{"name":"FrameworkReact","snippet":"const FrameworkReact = () => (\n    <BdsAvatar id=\"avatar\" name=\"Michael Scott\" thumbnail=\"\" size=\"standard\" upload=\"true\"></BdsAvatar>\n  );"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  3 | import { BdsAvatar } from '../../../blip-ds-react/dist/components';\n  4 |\n> 5 | export default {\n    | ^\n  6 |   title: 'Components/Avatar Single',\n  7 |   parameters: {\n  8 |     docs: {"}},"components-badge":{"id":"components-badge","name":"Badge","path":"./src/components/badge/badge.stories.jsx","examples":[{"name":"Properties","snippet":"const Properties = () => <bds-badge\n    shape=\"circle\"\n    color=\"system\"\n    icon=\"info\"\n    number={args.number ? args.number : null}\n    animation={false} />;"},{"name":"typeBadge","snippet":"const typeBadge = () => (\n  <bds-grid direction=\"column\" gap=\"3\" padding=\"4\" align-items=\"center\" justify-content=\"center\">\n    <bds-grid gap=\"4\" margin=\"3\" align-items=\"center\">\n      <bds-grid direction=\"column\" align-items=\"center\" gap=\"4\">\n        <bds-badge shape=\"circle\" color=\"system\"></bds-badge>\n        <bds-typo bold=\"bold\">Status</bds-typo>\n      </bds-grid>\n      <bds-grid direction=\"column\" align-items=\"center\" gap=\"2\">\n        <bds-badge shape=\"circle\" color=\"system\" icon=\"info\"></bds-badge>\n        <bds-typo bold=\"bold\">Icon</bds-typo>\n      </bds-grid>\n      <bds-grid direction=\"column\" align-items=\"center\" gap=\"2\">\n        <bds-badge shape=\"circle\" color=\"system\" number={1234}></bds-badge>\n        <bds-typo bold=\"bold\">Number</bds-typo>\n      </bds-grid>\n    </bds-grid>\n  </bds-grid>\n);"},{"name":"exampleBadge","snippet":"const exampleBadge = () => (\n  <bds-grid gap=\"4\" padding=\"4\" align-items=\"center\" justify-content=\"center\">\n    <bds-grid style={mixBadge}>\n      <bds-icon name=\"bell\" size=\"large\"></bds-icon>\n      <div style={badge}>\n        <bds-badge shape=\"circle\" color=\"system\" animation number={1}></bds-badge>\n      </div>\n    </bds-grid>\n    <bds-grid style={mixBadge}>\n      <bds-icon name=\"bell\" size=\"large\"></bds-icon>\n      <div style={badge}>\n        <bds-badge shape=\"circle\" color=\"system\" animation icon=\"info\"></bds-badge>\n      </div>\n    </bds-grid>\n    <bds-grid style={mixBadge}>\n      <bds-icon name=\"bell\" size=\"large\"></bds-icon>\n      <div style={badgeStatus}>\n        <bds-badge shape=\"circle\" color=\"system\" animation></bds-badge>\n      </div>\n    </bds-grid>\n  </bds-grid>\n);"},{"name":"FrameworkReact","snippet":"const FrameworkReact = () => (\n  <BdsBadge animation={true} shape=\"circle\" color=\"system\" icon=\"info\"></BdsBadge>\n);"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  3 | import { BdsBadge } from '../../../blip-ds-react/dist/components';\n  4 |\n> 5 | export default {\n    | ^\n  6 |   title: 'Components/Badge',\n  7 |   parameters: {\n  8 |     docs: {"}},"components-banner":{"id":"components-banner","name":"Banner","path":"./src/components/banner/banner.stories.jsx","examples":[{"name":"Properties","snippet":"const Properties = () => <bds-banner variant=\"system\" button-close={false} context=\"outside\">Instabilidade na plataforma? Não se preocupe, já estamos resolvendo!\n        <bds-banner-link link=\"https://www.blip.ai/\" target=\"blank\">Acompanhe aqui\n            </bds-banner-link>\n</bds-banner>;"},{"name":"Methods","snippet":"const Methods = () => {\n  useEffect(() => {\n    const banner = document.getElementById('banner-method');\n    const toggleButton = document.getElementById('toggle-button');\n\n    toggleButton.addEventListener('click', () => {\n      banner.toggle();\n    });\n\n    return () => {\n      toggleButton.removeEventListener('click', () => {\n        banner.toggle();\n      });\n    };\n  }, []);\n\n  return (\n    <div>\n      <bds-banner id=\"banner-method\" variant=\"system\" button-close={true} context=\"outside\">\n        Instabilidade na plataforma? Não se preocupe, já estamos resolvendo!\n      </bds-banner>\n      <bds-button id=\"toggle-button\" variant=\"primary\">Toggle Banner Visibility</bds-button>\n    </div>\n  );\n};"},{"name":"Events","snippet":"const Events = () => {\n  useEffect(() => {\n    const banner = document.getElementById('bannerEvent');\n    banner.addEventListener('bdsBannerClose', () => {\n      console.log('Evento para fechar funcionando');\n    });\n  });\n\n  return (\n    <bds-banner id=\"bannerEvent\" variant=\"system\" button-close={true} context=\"outside\">\n      Instabilidade na plataforma? Não se preocupe, já estamos resolvendo!\n    </bds-banner>\n  );\n};"},{"name":"linkBanner","snippet":"const linkBanner = () => (\n  <bds-banner variant=\"system\" button-close=\"true\">\n    Instabilidade na plataforma? Não se preocupe, já estamos resolvendo!\n    <bds-banner-link>Acompanhe aqui</bds-banner-link>\n  </bds-banner>\n);"},{"name":"contextBanner","snippet":"const contextBanner = () => (\n  <bds-paper width=\"500px\">\n    <bds-grid direction=\"column\" padding=\"2\" gap=\"3\">\n      <bds-banner variant=\"warning\" context=\"inside\">\n        Este é um banner do tipo inside. Ele pode conter várias linhas, mas a sugestão é que possua textos curtos e\n        objetivos.\n      </bds-banner>\n      <bds-grid direction=\"row\" gap=\"2\" align-items=\"center\" justify-content=\"center\">\n        <bds-grid align-items=\"center\" justify-content=\"center\">\n          <bds-icon size=\"large\" name=\"builder-publish-bot\"></bds-icon>\n        </bds-grid>\n        <div style={rightText}>\n          <bds-typo bold=\"bold\" variant=\"fs-16\">\n            Aprenda a utilizar o Blip\n          </bds-typo>\n          <bds-typo>Conheça nossos conteúdos e aprenda a utilizar o máximo da plataforma</bds-typo>\n        </div>\n      </bds-grid>\n    </bds-grid>\n  </bds-paper>\n);"},{"name":"FrameworkReact","snippet":"const FrameworkReact = () => (\n  <BdsBanner variant=\"system\" button-close=\"true\">\n    Instabilidade na plataforma? Não se preocupe, já estamos resolvendo!\n    <BdsBannerLink>Acompanhe aqui</BdsBannerLink>\n  </BdsBanner>\n);"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  3 | import { BdsBanner, BdsBannerLink } from '../../../blip-ds-react/dist/components';\n  4 |\n> 5 | export default {\n    | ^\n  6 |   title: 'Components/Banner',\n  7 |   parameters: {\n  8 |     docs: {"}},"components-breadcrumb":{"id":"components-breadcrumb","name":"Breadcrumb","path":"./src/components/breadcrumb/breadcrumb.stories.jsx","examples":[{"name":"Properties","snippet":"const Properties = () => {\n    return (\n        <bds-breadcrumb\n            items={JSON.stringify([\n              { label: 'Home', href: '/' },\n              { label: 'About', href: '/about' },\n              { label: 'Contact', href: '/contact' },\n              { label: 'Current Page' },\n            ])} />\n    );\n};"},{"name":"Events","snippet":"const Events = () => {\n  const [clickedItem, setClickedItem] = useState(null);\n\n  const handleBreadcrumbClick = (event) => {\n    const detail = event.detail;\n    setClickedItem(detail);\n    console.log('Breadcrumb item clicked:', detail);\n  };\n\n  return (\n    <div>\n      <bds-breadcrumb\n        items={JSON.stringify([\n          { label: 'Home', href: '/' },\n          { label: 'Features', href: '/features' },\n          { label: 'Pricing', href: '/pricing' },\n          { label: 'Documentation' },\n        ])}\n        onBreadcrumbItemClick={(event) => handleBreadcrumbClick(event)}\n      ></bds-breadcrumb>\n      {clickedItem && (\n        <div>\n          <p>\n            You clicked on: <strong>{clickedItem.label}</strong>\n            {clickedItem.href && (\n              <span>\n                {' '}\n                (<a href={clickedItem.href}>{clickedItem.href}</a>)\n              </span>\n            )}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};"},{"name":"FrameworkReact","snippet":"const FrameworkReact = () => {\n  return (\n    <BdsBreadcrumb\n      items={[\n        { label: 'Home', href: '/' },\n        { label: 'Features', href: '/features' },\n        { label: 'Pricing', href: '/pricing' },\n        { label: 'Documentation' },\n      ]}\n    />\n  );\n};"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  3 | import { BdsBreadcrumb } from '../../../blip-ds-react/dist/components';\n  4 |\n> 5 | export default {\n    | ^\n  6 |   title: 'Components/Breadcrumb',\n  7 |   tags: ['autodocs'],\n  8 |   parameters: {"}},"components-button-group":{"id":"components-button-group","name":"Button Group","path":"./src/components/button/button-group.stories.jsx","examples":[{"name":"Properties","snippet":"const Properties = () => {\n    return (\n        <bds-button-group size=\"medium\" color=\"primary\" direction=\"column\" multiple={false}>\n            <bds-button icon-left=\"builder-publish-bot\" />\n            <bds-button icon-left=\"search\" />\n            <bds-button icon-left=\"email\" />\n            <bds-button icon-left=\"bell\" />\n            <bds-button icon-left=\"settings-general\" />\n        </bds-button-group>\n    );\n};"},{"name":"Methods","snippet":"const Methods = () => {\n  useEffect(() => {\n    const buttonGroup = document.getElementById('button-group');\n    const activateButton = document.getElementById('activate-button');\n\n    activateButton.addEventListener('click', () => {\n      buttonGroup.activateButton(1);\n    });\n\n    return () => {\n      activateButton.removeEventListener('click', () => {\n        buttonGroup.activateButton(1);\n      });\n    };\n  }, []);\n\n  return (\n    <bds-grid direction=\"column\" align=\"center\" gap=\"2\">\n      <bds-button id=\"activate-button\" variant=\"primary\">Ativar o segundo botão</bds-button>\n      <bds-button-group id=\"button-group\">\n        <bds-button icon-left=\"builder-publish-bot\" id=\"bot-builder-publish\"></bds-button>\n        <bds-button icon-left=\"search\" id=\"bot-search\"></bds-button>\n        <bds-button icon-left=\"email\" id=\"bot-email\"></bds-button>\n        <bds-button icon-left=\"bell\" id=\"bot-bell\"></bds-button>\n        <bds-button icon-left=\"settings-general\" id=\"bot-settings\"></bds-button>\n      </bds-button-group>\n    </bds-grid>\n  );\n};"},{"name":"Events","snippet":"const Events = () => {\n  useEffect(() => {\n    const buttonGroup = document.getElementById('button-group');\n\n    buttonGroup.addEventListener('buttonSelected', (obj) => {\n      console.log('Botão clicado:', obj.detail);\n    });\n\n    return () => {\n      buttonGroup.removeEventListener('buttonSelected', (obj) => {\n        console.log('Botão clicado:', obj.detail);\n      });\n    };\n  }, []);\n\n  return (\n    <bds-button-group id=\"button-group\">\n      <bds-button icon-left=\"builder-publish-bot\" id=\"bot-builder-publish\"></bds-button>\n      <bds-button icon-left=\"search\" id=\"bot-search\"></bds-button>\n      <bds-button icon-left=\"email\" id=\"bot-email\"></bds-button>\n      <bds-button icon-left=\"bell\" id=\"bot-bell\"></bds-button>\n      <bds-button icon-left=\"settings-general\" id=\"bot-settings\"></bds-button>\n    </bds-button-group>\n  );\n};"},{"name":"FrameworkReact","snippet":"const FrameworkReact = () => {\n  return (\n    <BdsButtonGroup id=\"button-group\">\n      <BdsButton iconLeft=\"builder-publish-bot\" id=\"bot-builder-publish\"></BdsButton>\n      <BdsButton iconLeft=\"search\" id=\"bot-search\"></BdsButton>\n      <BdsButton iconLeft=\"email\" id=\"bot-email\"></BdsButton>\n      <BdsButton iconLeft=\"bell\" id=\"bot-bell\"></BdsButton>\n      <BdsButton iconLeft=\"settings-general\" id=\"bot-settings\"></BdsButton>\n    </BdsButtonGroup>\n  );\n};"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  3 | import DocumentationTemplate from './button-group.mdx';\n  4 |\n> 5 | export default {\n    | ^\n  6 |   title: 'Components/Button Group',\n  7 |   tags: ['autodocs'],\n  8 |   parameters: {"}},"components-button":{"id":"components-button","name":"Button","path":"./src/components/button/button.stories.jsx","examples":[{"name":"Properties","snippet":"const Properties = () => {\n    return (\n        <bds-button\n            id=\"btn\"\n            variant=\"solid\"\n            color=\"primary\"\n            size=\"medium\"\n            disabled=\"false\"\n            full-width={false}\n            justify-content=\"center\"\n            group-icon={false}\n            icon-left=\"\"\n            icon-right=\"\"\n            icon-theme=\"outline\"\n            type=\"button\"\n            type-icon=\"icon\"\n            bds-loading=\"false\"\n            dataTest=\"\">\n            {args.text}\n        </bds-button>\n    );\n};"},{"name":"Events","snippet":"const Events = () => {\n  const [btnText, setBtnText] = useState('Clique aqui');\n  const [valor, setValor] = useState(0);\n\n  const handleCount = () => {\n    setBtnText('Você me clicou');\n    setValor(valor + 1);\n    console.log(`Você clicou no botão ${valor}`);\n  };\n\n  return (\n    <bds-grid align-items=\"center\" gap=\"2\">\n      <bds-button onClick={() => handleCount()}>{btnText}</bds-button>\n      <bds-typo>Você clicou no botão {valor} vezes</bds-typo>\n    </bds-grid>\n  );\n};"},{"name":"FrameworkReact","snippet":"const FrameworkReact = () => {\n  return (\n    <BdsButton variant=\"primary\" icon=\"file-new\" size=\"standard\">\n      Button\n    </BdsButton>\n  );\n};"},{"name":"FlexibleLayouts","snippet":"const FlexibleLayouts = () => {\n  return (\n    <bds-grid direction=\"column\" gap=\"3\" padding=\"3\">\n      <bds-grid direction=\"column\" gap=\"1\">\n        <bds-typo variant=\"fs-16\" bold=\"bold\">Padrão (width dinâmico, conteúdo centralizado)</bds-typo>\n        <bds-button variant=\"solid\" color=\"primary\" icon-left=\"info\" icon-right=\"arrow-right\">\n          Verbo + complemento\n        </bds-button>\n      </bds-grid>\n\n      <bds-grid direction=\"column\" gap=\"1\">\n        <bds-typo variant=\"fs-16\" bold=\"bold\">Full Width (100% largura, conteúdo centralizado)</bds-typo>\n        <bds-button variant=\"solid\" color=\"primary\" icon-left=\"info\" icon-right=\"arrow-right\" full-width>\n          Verbo + complemento\n        </bds-button>\n      </bds-grid>\n\n      <bds-grid direction=\"column\" gap=\"1\">\n        <bds-typo variant=\"fs-16\" bold=\"bold\">Space Between (ícone esquerdo + label à esquerda, ícone direito à direita)</bds-typo>\n        <bds-button variant=\"solid\" color=\"primary\" icon-left=\"info\" icon-right=\"arrow-right\" full-width justify-content=\"space-between\">\n          Verbo + complemento\n        </bds-button>\n      </bds-grid>\n\n      <bds-grid direction=\"column\" gap=\"1\">\n        <bds-typo variant=\"fs-16\" bold=\"bold\">Space Between + Group Icon (ícone esquerdo agrupado com label)</bds-typo>\n        <bds-button variant=\"solid\" color=\"primary\" icon-left=\"info\" icon-right=\"arrow-right\" full-width justify-content=\"space-between\" group-icon>\n          Verbo + complemento\n        </bds-button>\n      </bds-grid>\n    </bds-grid>\n  );\n};"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  3 | import DocumentationTemplate from './button.mdx';\n  4 |\n> 5 | export default {\n    | ^\n  6 |   title: 'Components/Button',\n  7 |   tags: ['autodocs'],\n  8 |   parameters: {"}},"components-card":{"id":"components-card","name":"Card","path":"./src/components/card/card.stories.jsx","examples":[{"name":"Properties","snippet":"const Properties = () => {\n    const el = document.getElementsByClassName('sb-story');\n    if (el.length !== 0) {\n      el[0].style.width = '820px';\n      el[0].style.width = 'auto';\n    }\n\n    return (\n        <bds-card clickable width=\"fit-content\" height=\"\">\n            <bds-card-header align=\"\">\n                <bds-avatar name=\"Blip\" size=\"small\" />\n                <bds-grid direction=\"column\">\n                    <bds-card-title text=\"@TakeBlip\" />\n                    <bds-card-subtitle text=\"10/10/21 11:20 | atualizado há 10 min\" />\n                </bds-grid>\n                <bds-button-icon size=\"small\" variant=\"secondary\" icon=\"more-options-vertical\" />\n            </bds-card-header>\n            <bds-card-body>\n                <bds-grid\n                    direction=\"column\"\n                    xxs=\"12\"\n                    gap=\"1\"\n                    justify-content=\"center\"\n                    align-items=\"center\">\n                    <bds-icon type=\"logo\" size=\"brand\" name=\"blip-chat\" />\n                </bds-grid>\n            </bds-card-body>\n            <bds-card-footer align=\"center\">\n                <bds-typo bold=\"bold\">Blip Chat</bds-typo>\n            </bds-card-footer>\n        </bds-card>\n    );\n};"},{"name":"Events","snippet":"const Events = () => {\n  useEffect(() => {\n    const card = document.getElementById('card');\n    card.addEventListener('cardClick', () => {\n      console.log('Evento cardClick funcionando');\n    });\n  });\nreturn (\n  <bds-card id=\"card\" clickable={true}>\n    <bds-card-header align=\"center\">\n      <bds-card-title text=\"@TakeBlip\"></bds-card-title>\n    </bds-card-header>\n    <bds-card-body>\n      <bds-grid direction=\"column\" xxs=\"12\" gap=\"1\" justify-content=\"center\" align-items=\"center\">\n        <bds-icon type=\"logo\" size=\"brand\" name=\"blip-chat\"></bds-icon>\n      </bds-grid>\n    </bds-card-body>\n    <bds-card-footer>\n      <bds-button size=\"standard\" type=\"button\" type-icon=\"icon\" variant=\"tertiary\">\n        Botão Primário\n      </bds-button>\n    </bds-card-footer>\n  </bds-card>\n);\n};"},{"name":"FrameworkReact","snippet":"const FrameworkReact = () => (\n  <BdsCard>\n    <BdsCardHeader align=\"center\">\n      <BdsCardTitle text=\"@TakeBlip\"></BdsCardTitle>\n    </BdsCardHeader>\n    <BdsCardBody>\n      <BdsGrid direction=\"column\" xxs=\"12\" gap=\"1\" justify-content=\"center\" align-items=\"center\">\n        <BdsIcon type=\"logo\" size=\"brand\" name=\"blip-chat\"></BdsIcon>\n      </BdsGrid>\n    </BdsCardBody>\n    <BdsCardFooter>\n      <BdsButton size=\"standard\" type=\"button\" type-icon=\"icon\" variant=\"tertiary\">\n        Botão Primário\n      </BdsButton>\n    </BdsCardFooter>\n  </BdsCard>\n);"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  3 | import { BdsButton, BdsCard, BdsCardBody, BdsCardFooter, BdsCardHeader, BdsCardTitle, BdsGrid, BdsIcon } from '../../../blip-ds-react/dist/components';\n  4 |\n> 5 | export default {\n    | ^\n  6 |   title: 'Components/Card',\n  7 |   parameters: {\n  8 |     docs: {"}},"components-carousel":{"id":"components-carousel","name":"Carousel","path":"./src/components/carousel/carousel.stories.jsx","examples":[{"name":"Properties","snippet":"const Properties = () => {\n    const el = document.getElementsByClassName('sb-story');\n    if (el.length !== 0) {\n      el[0].style.width = '800px';\n    }\n\n    return (\n        <bds-carousel\n            autoplay={false}\n            autoplay-timeout=\"5000\"\n            autoplay-hover-pause={false}\n            auto-height={false}\n            infinite-loop={false}\n            arrows=\"outside\"\n            bullets=\"outside\"\n            bullets-position=\"center\"\n            slide-per-page={1}\n            gap=\"none\"\n            grab>\n            <bds-carousel-item\n                bg-color=\"#000\"\n                bg-image=\"https://blipmediastore.blip.ai/public-medias/Media_bdcb8c47-a74f-47d8-8b55-9a91a367fead?56983082-a993-4c40-9d78-d7a90416db97\"\n                bg-image-brightness={0.5}\n                theme=\"dark\">\n                <bds-grid padding=\"x-1\" margin=\"y-2\" align-items=\"center\" gap=\"1\">\n                    <bds-grid xxs=\"3\" direction=\"column\">\n                        <bds-illustration type=\"spots\" name=\"star\" />\n                    </bds-grid>\n                    <bds-grid xxs=\"9\" direction=\"column\" margin=\"y-1\" gap=\"1\">\n                        <bds-typo variant=\"fs-20\" bold=\"bold\" margin={false}>1 - {title}\n                        </bds-typo>\n                        <bds-typo variant=\"fs-16\">{paragraph}</bds-typo>\n                        <bds-button>Saiba mais</bds-button>\n                    </bds-grid>\n                </bds-grid>\n            </bds-carousel-item>\n            <bds-carousel-item bg-color=\"#FFF\">\n                <bds-grid padding=\"x-1\" margin=\"y-2\" align-items=\"center\" gap=\"1\">\n                    <bds-grid xxs=\"3\" direction=\"column\">\n                        <bds-illustration type=\"spots\" name=\"check\" />\n                    </bds-grid>\n                    <bds-grid xxs=\"9\" direction=\"column\" margin=\"y-1\" gap=\"1\">\n                        <bds-typo variant=\"fs-20\" bold=\"bold\" margin={false}>2 - {title}\n                        </bds-typo>\n                        <bds-typo variant=\"fs-16\">{paragraph}</bds-typo>\n                        <bds-button>Saiba mais</bds-button>\n                    </bds-grid>\n                </bds-grid>\n            </bds-carousel-item>\n            <bds-carousel-item bg-color=\"#222\" theme=\"dark\">\n                <bds-grid padding=\"x-1\" margin=\"y-2\" align-items=\"center\" gap=\"1\">\n                    <bds-grid xxs=\"3\" direction=\"column\">\n                        <bds-illustration type=\"spots\" name=\"air-ballon\" />\n                    </bds-grid>\n                    <bds-grid xxs=\"9\" direction=\"column\" margin=\"y-1\" gap=\"1\">\n                        <bds-typo variant=\"fs-20\" bold=\"bold\" margin={false}>3 - {title}\n                        </bds-typo>\n                        <bds-typo variant=\"fs-16\">{paragraph}</bds-typo>\n                        <bds-button>Saiba mais</bds-button>\n                    </bds-grid>\n                </bds-grid>\n            </bds-carousel-item>\n            <bds-carousel-item bg-color=\"#FFF\">\n                <bds-grid padding=\"x-1\" margin=\"y-2\" align-items=\"center\" gap=\"1\">\n                    <bds-grid xxs=\"3\" direction=\"column\">\n                        <bds-illustration type=\"spots\" name=\"analytics-satisfaction\" />\n                    </bds-grid>\n                    <bds-grid xxs=\"9\" direction=\"column\" margin=\"y-1\" gap=\"1\">\n                        <bds-typo variant=\"fs-20\" bold=\"bold\" margin={false}>4 - {title}\n                        </bds-typo>\n                        <bds-typo variant=\"fs-16\">{paragraph}</bds-typo>\n                        <bds-button>Saiba mais</bds-button>\n                    </bds-grid>\n                </bds-grid>\n            </bds-carousel-item>\n        </bds-carousel>\n    );\n};"},{"name":"Methods","snippet":"const Methods = () => {\n  const [DATAITEMS, SETDATAITEMS] = useState(DATACAROUSEL);\n\n  const nextSlide = async (id) => {\n    const acc = document.getElementById(id);\n    await acc.nextSlide();\n  };\n  const prevSlide = async (id) => {\n    const acc = document.getElementById(id);\n    await acc.prevSlide();\n  };\n  const setActivated = async (id) => {\n    const acc = document.getElementById(id);\n    await acc.setActivated(2);\n  };\n  const pauseAutoplay = async (id) => {\n    const acc = document.getElementById(id);\n    await acc.pauseAutoplay();\n  };\n  const runAutoplay = async (id) => {\n    const acc = document.getElementById(id);\n    await acc.runAutoplay();\n  };\n  const buildCarousel = async (id) => {\n    const acc = document.getElementById(id);\n    const NEWITEM = {\n      title: `${DATAITEMS.length + 1} - Título do Slide`,\n      subTitle:\n        'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent ipsum augue, pulvinar sit amet tincidunt non.',\n      illustration: {\n        type: 'spots',\n        name: 'analytics-satisfaction',\n      },\n    };\n    SETDATAITEMS([...DATAITEMS, NEWITEM]);\n    await acc.buildCarousel();\n  };\n  return (\n    <BdsGrid direction=\"column\" gap=\"2\">\n      <BdsGrid gap=\"2\">\n        <BdsButton onClick={() => nextSlide('carousel-method')} variant=\"primary\" size=\"short\">\n          nextSlide\n        </BdsButton>\n        <BdsButton onClick={() => prevSlide('carousel-method')} variant=\"primary\" size=\"short\">\n          prevSlide\n        </BdsButton>\n        <BdsButton onClick={() => setActivated('carousel-method')} variant=\"primary\" size=\"short\">\n          setActivated 2\n        </BdsButton>\n        <BdsButton onClick={() => pauseAutoplay('carousel-method')} variant=\"primary\" size=\"short\">\n          pauseAutoplay\n        </BdsButton>\n        <BdsButton onClick={() => runAutoplay('carousel-method')} variant=\"primary\" size=\"short\">\n          runAutoplay\n        </BdsButton>\n        <BdsButton onClick={() => buildCarousel('carousel-method')} variant=\"primary\" size=\"short\">\n          buildCarousel\n        </BdsButton>\n      </BdsGrid>\n      <bds-carousel\n        id=\"carousel-method\"\n        autoplay={true}\n        autoplay-timeout=\"10000\"\n        autoplay-hover-pause={true}\n        arrows=\"none\"\n        bullets={true}\n        infinite-loop={true}\n        slide-per-page={1}\n        gap=\"2\"\n      >\n        {DATAITEMS.map((item, index) => {\n          return (\n            <bds-carousel-item key={index} bg-color={item.bgColor} theme={item.theme}>\n              <bds-grid padding=\"x-7\" margin=\"y-6\" align-items=\"center\">\n                <bds-grid xxs=\"3\" direction=\"column\">\n                  <bds-illustration type={item.illustration.type} name={item.illustration.name}></bds-illustration>\n                </bds-grid>\n                <bds-grid xxs=\"10\" direction=\"column\" gap=\"1\">\n                  <bds-typo variant=\"fs-20\" bold=\"bold\" margin={false}>\n                    {item.title}\n                  </bds-typo>\n                  <bds-typo variant=\"fs-16\">{item.subTitle}</bds-typo>\n                  <bds-button>Saiba mais</bds-button>\n                </bds-grid>\n              </bds-grid>\n            </bds-carousel-item>\n          );\n        })}\n      </bds-carousel>\n    </BdsGrid>\n  );\n};"},{"name":"Events","snippet":"const Events = () => {\n  useEffect(() => {\n    const carousel = document.getElementById('carousel-event');\n    carousel.addEventListener('bdsChangeCarousel', () => {\n      console.log('Evento bdsChangeCarousel funcionando');\n    });\n  });\n  return (\n    <bds-carousel\n      id=\"carousel-event\"\n      arrows=\"outside\"\n      bullets=\"outside\"\n      infinite-loop={true}\n      slide-per-page={1}\n      gap=\"2\"\n    >\n      {DATACAROUSEL.map((item, index) => {\n        return (\n          <bds-carousel-item key={index} bg-color={item.bgColor} theme={item.theme}>\n            <bds-grid padding=\"x-7\" margin=\"y-6\" align-items=\"center\">\n              <bds-grid xxs=\"3\" direction=\"column\">\n                <bds-illustration type={item.illustration.type} name={item.illustration.name}></bds-illustration>\n              </bds-grid>\n              <bds-grid xxs=\"10\" direction=\"column\" gap=\"1\">\n                <bds-typo variant=\"fs-20\" bold=\"bold\" margin={false}>\n                  {item.title}\n                </bds-typo>\n                <bds-typo variant=\"fs-16\">{item.subTitle}</bds-typo>\n                <bds-button>Saiba mais</bds-button>\n              </bds-grid>\n            </bds-grid>\n          </bds-carousel-item>\n        );\n      })}\n    </bds-carousel>\n  );\n};"},{"name":"FrameworkReact","snippet":"const FrameworkReact = () => {\n  return (\n    <BdsCarousel\n      autoplay={false}\n      arrows=\"inside\"\n      bullets=\"inside\"\n      bulletsPosition=\"center\"\n      infiniteLoop={true}\n      slidePerPage={1}\n      gap=\"2\"\n    >\n      {DATACAROUSEL.map((item, index) => {\n        return (\n          <BdsCarouselItem key={index} bgColor={item.bgColor} theme={item.theme}>\n            <BdsGrid padding=\"x-7\" margin=\"y-6\" alignItems=\"center\">\n              <BdsGrid xxs=\"3\" direction=\"column\">\n                <BdsIllustration type={item.illustration.type} name={item.illustration.name}></BdsIllustration>\n              </BdsGrid>\n              <BdsGrid xxs=\"10\" direction=\"column\" gap=\"1\">\n                <BdsTypo variant=\"fs-20\" bold=\"bold\" margin={false}>\n                  {item.title}\n                </BdsTypo>\n                <BdsTypo variant=\"fs-16\">{item.subTitle}</BdsTypo>\n                <BdsButton>Saiba mais</BdsButton>\n              </BdsGrid>\n            </BdsGrid>\n          </BdsCarouselItem>\n        );\n      })}\n    </BdsCarousel>\n  );\n};"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  10 | } from '../../../blip-ds-react/dist/components';\n  11 |\n> 12 | export default {\n     | ^\n  13 |   title: 'Components/Carousel',\n  14 |   tags: ['autodocs'],\n  15 |   parameters: {"}},"components-checkbox":{"id":"components-checkbox","name":"Checkbox","path":"./src/components/checkbox/checkbox.stories.jsx","examples":[{"name":"Properties","snippet":"const Properties = () => <bds-checkbox label=\"Opção do checkbox\" name=\"check\" disabled={false} checked />;"},{"name":"Events","snippet":"const Events = () => {\n  useEffect(() => {\n    const checkbox = document.getElementById('check1');\n    checkbox.addEventListener('bdsChange', (e) => {\n      console.log('Checked: ', e.detail.checked);\n    });\n  });\n  return (\n    <bds-checkbox id=\"check1\" label=\"Selected\" checked></bds-checkbox>\n  )\n};"},{"name":"FrameworkReact","snippet":"const FrameworkReact = () => {\n  return (\n    <BdsCheckbox id=\"check1\" label=\"Selected\" checked></BdsCheckbox>\n  )\n};"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  3 | import { BdsCheckbox } from '../../../blip-ds-react/dist/components';\n  4 |\n> 5 | export default {\n    | ^\n  6 |   title: 'Components/Checkbox',\n  7 |   parameters: {\n  8 |     docs: {"}},"components-chip-clickable":{"id":"components-chip-clickable","name":"Chip Clickable","path":"./src/components/chip-clickable/chip-clickable.stories.jsx","examples":[{"name":"Properties","snippet":"const Properties = () => <bds-chip-clickable\n    color=\"default\"\n    icon=\"\"\n    avatar=\"\"\n    clickable={false}\n    close={false}\n    disabled={false}\n    size=\"tall\">Chip-clickable Default\n      </bds-chip-clickable>;"},{"name":"Events","snippet":"const Events = () => (\n  <bds-chip-clickable color=\"default\" icon=\"\" avatar=\"\" clickable={false} close={false} disabled={false} size=\"tall\">\n    Chip-clickable Default\n  </bds-chip-clickable>\n);"},{"name":"FrameworkReact","snippet":"const FrameworkReact = () => (\n  <BdsChipClickable color=\"default\" icon=\"\" avatar=\"\" clickable={false} close={false} disabled={false} size=\"tall\">\n    Chip-clickable Default\n  </BdsChipClickable>\n);"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  3 | import { BdsChipClickable } from '../../../blip-ds-react/dist/components';\n  4 |\n> 5 | export default {\n    | ^\n  6 |   title: 'Components/Chip Clickable',\n  7 |   parameters: {\n  8 |     docs: {"}},"components-chip-selected":{"id":"components-chip-selected","name":"Chip Selected","path":"./src/components/chip-selected/chip-selected.stories.jsx","examples":[{"name":"Properties","snippet":"const Properties = () => <bds-chip-selected color=\"default\" icon=\"\" selected={false} disabled={false} size=\"tall\">Chip-selected Default\n      </bds-chip-selected>;"},{"name":"Events","snippet":"const Events = () => {\n  useEffect(() => {\n    const chip = document.getElementById('chip-selected');\n    chip.addEventListener('chipClick', () => {\n      console.log('Evento chipClick funcionando');\n    });\n  });\n  return (\n    <bds-chip-selected id=\"chip-selected\" color=\"default\" icon=\"\" selected={false} disabled={false} size=\"tall\">\n      Chip-selected Default\n    </bds-chip-selected>\n  );\n};"},{"name":"FrameworkReact","snippet":"const FrameworkReact = () => (\n  <BdsChipSelected color=\"default\" icon=\"\" avatar=\"\" selected={false} close={false} disabled={false} size=\"tall\">\n    Chip-selected Default\n  </BdsChipSelected>\n);"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  3 | import { BdsChipSelected } from '../../../blip-ds-react/dist/components';\n  4 |\n> 5 | export default {\n    | ^\n  6 |   title: 'Components/Chip Selected',\n  7 |   parameters: {\n  8 |     docs: {"}},"components-chip-tag":{"id":"components-chip-tag","name":"Chip Tag","path":"./src/components/chip-tag/chip-tag.stories.jsx","examples":[{"name":"Properties","snippet":"const Properties = () => <bds-chip-tag color=\"default\" icon=\"\">Chip-tag Default\n      </bds-chip-tag>;"},{"name":"FrameworkReact","snippet":"const FrameworkReact = () => (\n  <BdsChipTag color=\"default\" icon=\"\">\n    Chip-tag Default\n  </BdsChipTag>\n);"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  3 | import DocumentationTemplate from './chip-tag.mdx';\n  4 |\n> 5 | export default {\n    | ^\n  6 |   title: 'Components/Chip Tag',\n  7 |   parameters: {\n  8 |     docs: {"}},"components-datepicker":{"id":"components-datepicker","name":"Datepicker","path":"./src/components/datepicker/datepicker.stories.jsx","examples":[{"name":"Properties","snippet":"const Properties = () => {\n    const el = document.getElementsByClassName('sb-story');\n    if (el.length !== 0) {\n      el[0].style.height = '450px';\n      el[0].style.position = 'relative';\n    }\n\n    return (\n        <bds-datepicker\n            type-of-date=\"single\"\n            start-date-limit=\"31/12/2022\"\n            end-date-limit=\"01/01/2027\"\n            label=\"\"\n            message=\"\"\n            variant-banner=\"warning\"\n            language=\"pt_BR\"\n            disabled={false}\n            value-date-selected=\"\"\n            value-end-date-selected=\"\"\n            position-options=\"auto\" />\n    );\n};"},{"name":"Events","snippet":"const Events = () => {\n  useEffect(() => {\n    const datepicker = document.getElementById('datepicker');\n    datepicker.addEventListener('bdsEndDate', () => {\n      console.log('Evento End Date funcionando');\n    });\n    datepicker.addEventListener('bdsStartDate', () => {\n      console.log('Evento Start Date funcionando');\n    });\n    datepicker.addEventListener('concludeDatepicker', () => {\n      console.log('Evento Conclude funcionando');\n    });\n    datepicker.addEventListener('emptyConcludeDatepicker', () => {\n      console.log('Evento Conclude vazio funcionando');\n    });\n  });\n\n  return (\n    <bds-datepicker id=\"datepicker\" type-of-date=\"period\" start-date-limit=\"31/12/2022\" end-date-limit=\"01/01/2027\" />\n  );\n};"},{"name":"FrameworkReact","snippet":"const FrameworkReact = () => {\n  return <BdsDatepicker type-of-date=\"single\" start-date-limit=\"31/12/2022\" end-date-limit=\"01/01/2027\" />;\n};"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  3 | import { BdsDatepicker } from '../../../blip-ds-react/dist/components';\n  4 |\n> 5 | export default {\n    | ^\n  6 |   title: 'Components/Datepicker',\n  7 |   parameters: {\n  8 |     docs: {"}},"components-divider":{"id":"components-divider","name":"Divider","path":"./src/components/divider/divider.stories.jsx","examples":[{"name":"Properties","snippet":"const Properties = () => {\n    const el = document.getElementsByClassName('sb-story');\n    if (el.length !== 0) {\n      el[0].style.height = '300px';\n      el[0].style.position = 'relative';\n      el[0].style.background = 'none';\n    }\n    return <bds-divider style-type=\"solid\" orientation=\"horizontal\" color=\"divider-1\" />;\n};"},{"name":"FrameworkReact","snippet":"const FrameworkReact = () => {\n  return (\n    <BdsDivider \n      styleType=\"solid\" \n      orientation=\"horizontal\" \n      color=\"divider-1\" \n    ></BdsDivider>\n  );\n};"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  3 | import DocumentationTemplate from './divider.mdx';\n  4 |\n> 5 | export default {\n    | ^\n  6 |   title: 'Components/Divider',\n  7 |   tags: ['autodocs'],\n  8 |   parameters: {"}},"components-dropdown":{"id":"components-dropdown","name":"Dropdown","path":"./src/components/dropdown/dropdown.stories.jsx","examples":[{"name":"Properties","snippet":"const Properties = () => {\n    const el = document.getElementsByClassName('sb-story');\n    if (el.length !== 0) {\n      el[0].style.height = '400px';\n      el[0].style.position = 'relative';\n    }\n\n    return (\n        <bds-dropdown active-mode=\"click\" open={false} position=\"auto\">\n            <div slot=\"dropdown-activator\">\n                <bds-button variant=\"primary\">Open Dropdown</bds-button>\n            </div>\n            <div slot=\"dropdown-content\">\n                <bds-list type-list=\"default\">\n                    <bds-list-item\n                        value=\"03\"\n                        text=\"Text\"\n                        secondary-text=\"Secondary text\"\n                        clickable\n                        icon=\"blip-ideas\" />\n                    <bds-dropdown active-mode=\"hover\" position=\"left-top\">\n                        <div slot=\"dropdown-activator\">\n                            <bds-list-item value=\"01\" text=\"Text\" secondary-text=\"Secondary text\" clickable />\n                        </div>\n                        <div slot=\"dropdown-content\">\n                            <bds-list type-list=\"default\">\n                                <bds-list-item value=\"01\" text=\"Text\" secondary-text=\"Secondary text\" clickable />\n                                <bds-list-item value=\"01\" text=\"Text\" secondary-text=\"Secondary text\" clickable />\n                                <bds-list-item value=\"01\" text=\"Text\" secondary-text=\"Secondary text\" clickable />\n                            </bds-list>\n                        </div>\n                    </bds-dropdown>\n                    <bds-list-item\n                        value=\"04\"\n                        text=\"Text\"\n                        secondary-text=\"Secondary text\"\n                        avatar-name=\"Alvare Horta\" />\n                </bds-list>\n            </div>\n        </bds-dropdown>\n    );\n};"},{"name":"Events","snippet":"const Events = () => {\n  useEffect(() => {\n    const dropdown = document.getElementById('dropdown');\n    dropdown.addEventListener('bdsToggle', () => {\n      console.log('Evento Toggle funcionando');\n    });\n  });\n  return (\n    <bds-dropdown position=\"bottom-left\" id=\"dropdown\">\n      <div slot=\"dropdown-activator\">\n        <bds-button variant=\"primary\">Open Menu</bds-button>\n      </div>\n      <div slot=\"dropdown-content\">\n        <bds-list type-list=\"default\">\n          <bds-list-item\n            value=\"03\"\n            text=\"Text\"\n            secondary-text=\"Secondary text\"\n            clickable\n            icon=\"blip-ideas\"\n          ></bds-list-item>\n          <bds-dropdown position=\"left-top\" active-mode=\"hover\">\n            <div slot=\"dropdown-activator\">\n              <bds-list-item value=\"01\" text=\"Text\" secondary-text=\"Secondary text\" clickable></bds-list-item>\n            </div>\n            <div slot=\"dropdown-content\">\n              <bds-list type-list=\"default\">\n                <bds-list-item value=\"01\" text=\"Text\" secondary-text=\"Secondary text\" clickable></bds-list-item>\n                <bds-list-item value=\"01\" text=\"Text\" secondary-text=\"Secondary text\" clickable></bds-list-item>\n                <bds-list-item value=\"01\" text=\"Text\" secondary-text=\"Secondary text\" clickable></bds-list-item>\n              </bds-list>\n            </div>\n          </bds-dropdown>\n          <bds-list-item\n            value=\"04\"\n            text=\"Text\"\n            secondary-text=\"Secondary text\"\n            avatar-name=\"Alvare Horta\"\n          ></bds-list-item>\n        </bds-list>\n      </div>\n    </bds-dropdown>\n  );\n};"},{"name":"Methods","snippet":"const Methods = () => {\n  const btToggle = async (id) => {\n    const acc = document.getElementById(id);\n    await acc.toggle();\n  };\n  const btOpen = async (id) => {\n    const acc = document.getElementById(id);\n    await acc.setOpen();\n  };\n  const btClose = async (id) => {\n    const acc = document.getElementById(id);\n    await acc.setClose();\n  };\n  return (\n    <bds-grid direction=\"column\" gap=\"2\">\n      <bds-grid gap=\"2\">\n        <bds-button onClick={() => btToggle('dropdown')} variant=\"primary\" size=\"short\">\n          Toggle\n        </bds-button>\n        <bds-button onClick={() => btOpen('dropdown')} variant=\"primary\" size=\"short\">\n          Open\n        </bds-button>\n        <bds-button onClick={() => btClose('dropdown')} variant=\"primary\" size=\"short\">\n          Close\n        </bds-button>\n      </bds-grid>\n      <bds-dropdown id=\"dropdown\" position=\"bottom-left\" active-mode=\"hover\">\n        <div slot=\"dropdown-activator\">\n          <bds-button variant=\"primary\">Open Dropdown</bds-button>\n        </div>\n        <div slot=\"dropdown-content\">\n          <bds-list type-list=\"default\">\n            <bds-list-item value=\"01\" text=\"Text\" clickable icon=\"blip-ideas\"></bds-list-item>\n            <bds-list-item value=\"02\" text=\"Text\" clickable icon=\"blip-ideas\"></bds-list-item>\n            <bds-list-item value=\"03\" text=\"Text\" clickable icon=\"blip-ideas\"></bds-list-item>\n            <bds-list-item value=\"04\" text=\"Text\" clickable icon=\"blip-ideas\"></bds-list-item>\n            <bds-list-item value=\"05\" text=\"Text\" clickable icon=\"blip-ideas\"></bds-list-item>\n          </bds-list>\n        </div>\n      </bds-dropdown>\n    </bds-grid>\n  );\n};"},{"name":"FrameworkReact","snippet":"const FrameworkReact = () => {\n  return (\n    <bds-dropdown>\n      <div slot=\"dropdown-activator\">\n        <bds-button variant=\"primary\">Open Menu</bds-button>\n      </div>\n      <div slot=\"dropdown-content\">\n        <bds-list type-list=\"default\">\n          <bds-list-item\n            value=\"03\"\n            text=\"Text\"\n            secondary-text=\"Secondary text\"\n            clickable\n            icon=\"blip-ideas\"\n          ></bds-list-item>\n          <bds-dropdown is-sub-menu>\n            <div slot=\"dropdown-activator\">\n              <bds-list-item value=\"01\" text=\"Text\" secondary-text=\"Secondary text\" clickable></bds-list-item>\n            </div>\n            <div slot=\"dropdown-content\">\n              <bds-list type-list=\"default\">\n                <bds-list-item value=\"01\" text=\"Text\" secondary-text=\"Secondary text\" clickable></bds-list-item>\n                <bds-list-item value=\"01\" text=\"Text\" secondary-text=\"Secondary text\" clickable></bds-list-item>\n                <bds-list-item value=\"01\" text=\"Text\" secondary-text=\"Secondary text\" clickable></bds-list-item>\n              </bds-list>\n            </div>\n          </bds-dropdown>\n          <bds-list-item\n            value=\"04\"\n            text=\"Text\"\n            secondary-text=\"Secondary text\"\n            avatar-name=\"Alvare Horta\"\n          ></bds-list-item>\n        </bds-list>\n      </div>\n    </bds-dropdown>\n  );\n};"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  2 | import DocumentationTemplate from './dropdown.mdx';\n  3 |\n> 4 | export default {\n    | ^\n  5 |   title: 'Components/Dropdown',\n  6 |   parameters: {\n  7 |     docs: {"}},"components-grid":{"id":"components-grid","name":"Grid","path":"./src/components/grid/grid.stories.jsx","examples":[{"name":"Properties","snippet":"const Properties = () => <bds-grid\n    style={gridStyle}\n    container=\"\"\n    align-items=\"\"\n    container-fluid=\"\"\n    direction=\"\"\n    flex-wrap=\"\"\n    gap=\"\"\n    height=\"\"\n    justify-content=\"\"\n    margin=\"\"\n    padding=\"\"\n    xxs=\"\"\n    xs=\"\"\n    sm=\"\"\n    md=\"\"\n    lg=\"\"\n    xg=\"\"\n    xxs-off-set=\"\"\n    xs-off-set=\"\"\n    sm-off-set=\"\"\n    md-off-set=\"\"\n    lg-off-set=\"\">\n    <bds-typo bold=\"semi-bold\" style={{color: '#fff'}}>Texto do Container</bds-typo>\n</bds-grid>;"},{"name":"FrameworkReact","snippet":"const FrameworkReact = () => (\n  <BdsGrid container>\n    <bds-paper style={paperSize}>\n      <BdsGrid justify-content=\"center\" xxs=\"12\" padding=\"3\">\n        <bds-typo>Container</bds-typo>\n      </BdsGrid>\n    </bds-paper>\n  </BdsGrid>\n);"},{"name":"containerGrid","snippet":"const containerGrid = () => (\n  <bds-grid container>\n    <bds-paper style={paperSize}>\n      <bds-grid justify-content=\"center\" xxs=\"12\" padding=\"3\">\n        <bds-typo>Container</bds-typo>\n      </bds-grid>\n    </bds-paper>\n  </bds-grid>\n);"},{"name":"columnGrid","snippet":"const columnGrid = () => (\n  <bds-grid direction=\"column\" xxs=\"12\">\n    <bds-grid container flex-wrap=\"wrap\">\n      <bds-grid xxs=\"8\" margin=\"y-2\">\n        <bds-paper style={paperSize}>\n          <bds-typo>xxs=8</bds-typo>\n        </bds-paper>\n      </bds-grid>\n\n      <bds-grid xxs=\"4\" margin=\"y-2\">\n        <bds-paper style={paperSize}>\n          <bds-typo>xxs=8</bds-typo>\n        </bds-paper>\n      </bds-grid>\n    </bds-grid>\n\n    <bds-grid container flex-wrap=\"wrap\">\n      <bds-grid xxs=\"4\">\n        <bds-paper style={paperSize}>\n          <bds-typo>xxs=8</bds-typo>\n        </bds-paper>\n      </bds-grid>\n\n      <bds-grid xxs=\"8\">\n        <bds-paper style={paperSize}>\n          <bds-typo>xxs=8</bds-typo>\n        </bds-paper>\n      </bds-grid>\n    </bds-grid>\n  </bds-grid>\n);"},{"name":"breakpointGrid","snippet":"const breakpointGrid = () => (\n  <bds-grid direction=\"column\" xxs=\"12\">\n    <bds-grid container flex-wrap=\"wrap\">\n      <bds-grid xxs=\"6\" md=\"8\" margin=\"y-2\">\n        <bds-paper style={paperSize}>\n          <bds-typo>xxs=6 md=8</bds-typo>\n        </bds-paper>\n      </bds-grid>\n\n      <bds-grid xxs=\"6\" md=\"4\" margin=\"y-2\">\n        <bds-paper style={paperSize}>\n          <bds-typo>xxs=6 md=4</bds-typo>\n        </bds-paper>\n      </bds-grid>\n    </bds-grid>\n\n    <bds-grid container flex-wrap=\"wrap\">\n      <bds-grid xxs=\"6\" md=\"4\">\n        <bds-paper style={paperSize}>\n          <bds-typo>xxs=6 md=4</bds-typo>\n        </bds-paper>\n      </bds-grid>\n\n      <bds-grid xxs=\"6\" md=\"8\">\n        <bds-paper style={paperSize}>\n          <bds-typo>xxs=6 md=8</bds-typo>\n        </bds-paper>\n      </bds-grid>\n    </bds-grid>\n  </bds-grid>\n);"},{"name":"gapGrid","snippet":"const gapGrid = () => (\n  <bds-grid container flex-wrap=\"wrap\" justify-content=\"center\">\n    <bds-grid xxs=\"2\" margin=\"y-2\">\n      <bds-paper style={paperHeight}>\n        <bds-typo></bds-typo>\n      </bds-paper>\n    </bds-grid>\n\n    <bds-grid xxs=\"2\" margin=\"y-2\">\n      <bds-paper style={paperHeight}>\n        <bds-typo></bds-typo>\n      </bds-paper>\n    </bds-grid>\n\n    <bds-grid xxs=\"2\" margin=\"y-2\">\n      <bds-paper style={paperHeight}>\n        <bds-typo></bds-typo>\n      </bds-paper>\n    </bds-grid>\n  </bds-grid>\n);"},{"name":"directionGrid","snippet":"const directionGrid = () => (\n  <bds-grid xxs=\"12\" direction=\"column\" justify-content=\"center\">\n    <bds-grid xxs=\"12\" margin=\"t-2\" justify-content=\"center\">\n      <bds-typo>Direction = row</bds-typo>\n    </bds-grid>\n    <bds-grid container direction=\"row\" flex-wrap=\"wrap\" justify-content=\"center\">\n      <bds-grid xxs=\"2\" margin=\"y-2\">\n        <bds-paper style={miniCards}>\n          <bds-typo>1</bds-typo>\n        </bds-paper>\n      </bds-grid>\n\n      <bds-grid xxs=\"2\" margin=\"y-2\">\n        <bds-paper style={miniCards}>\n          <bds-typo>2</bds-typo>\n        </bds-paper>\n      </bds-grid>\n\n      <bds-grid xxs=\"2\" margin=\"y-2\">\n        <bds-paper style={miniCards}>\n          <bds-typo>3</bds-typo>\n        </bds-paper>\n      </bds-grid>\n    </bds-grid>\n    <bds-grid xxs=\"12\" margin=\"t-4\" justify-content=\"center\">\n      <bds-typo>Direction = row-reverse</bds-typo>\n    </bds-grid>\n    <bds-grid container direction=\"row-reverse\" flex-wrap=\"wrap\" justify-content=\"center\">\n      <bds-grid xxs=\"2\" margin=\"y-2\">\n        <bds-paper style={miniCards}>\n          <bds-typo>1</bds-typo>\n        </bds-paper>\n      </bds-grid>\n\n      <bds-grid xxs=\"2\" margin=\"y-2\">\n        <bds-paper style={miniCards}>\n          <bds-typo>2</bds-typo>\n        </bds-paper>\n      </bds-grid>\n\n      <bds-grid xxs=\"2\" margin=\"y-2\">\n        <bds-paper style={miniCards}>\n          <bds-typo>3</bds-typo>\n        </bds-paper>\n      </bds-grid>\n    </bds-grid>\n    <bds-grid xxs=\"12\" margin=\"t-4\" justify-content=\"center\">\n      <bds-typo>Direction = column</bds-typo>\n    </bds-grid>\n    <bds-grid container direction=\"column\" align-items=\"center\" flex-wrap=\"wrap\" justify-content=\"center\">\n      <bds-grid xxs=\"2\" margin=\"y-2\">\n        <bds-paper style={miniCards}>\n          <bds-typo>1</bds-typo>\n        </bds-paper>\n      </bds-grid>\n\n      <bds-grid xxs=\"2\" margin=\"y-2\">\n        <bds-paper style={miniCards}>\n          <bds-typo>2</bds-typo>\n        </bds-paper>\n      </bds-grid>\n\n      <bds-grid xxs=\"2\" margin=\"y-2\">\n        <bds-paper style={miniCards}>\n          <bds-typo>3</bds-typo>\n        </bds-paper>\n      </bds-grid>\n    </bds-grid>\n    <bds-grid xxs=\"12\" margin=\"t-4\" justify-content=\"center\">\n      <bds-typo>Direction = column-reverse</bds-typo>\n    </bds-grid>\n    <bds-grid container direction=\"column-reverse\" flex-wrap=\"wrap\" align-items=\"center\" justify-content=\"center\">\n      <bds-grid xxs=\"2\" margin=\"y-2\">\n        <bds-paper style={miniCards}>\n          <bds-typo>1</bds-typo>\n        </bds-paper>\n      </bds-grid>\n\n      <bds-grid xxs=\"2\" margin=\"y-2\">\n        <bds-paper style={miniCards}>\n          <bds-typo>2</bds-typo>\n        </bds-paper>\n      </bds-grid>\n\n      <bds-grid xxs=\"2\" margin=\"y-2\">\n        <bds-paper style={miniCards}>\n          <bds-typo>3</bds-typo>\n        </bds-paper>\n      </bds-grid>\n    </bds-grid>\n  </bds-grid>\n);"},{"name":"justifyContentGrid","snippet":"const justifyContentGrid = () => (\n  <bds-grid xxs=\"12\" direction=\"column\" justify-content=\"center\">\n    <bds-grid xxs=\"12\" margin=\"t-2\" justify-content=\"center\">\n      <bds-typo>justify-content = center</bds-typo>\n    </bds-grid>\n\n    <bds-grid container direction=\"row\" flex-wrap=\"wrap\" justify-content=\"center\">\n      <bds-grid xxs=\"2\" margin=\"y-2\">\n        <bds-paper style={miniCards}>\n          <bds-typo>1</bds-typo>\n        </bds-paper>\n      </bds-grid>\n\n      <bds-grid xxs=\"2\" margin=\"y-2\">\n        <bds-paper style={miniCards}>\n          <bds-typo>2</bds-typo>\n        </bds-paper>\n      </bds-grid>\n\n      <bds-grid xxs=\"2\" margin=\"y-2\">\n        <bds-paper style={miniCards}>\n          <bds-typo>3</bds-typo>\n        </bds-paper>\n      </bds-grid>\n    </bds-grid>\n\n    <bds-grid xxs=\"12\" margin=\"t-4\" justify-content=\"center\">\n      <bds-typo>justify-content = flex-start</bds-typo>\n    </bds-grid>\n    <bds-grid container direction=\"row\" flex-wrap=\"wrap\" justify-content=\"flex-start\">\n      <bds-grid xxs=\"2\" margin=\"y-2\">\n        <bds-paper style={miniCards}>\n          <bds-typo>1</bds-typo>\n        </bds-paper>\n      </bds-grid>\n\n      <bds-grid xxs=\"2\" margin=\"y-2\">\n        <bds-paper style={miniCards}>\n          <bds-typo>2</bds-typo>\n        </bds-paper>\n      </bds-grid>\n\n      <bds-grid xxs=\"2\" margin=\"y-2\">\n        <bds-paper style={miniCards}>\n          <bds-typo>3</bds-typo>\n        </bds-paper>\n      </bds-grid>\n    </bds-grid>\n\n    <bds-grid xxs=\"12\" margin=\"t-4\" justify-content=\"center\">\n      <bds-typo>justify-content = flex-end</bds-typo>\n    </bds-grid>\n    <bds-grid container direction=\"row\" flex-wrap=\"wrap\" justify-content=\"flex-end\">\n      <bds-grid xxs=\"2\" margin=\"y-2\">\n        <bds-paper style={miniCards}>\n          <bds-typo>1</bds-typo>\n        </bds-paper>\n      </bds-grid>\n\n      <bds-grid xxs=\"2\" margin=\"y-2\">\n        <bds-paper style={miniCards}>\n          <bds-typo>2</bds-typo>\n        </bds-paper>\n      </bds-grid>\n\n      <bds-grid xxs=\"2\" margin=\"y-2\">\n        <bds-paper style={miniCards}>\n          <bds-typo>3</bds-typo>\n        </bds-paper>\n      </bds-grid>\n    </bds-grid>\n\n    <bds-grid xxs=\"12\" margin=\"t-4\" justify-content=\"center\">\n      <bds-typo>justify-content = space-between</bds-typo>\n    </bds-grid>\n    <bds-grid container direction=\"row\" flex-wrap=\"wrap\" justify-content=\"space-between\">\n      <bds-grid xxs=\"2\" margin=\"y-2\">\n        <bds-paper style={miniCards}>\n          <bds-typo>1</bds-typo>\n        </bds-paper>\n      </bds-grid>\n\n      <bds-grid xxs=\"2\" margin=\"y-2\">\n        <bds-paper style={miniCards}>\n          <bds-typo>2</bds-typo>\n        </bds-paper>\n      </bds-grid>\n\n      <bds-grid xxs=\"2\" margin=\"y-2\">\n        <bds-paper style={miniCards}>\n          <bds-typo>3</bds-typo>\n        </bds-paper>\n      </bds-grid>\n    </bds-grid>\n\n    <bds-grid xxs=\"12\" margin=\"t-4\" justify-content=\"center\">\n      <bds-typo>justify-content = space-around</bds-typo>\n    </bds-grid>\n    <bds-grid container direction=\"row\" flex-wrap=\"wrap\" justify-content=\"space-around\">\n      <bds-grid xxs=\"2\" margin=\"y-2\">\n        <bds-paper style={miniCards}>\n          <bds-typo>1</bds-typo>\n        </bds-paper>\n      </bds-grid>\n\n      <bds-grid xxs=\"2\" margin=\"y-2\">\n        <bds-paper style={miniCards}>\n          <bds-typo>2</bds-typo>\n        </bds-paper>\n      </bds-grid>\n\n      <bds-grid xxs=\"2\" margin=\"y-2\">\n        <bds-paper style={miniCards}>\n          <bds-typo>3</bds-typo>\n        </bds-paper>\n      </bds-grid>\n    </bds-grid>\n\n    <bds-grid xxs=\"12\" margin=\"t-4\" justify-content=\"center\">\n      <bds-typo>justify-content = space-evenly</bds-typo>\n    </bds-grid>\n    <bds-grid container direction=\"row\" flex-wrap=\"wrap\" justify-content=\"space-evenly\">\n      <bds-grid xxs=\"2\" margin=\"y-2\">\n        <bds-paper style={miniCards}>\n          <bds-typo>1</bds-typo>\n        </bds-paper>\n      </bds-grid>\n\n      <bds-grid xxs=\"2\" margin=\"y-2\">\n        <bds-paper style={miniCards}>\n          <bds-typo>2</bds-typo>\n        </bds-paper>\n      </bds-grid>\n\n      <bds-grid xxs=\"2\" margin=\"y-2\">\n        <bds-paper style={miniCards}>\n          <bds-typo>3</bds-typo>\n        </bds-paper>\n      </bds-grid>\n    </bds-grid>\n  </bds-grid>\n);"},{"name":"alignItemsGrid","snippet":"const alignItemsGrid = () => (\n  <bds-grid xxs=\"12\" direction=\"column\" justify-content=\"center\">\n    <bds-grid xxs=\"12\" margin=\"t-2\" justify-content=\"center\">\n      <bds-typo>align-items = center</bds-typo>\n    </bds-grid>\n    <bds-grid style={{ height: '300px' }} container direction=\"row\" flex-wrap=\"wrap\" align-items=\"center\">\n      <bds-grid xxs=\"2\" margin=\"y-2\">\n        <bds-paper style={miniCards}>\n          <bds-typo>1</bds-typo>\n        </bds-paper>\n      </bds-grid>\n\n      <bds-grid xxs=\"2\" margin=\"y-2\">\n        <bds-paper style={miniCards}>\n          <bds-typo>2</bds-typo>\n        </bds-paper>\n      </bds-grid>\n\n      <bds-grid xxs=\"2\" margin=\"y-2\">\n        <bds-paper style={miniCards}>\n          <bds-typo>3</bds-typo>\n        </bds-paper>\n      </bds-grid>\n    </bds-grid>\n\n    <bds-grid xxs=\"12\" margin=\"t-4\" justify-content=\"center\">\n      <bds-typo>align-items = flex-start</bds-typo>\n    </bds-grid>\n    <bds-grid style={{ height: '300px' }} container direction=\"row\" flex-wrap=\"wrap\" align-items=\"flex-start\">\n      <bds-grid xxs=\"2\" margin=\"y-2\">\n        <bds-paper style={miniCards}>\n          <bds-typo>1</bds-typo>\n        </bds-paper>\n      </bds-grid>\n\n      <bds-grid xxs=\"2\" margin=\"y-2\">\n        <bds-paper style={miniCards}>\n          <bds-typo>2</bds-typo>\n        </bds-paper>\n      </bds-grid>\n\n      <bds-grid xxs=\"2\" margin=\"y-2\">\n        <bds-paper style={miniCards}>\n          <bds-typo>3</bds-typo>\n        </bds-paper>\n      </bds-grid>\n    </bds-grid>\n\n    <bds-grid xxs=\"12\" margin=\"t-4\" justify-content=\"center\">\n      <bds-typo>align-items = flex-end</bds-typo>\n    </bds-grid>\n    <bds-grid style={{ height: '300px' }} container direction=\"row\" flex-wrap=\"wrap\" align-items=\"flex-end\">\n      <bds-grid xxs=\"2\" margin=\"y-2\">\n        <bds-paper style={miniCards}>\n          <bds-typo>1</bds-typo>\n        </bds-paper>\n      </bds-grid>\n\n      <bds-grid xxs=\"2\" margin=\"y-2\">\n        <bds-paper style={miniCards}>\n          <bds-typo>2</bds-typo>\n        </bds-paper>\n      </bds-grid>\n\n      <bds-grid xxs=\"2\" margin=\"y-2\">\n        <bds-paper style={miniCards}>\n          <bds-typo>3</bds-typo>\n        </bds-paper>\n      </bds-grid>\n    </bds-grid>\n\n    <bds-grid xxs=\"12\" margin=\"t-4\" justify-content=\"center\">\n      <bds-typo>align-items = stretch</bds-typo>\n    </bds-grid>\n    <bds-grid style={{ height: '300px' }} container direction=\"row\" flex-wrap=\"wrap\" align-items=\"stretch\">\n      <bds-grid xxs=\"2\" margin=\"y-2\">\n        <bds-paper style={{ width: '50px', padding: '24px' }}>\n          <bds-typo>1</bds-typo>\n        </bds-paper>\n      </bds-grid>\n\n      <bds-grid xxs=\"2\" margin=\"y-2\">\n        <bds-paper style={{ width: '50px', padding: '24px' }}>\n          <bds-typo>2</bds-typo>\n        </bds-paper>\n      </bds-grid>\n\n      <bds-grid xxs=\"2\" margin=\"y-2\">\n        <bds-paper style={{ width: '50px', padding: '24px' }}>\n          <bds-typo>3</bds-typo>\n        </bds-paper>\n      </bds-grid>\n    </bds-grid>\n\n    <bds-grid xxs=\"12\" margin=\"t-4\" justify-content=\"center\">\n      <bds-typo>align-items = baseline</bds-typo>\n    </bds-grid>\n    <bds-grid style={{ height: '300px' }} container direction=\"row\" flex-wrap=\"wrap\" align-items=\"baseline\">\n      <bds-grid xxs=\"2\" margin=\"y-2\">\n        <bds-paper style={{ width: '30px', padding: '20px' }}>\n          <bds-typo>1</bds-typo>\n        </bds-paper>\n      </bds-grid>\n\n      <bds-grid xxs=\"2\" margin=\"y-2\">\n        <bds-paper style={{ width: '30px', padding: '30px' }}>\n          <bds-typo>2</bds-typo>\n        </bds-paper>\n      </bds-grid>\n\n      <bds-grid xxs=\"2\" margin=\"y-2\">\n        <bds-paper style={{ width: '30px', padding: '40px' }}>\n          <bds-typo>3</bds-typo>\n        </bds-paper>\n      </bds-grid>\n    </bds-grid>\n  </bds-grid>\n);"},{"name":"examplePageGrid","snippet":"const examplePageGrid = () => (\n  <bds-grid xxs=\"11\">\n\n    <bds-grid xxs=\"12\" direction=\"column\" wrap=\"no-wrap\" style={page}>\n\n      <bds-grid xxs=\"12\">\n        <bds-grid xxs=\"12\" padding=\"4\" justify-content=\"center\" style={header}>\n          <bds-typo bold=\"bold\" style={text} variant=\"fs-24\" margin=\"false\">\n          Example of page using bds-grid\n        </bds-typo>\n        </bds-grid>\n      </bds-grid>\n\n      <bds-grid xxs=\"12\" flex-wrap=\"wrap\" style={body}>\n        <bds-grid xxs=\"12\" md=\"3\" padding=\"2\"  style={sidebar}>\n        <bds-typo bold=\"bold\" style={text} variant=\"fs-16\" no-wrap=\"false\" margin=\"false\">\n          Example of text on sidebar for test\n        </bds-typo>\n        </bds-grid>\n        <bds-grid xxs=\"12\" md=\"9\" padding=\"2\" style={content}>\n        <bds-typo bold=\"bold\" style={text} variant=\"fs-16\" margin=\"false\" no-wrap=\"false\">\n          Example of text on content for test\n        </bds-typo>\n        </bds-grid>\n      </bds-grid>\n\n    </bds-grid>\n\n  </bds-grid>\n);"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  3 | import { BdsGrid } from '../../../blip-ds-react/dist/components';\n  4 |\n> 5 | export default {\n    | ^\n  6 |   title: 'Components/Grid',\n  7 |   parameters: {\n  8 |     docs: {"}},"components-icon":{"id":"components-icon","name":"Icon","path":"./src/components/icon/icon.stories.jsx","examples":[{"name":"Properties","snippet":"const Properties = () => {\n    return <bds-icon theme=\"outline\" size=\"medium\" name=\"info\" />;\n};"},{"name":"FrameworkReact","snippet":"const FrameworkReact = () => {\n  return <BdsIcon theme=\"outline\" size=\"brand\" name=\"info\"></BdsIcon>;\n};"},{"name":"AllOutlineIcons","snippet":"const AllOutlineIcons = () => {\n  const [searchValue, setSearchValue] = useState('');\n  const [filteredIcons, setFilteredIcons] = useState([]);\n  const story = [];\n\n  useEffect(() => {\n    const iconOutline = document.getElementById('icon-outline');\n    iconOutline.addEventListener('bdsInput', (event) => {\n      setSearchValue(event.target.value);\n    });\n  }, []);\n\n  useEffect(() => {\n    // Aqui você pode filtrar os ícones com base no valor de pesquisa.\n    const filtered = outlineIconsName.filter((name) => name.toLowerCase().includes(searchValue.toLowerCase()));\n    setFilteredIcons(filtered);\n  }, [searchValue]);\n\n  filteredIcons.forEach((name) => {\n    story.push(\n      <div key={name} style={iconStyles}>\n        <bds-icon theme=\"outline\" size=\"xxx-large\" name={name}></bds-icon>\n        <bds-typo variant=\"fs-10\">{name}</bds-typo>\n      </div>,\n    );\n  });\n\n  return (\n    <bds-grid direction=\"column\" gap=\"3\">\n      <bds-grid md=\"6\" align-items=\"center\" gap=\"3\">\n        <bds-input id=\"icon-outline\" placeholder=\"search icon\"></bds-input>\n      </bds-grid>\n\n      <div style={iconWrapperStyles}>{story}</div>\n    </bds-grid>\n  );\n};"},{"name":"AllSolidIcons","snippet":"const AllSolidIcons = () => {\n  const [searchValue, setSearchValue] = useState('');\n  const [filteredIcons, setFilteredIcons] = useState([]);\n  const story = [];\n\n  useEffect(() => {\n    const iconOutline = document.getElementById('icon-solid');\n    iconOutline.addEventListener('bdsInput', (event) => {\n      setSearchValue(event.target.value);\n    });\n  }, []);\n\n  useEffect(() => {\n    // Aqui você pode filtrar os ícones com base no valor de pesquisa.\n    const filtered = solidIconsName.filter((name) => name.toLowerCase().includes(searchValue.toLowerCase()));\n    setFilteredIcons(filtered);\n  }, [searchValue]);\n\n  filteredIcons.forEach((name) => {\n    story.push(\n      <div key={name} style={iconStyles}>\n        <bds-icon theme=\"solid\" size=\"xxx-large\" name={name}></bds-icon>\n        <bds-typo variant=\"fs-10\">{name}</bds-typo>\n      </div>,\n    );\n  });\n\n  return (\n    <bds-grid direction=\"column\" gap=\"3\">\n      <bds-grid md=\"6\" align-items=\"center\" gap=\"3\">\n        <bds-input id=\"icon-solid\" placeholder=\"search icon\"></bds-input>\n      </bds-grid>\n\n      <div style={iconWrapperStyles}>{story}</div>\n    </bds-grid>\n  );\n};"},{"name":"AllEmojis","snippet":"const AllEmojis = () => {\n  const [searchValue, setSearchValue] = useState('');\n  const [filteredIcons, setFilteredIcons] = useState([]);\n  const story = [];\n\n  useEffect(() => {\n    const emoji = document.getElementById('emoji');\n    emoji.addEventListener('bdsInput', (event) => {\n      setSearchValue(event.target.value);\n    });\n  }, []);\n\n  useEffect(() => {\n    // Aqui você pode filtrar os ícones com base no valor de pesquisa.\n    const filtered = emojiNames.filter((name) => name.toLowerCase().includes(searchValue.toLowerCase()));\n    setFilteredIcons(filtered);\n  }, [searchValue]);\n\n  filteredIcons.forEach((name) => {\n    story.push(\n      <bds-grid height=\"80px\" gap=\"1\" key={name} style={iconStyles}>\n        <bds-icon type=\"emoji\" size=\"xxx-large\" name={name}></bds-icon>\n        <bds-typo variant=\"fs-10\">{name}</bds-typo>\n      </bds-grid>,\n    );\n  });\n\n  return (\n    <bds-grid direction=\"column\" gap=\"3\">\n      <bds-grid md=\"6\" align-items=\"center\" gap=\"3\">\n        <bds-input id=\"emoji\" placeholder=\"search icon\"></bds-input>\n      </bds-grid>\n\n      <div style={iconWrapperStyles}>{story}</div>\n    </bds-grid>\n  );\n};"},{"name":"AllLogos","snippet":"const AllLogos = () => {\n  const [searchValue, setSearchValue] = useState('');\n  const [filteredIcons, setFilteredIcons] = useState([]);\n  const story = [];\n\n  useEffect(() => {\n    const logos = document.getElementById('logos');\n    logos.addEventListener('bdsInput', (event) => {\n      setSearchValue(event.target.value);\n    });\n  }, []);\n\n  useEffect(() => {\n    // Aqui você pode filtrar os ícones com base no valor de pesquisa.\n    const filtered = logoNames.filter((name) => name.toLowerCase().includes(searchValue.toLowerCase()));\n    setFilteredIcons(filtered);\n  }, [searchValue]);\n\n  filteredIcons.forEach((name) => {\n    story.push(\n      <bds-grid height=\"80px\" gap=\"1\" key={name} style={iconStyles}>\n        <bds-icon type=\"logo\" size=\"xxx-large\" name={name}></bds-icon>\n        <bds-typo variant=\"fs-10\">{name}</bds-typo>\n      </bds-grid>,\n    );\n  });\n\n  return (\n    <bds-grid direction=\"column\" gap=\"3\">\n      <bds-grid md=\"6\" align-items=\"center\" gap=\"3\">\n        <bds-input id=\"logos\" placeholder=\"search icon\"></bds-input>\n      </bds-grid>\n\n      <div style={iconWrapperStyles}>{story}</div>\n    </bds-grid>\n  );\n};"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  3 | import { BdsIcon } from '../../../blip-ds-react/dist/components';\n  4 |\n> 5 | export default {\n    | ^\n  6 |   title: 'Components/Icon',\n  7 |   parameters: {\n  8 |     docs: {"}},"components-illustration":{"id":"components-illustration","name":"illustration","path":"./src/components/illustration/illustration.stories.jsx","examples":[{"name":"Properties","snippet":"const Properties = () => {\n    return <bds-illustration style={illustrationProps} type=\"default\" name=\"agent-1\" />;\n};"},{"name":"FrameworkReact","snippet":"const FrameworkReact = () => {\n  return <BdsIllustration style={illustrationProps} type=\"default\" name=\"agent-1\"></BdsIllustration>;\n};"},{"name":"IllustrationsDefault","snippet":"const IllustrationsDefault = () => {\n  const [searchValue, setSearchValue] = useState('');\n  const [filteredIllustation, setFilteredIllustration] = useState([]);\n  const defaultArray = [];\n\n  useEffect(() => {\n    const illustrationDefault = document.getElementById('illustration-default');\n    illustrationDefault.addEventListener('bdsInput', (event) => {\n      setSearchValue(event.target.value);\n    });\n  }, []);\n\n  useEffect(() => {\n    // Aqui você pode filtrar os ícones com base no valor de pesquisa.\n    const filtered = defaults.filter((name) => name.toLowerCase().includes(searchValue.toLowerCase()));\n    setFilteredIllustration(filtered);\n  }, [searchValue]);\n\n  filteredIllustation.forEach((name) => {\n    defaultArray.push(\n      <div key={name} style={illustrationStyles}>\n        <bds-illustration type=\"default\" name={name}></bds-illustration>\n        <bds-typo variant=\"fs-10\">{name}</bds-typo>\n      </div>,\n    );\n  });\n\n  return (\n    <bds-grid direction=\"column\" gap=\"3\">\n      <bds-grid md=\"6\" align-items=\"center\" gap=\"3\">\n        <bds-input id=\"illustration-default\" placeholder=\"search illustration\"></bds-input>\n      </bds-grid>\n      <div style={illustrationWrapperStyles}>{defaultArray}</div>\n    </bds-grid>\n  );\n};"},{"name":"IllustrationsScreens","snippet":"const IllustrationsScreens = () => {\n  const [searchValue, setSearchValue] = useState('');\n  const [filteredIllustation, setFilteredIllustration] = useState([]);\n  const defaultArray = [];\n\n  useEffect(() => {\n    const illustrationScreens = document.getElementById('illustration-screens');\n    illustrationScreens.addEventListener('bdsInput', (event) => {\n      setSearchValue(event.target.value);\n    });\n  }, []);\n\n  useEffect(() => {\n    // Aqui você pode filtrar os ícones com base no valor de pesquisa.\n    const filtered = screens.filter((name) => name.toLowerCase().includes(searchValue.toLowerCase()));\n    setFilteredIllustration(filtered);\n  }, [searchValue]);\n\n  filteredIllustation.forEach((name) => {\n    defaultArray.push(\n      <div key={name} style={illustrationStyles}>\n        <bds-illustration type=\"screens\" name={name}></bds-illustration>\n        <bds-typo variant=\"fs-10\">{name}</bds-typo>\n      </div>,\n    );\n  });\n\n  return (\n    <bds-grid direction=\"column\" gap=\"3\">\n      <bds-grid md=\"6\" align-items=\"center\" gap=\"3\">\n        <bds-input id=\"illustration-screens\" placeholder=\"search illustration\"></bds-input>\n      </bds-grid>\n      <div style={illustrationWrapperStyles}>{defaultArray}</div>\n    </bds-grid>\n  );\n};"},{"name":"IllustrationsBlipSolid","snippet":"const IllustrationsBlipSolid = () => {\n  const [searchValue, setSearchValue] = useState('');\n  const [filteredIllustation, setFilteredIllustration] = useState([]);\n  const defaultArray = [];\n\n  useEffect(() => {\n    const illustrationBlipSolid = document.getElementById('illustration-blip-solid');\n    illustrationBlipSolid.addEventListener('bdsInput', (event) => {\n      setSearchValue(event.target.value);\n    });\n  }, []);\n\n  useEffect(() => {\n    // Aqui você pode filtrar os ícones com base no valor de pesquisa.\n    const filtered = blipSolid.filter((name) => name.toLowerCase().includes(searchValue.toLowerCase()));\n    setFilteredIllustration(filtered);\n  }, [searchValue]);\n\n  filteredIllustation.forEach((name) => {\n    defaultArray.push(\n      <div key={name} style={illustrationStyles}>\n        <bds-illustration type=\"blip-solid\" name={name}></bds-illustration>\n        <bds-typo variant=\"fs-10\">{name}</bds-typo>\n      </div>,\n    );\n  });\n\n  return (\n    <bds-grid direction=\"column\" gap=\"3\">\n      <bds-grid md=\"6\" align-items=\"center\" gap=\"3\">\n        <bds-input id=\"illustration-blip-solid\" placeholder=\"search illustration\"></bds-input>\n      </bds-grid>\n      <div style={illustrationWrapperStyles}>{defaultArray}</div>\n    </bds-grid>\n  );\n};"},{"name":"IllustrationsBlipOutline","snippet":"const IllustrationsBlipOutline = () => {\n  const [searchValue, setSearchValue] = useState('');\n  const [filteredIllustation, setFilteredIllustration] = useState([]);\n  const defaultArray = [];\n\n  useEffect(() => {\n    const illustrationBlipOutline = document.getElementById('illustration-blip-outline');\n    illustrationBlipOutline.addEventListener('bdsInput', (event) => {\n      setSearchValue(event.target.value);\n    });\n  }, []);\n\n  useEffect(() => {\n    // Aqui você pode filtrar os ícones com base no valor de pesquisa.\n    const filtered = blipOutline.filter((name) => name.toLowerCase().includes(searchValue.toLowerCase()));\n    setFilteredIllustration(filtered);\n  }, [searchValue]);\n\n  filteredIllustation.forEach((name) => {\n    defaultArray.push(\n      <div key={name} style={illustrationStyles}>\n        <bds-illustration type=\"blip-outline\" name={name}></bds-illustration>\n        <bds-typo variant=\"fs-10\">{name}</bds-typo>\n      </div>,\n    );\n  });\n\n  return (\n    <bds-grid direction=\"column\" gap=\"3\">\n      <bds-grid md=\"6\" align-items=\"center\" gap=\"3\">\n        <bds-input id=\"illustration-blip-outline\" placeholder=\"search illustration\"></bds-input>\n      </bds-grid>\n      <div style={illustrationWrapperStyles}>{defaultArray}</div>\n    </bds-grid>\n  );\n};"},{"name":"IllustrationsBrand","snippet":"const IllustrationsBrand = () => {\n  const [searchValue, setSearchValue] = useState('');\n  const [filteredIllustation, setFilteredIllustration] = useState([]);\n  const defaultArray = [];\n\n  useEffect(() => {\n    const illustrationBrand = document.getElementById('illustration-brand');\n    illustrationBrand.addEventListener('bdsInput', (event) => {\n      setSearchValue(event.target.value);\n    });\n  }, []);\n\n  useEffect(() => {\n    // Aqui você pode filtrar os ícones com base no valor de pesquisa.\n    const filtered = brand.filter((name) => name.toLowerCase().includes(searchValue.toLowerCase()));\n    setFilteredIllustration(filtered);\n  }, [searchValue]);\n\n  filteredIllustation.forEach((name) => {\n    defaultArray.push(\n      <div key={name} style={illustrationStyles}>\n        <bds-illustration type=\"brand\" name={name}></bds-illustration>\n        <bds-typo variant=\"fs-10\">{name}</bds-typo>\n      </div>,\n    );\n  });\n\n  return (\n    <bds-grid direction=\"column\" gap=\"3\">\n      <bds-grid md=\"6\" align-items=\"center\" gap=\"3\">\n        <bds-input id=\"illustration-brand\" placeholder=\"search illustration\"></bds-input>\n      </bds-grid>\n      <div style={illustrationWrapperStyles}>{defaultArray}</div>\n    </bds-grid>\n  );\n};"},{"name":"IllustrationsLogoIntegration","snippet":"const IllustrationsLogoIntegration = () => {\n  const [searchValue, setSearchValue] = useState('');\n  const [filteredIllustation, setFilteredIllustration] = useState([]);\n  const defaultArray = [];\n\n  useEffect(() => {\n    const illustrationLogoIntegration = document.getElementById('illustration-logo-integration');\n    illustrationLogoIntegration.addEventListener('bdsInput', (event) => {\n      setSearchValue(event.target.value);\n    });\n  }, []);\n\n  useEffect(() => {\n    // Aqui você pode filtrar os ícones com base no valor de pesquisa.\n    const filtered = logoIntegration.filter((name) => name.toLowerCase().includes(searchValue.toLowerCase()));\n    setFilteredIllustration(filtered);\n  }, [searchValue]);\n\n  filteredIllustation.forEach((name) => {\n    defaultArray.push(\n      <div key={name} style={illustrationStyles}>\n        <bds-illustration type=\"logo-integration\" name={name}></bds-illustration>\n        <bds-typo variant=\"fs-10\">{name}</bds-typo>\n      </div>,\n    );\n  });\n\n  return (\n    <bds-grid direction=\"column\" gap=\"3\">\n      <bds-grid md=\"6\" align-items=\"center\" gap=\"3\">\n        <bds-input id=\"illustration-logo-integration\" placeholder=\"search illustration\"></bds-input>\n      </bds-grid>\n      <div style={illustrationWrapperStyles}>{defaultArray}</div>\n    </bds-grid>\n  );\n};"},{"name":"IllustrationsEmptyStates","snippet":"const IllustrationsEmptyStates = () => {\n  const [searchValue, setSearchValue] = useState('');\n  const [filteredIllustation, setFilteredIllustration] = useState([]);\n  const defaultArray = [];\n\n  useEffect(() => {\n    const illustrationEmptyStates = document.getElementById('illustration-empty-states');\n    illustrationEmptyStates.addEventListener('bdsInput', (event) => {\n      setSearchValue(event.target.value);\n    });\n  }, []);\n\n  useEffect(() => {\n    // Aqui você pode filtrar os ícones com base no valor de pesquisa.\n    const filtered = emptyStates.filter((name) => name.toLowerCase().includes(searchValue.toLowerCase()));\n    setFilteredIllustration(filtered);\n  }, [searchValue]);\n\n  filteredIllustation.forEach((name) => {\n    defaultArray.push(\n      <div key={name} style={illustrationStyles}>\n        <bds-illustration type=\"empty-states\" name={name}></bds-illustration>\n        <bds-typo variant=\"fs-10\">{name}</bds-typo>\n      </div>,\n    );\n  });\n\n  return (\n    <bds-grid direction=\"column\" gap=\"3\">\n      <bds-grid md=\"6\" align-items=\"center\" gap=\"3\">\n        <bds-input id=\"illustration-empty-states\" placeholder=\"search illustration\"></bds-input>\n      </bds-grid>\n      <div style={illustrationWrapperStyles}>{defaultArray}</div>\n    </bds-grid>\n  );\n};"},{"name":"IllustrationsSegmented","snippet":"const IllustrationsSegmented = () => {\n  const [searchValue, setSearchValue] = useState('');\n  const [filteredIllustation, setFilteredIllustration] = useState([]);\n  const defaultArray = [];\n\n  useEffect(() => {\n    const illustrationLogoIntegration = document.getElementById('illustration-segmented');\n    illustrationLogoIntegration.addEventListener('bdsInput', (event) => {\n      setSearchValue(event.target.value);\n    });\n  }, []);\n\n  useEffect(() => {\n    // Aqui você pode filtrar os ícones com base no valor de pesquisa.\n    const filtered = segmented.filter((name) => name.toLowerCase().includes(searchValue.toLowerCase()));\n    setFilteredIllustration(filtered);\n  }, [searchValue]);\n\n  filteredIllustation.forEach((name) => {\n    defaultArray.push(\n      <div key={name} style={illustrationStyles}>\n        <bds-illustration type=\"segmented\" name={name}></bds-illustration>\n        <bds-typo variant=\"fs-10\">{name}</bds-typo>\n      </div>,\n    );\n  });\n\n  return (\n    <bds-grid direction=\"column\" gap=\"3\">\n      <bds-grid md=\"6\" align-items=\"center\" gap=\"3\">\n        <bds-input id=\"illustration-segmented\" placeholder=\"search illustration\"></bds-input>\n      </bds-grid>\n      <div style={illustrationWrapperStyles}>{defaultArray}</div>\n    </bds-grid>\n  );\n};"},{"name":"IllustrationsSmartphone","snippet":"const IllustrationsSmartphone = () => {\n  const [searchValue, setSearchValue] = useState('');\n  const [filteredIllustation, setFilteredIllustration] = useState([]);\n  const defaultArray = [];\n\n  useEffect(() => {\n    const illustrationLogoIntegration = document.getElementById('illustration-smartphone');\n    illustrationLogoIntegration.addEventListener('bdsInput', (event) => {\n      setSearchValue(event.target.value);\n    });\n  }, []);\n\n  useEffect(() => {\n    // Aqui você pode filtrar os ícones com base no valor de pesquisa.\n    const filtered = smartphone.filter((name) => name.toLowerCase().includes(searchValue.toLowerCase()));\n    setFilteredIllustration(filtered);\n  }, [searchValue]);\n\n  filteredIllustation.forEach((name) => {\n    defaultArray.push(\n      <div key={name} style={illustrationStyles}>\n        <bds-illustration type=\"smartphone\" name={name}></bds-illustration>\n        <bds-typo variant=\"fs-10\">{name}</bds-typo>\n      </div>,\n    );\n  });\n\n  return (\n    <bds-grid direction=\"column\" gap=\"3\">\n      <bds-grid md=\"6\" align-items=\"center\" gap=\"3\">\n        <bds-input id=\"illustration-smartphone\" placeholder=\"search illustration\"></bds-input>\n      </bds-grid>\n      <div style={illustrationWrapperStyles}>{defaultArray}</div>\n    </bds-grid>\n  );\n};"},{"name":"IllustrationsSpots","snippet":"const IllustrationsSpots = () => {\n  const [searchValue, setSearchValue] = useState('');\n  const [filteredIllustation, setFilteredIllustration] = useState([]);\n  const defaultArray = [];\n\n  useEffect(() => {\n    const illustrationLogoIntegration = document.getElementById('illustration-spots');\n    illustrationLogoIntegration.addEventListener('bdsInput', (event) => {\n      setSearchValue(event.target.value);\n    });\n  }, []);\n\n  useEffect(() => {\n    // Aqui você pode filtrar os ícones com base no valor de pesquisa.\n    const filtered = spots.filter((name) => name.toLowerCase().includes(searchValue.toLowerCase()));\n    setFilteredIllustration(filtered);\n  }, [searchValue]);\n\n  filteredIllustation.forEach((name) => {\n    defaultArray.push(\n      <div key={name} style={illustrationStyles}>\n        <bds-illustration type=\"spots\" name={name}></bds-illustration>\n        <bds-typo variant=\"fs-10\">{name}</bds-typo>\n      </div>,\n    );\n  });\n\n  return (\n    <bds-grid direction=\"column\" gap=\"3\">\n      <bds-grid md=\"6\" align-items=\"center\" gap=\"3\">\n        <bds-input id=\"illustration-spots\" placeholder=\"search illustration\"></bds-input>\n      </bds-grid>\n      <div style={illustrationWrapperStyles}>{defaultArray}</div>\n    </bds-grid>\n  );\n};"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  3 | import DocumentationTemplate from './illustration.mdx';\n  4 |\n> 5 | export default {\n    | ^\n  6 |   title: 'Components/illustration',\n  7 |   parameters: {\n  8 |     docs: {"}},"components-image":{"id":"components-image","name":"Image","path":"./src/components/image/image.stories.jsx","examples":[{"name":"Properties","snippet":"const Properties = () => {\n    const el = document.getElementsByClassName('sb-story');\n    if (el.length !== 0) {\n      el[0].style.width = '760px';\n      el[0].style.display = 'flex';\n      el[0].style.justifyContent = 'center';\n    }\n\n    return (\n        <bds-image\n            src=\"https://images.unsplash.com/photo-1434725039720-aaad6dd32dfe?q=80&w=1000&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxleHBsb3JlLWZlZWR8NXx8fGVufDB8fHx8fA%3D%3D\"\n            alt=\"Example of a image\"\n            width=\"300px\"\n            height=\"200px\"\n            object-fit=\"cover\"\n            brightness={1} />\n    );\n};"},{"name":"FrameworkReact","snippet":"const FrameworkReact = () => (\n  <BdsImage\n    src=\"https://images.unsplash.com/photo-1434725039720-aaad6dd32dfe?q=80&w=1000&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxleHBsb3JlLWZlZWR8NXx8fGVufDB8fHx8fA%3D%3D\"\n    alt=\"Example of a image\"\n    width=\"300px\"\n    height=\"200px\"\n    objectFit=\"cover\"\n  ></BdsImage>\n);"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  3 | import { BdsImage } from '../../../blip-ds-react/dist/components';\n  4 |\n> 5 | export default {\n    | ^\n  6 |   title: 'Components/Image',\n  7 |   parameters: {\n  8 |     docs: {"}},"components-input-chips":{"id":"components-input-chips","name":"Input Chips","path":"./src/components/input-chips/input-chips.stories.jsx","examples":[{"name":"Properties","snippet":"const Properties = () => {\n    return (\n        <bds-grid height=\"100px\">\n            <bds-input-chips\n                label=\"\"\n                danger={false}\n                error-message=\"\"\n                chips=\"[\\\"chip1\\\", \\\"chip2\\\"]\"\n                blur-creation={false}\n                disable-submit={false}\n                disabled={false} />\n        </bds-grid>\n    );\n};"},{"name":"Events","snippet":"const Events = () => {\n  useEffect(() => {\n    const inputChips = document.getElementById('input-chips');\n    inputChips.addEventListener('bdsBlur', () => {\n      console.log('Evento Blur funcionando');\n    });\n    inputChips.addEventListener('bdsChangeChips', () => {\n      console.log('Evento ChangeChips funcionando');\n    });\n    inputChips.addEventListener('bdsChange', () => {\n      console.log('Evento Change funcionando');\n    });\n    inputChips.addEventListener('bdsInputChipsFocus', () => {\n      console.log('Evento Focus funcionando');\n    });\n    inputChips.addEventListener('bdsInputChipsInput', () => {\n      console.log('Evento InputChips funcionando');\n    });\n    inputChips.addEventListener('bdsExtendedQuantityInput', () => {\n      console.log('Evento Selected Change funcionando');\n    });\n    inputChips.addEventListener('bdsSubmit', () => {\n      console.log('Evento Selected Change funcionando');\n    });\n  });\n  return (\n    <bds-grid height=\"100px\">\n      <bds-input-chips id=\"input-chips\" label=\"input chips\" chips='[\"chip1\", \"chip2\"]'></bds-input-chips>\n    </bds-grid>\n  );\n};"},{"name":"Methods","snippet":"const Methods = () => {\n  const btIsValid = async (id) => {\n    const inputChips = document.getElementById(id);\n    const valid = await inputChips.isValid();\n    console.log('Is valid:', valid);\n  };\n\n  const btGet = async (id) => {\n    const inputChips = document.getElementById(id);\n    const chips = await inputChips.get();\n    console.log('Current chips:', chips);\n  };\n\n  const btClear = async (id) => {\n    const inputChips = document.getElementById(id);\n    await inputChips.clear();\n    console.log('Chips cleared');\n  };\n\n  const btAdd = async (id, value) => {\n    const inputChips = document.getElementById(id);\n    await inputChips.add(value);\n    console.log(`Added chip: ${value}`);\n  };\n\n  const btSetFocus = async (id) => {\n    const inputChips = document.getElementById(id);\n    await inputChips.setFocus();\n    console.log('Input chips focused');\n  };\n\n  const btRemoveFocus = async (id) => {\n    const inputChips = document.getElementById(id);\n    await inputChips.removeFocus();\n    console.log('Input chips focus removed');\n  };\n\n  return (\n    <bds-grid direction=\"column\" gap=\"2\">\n      <bds-grid>\n        <bds-input-chips id=\"input-chips-example\"></bds-input-chips>\n      </bds-grid>\n      <bds-grid direction=\"row\" gap=\"2\">\n        <bds-button onClick={() => btIsValid('input-chips-example')}>Is Valid</bds-button>\n        <bds-button onClick={() => btGet('input-chips-example')}>Get Chips</bds-button>\n        <bds-button onClick={() => btClear('input-chips-example')}>Clear Chips</bds-button>\n        <bds-button onClick={() => btAdd('input-chips-example', 'New Chip')}>Add Chip</bds-button>\n        <bds-button onClick={() => btSetFocus('input-chips-example')}>Set Focus</bds-button>\n        <bds-button onClick={() => btRemoveFocus('input-chips-example')}>Remove Focus</bds-button>\n      </bds-grid>\n    </bds-grid>\n  );\n};"},{"name":"FrameworkReact","snippet":"const FrameworkReact = () => {\n  return <BdsInputChips id=\"input-chips\" label=\"input chips\" chips='[\"chip1\", \"chip2\"]'></BdsInputChips>;\n};"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  3 | import { BdsInputChips } from '../../../blip-ds-react/dist/components';\n  4 |\n> 5 | export default {\n    | ^\n  6 |   title: 'Components/Input Chips',\n  7 |   parameters: {\n  8 |     docs: {"}},"components-input-editable":{"id":"components-input-editable","name":"Input Editable","path":"./src/components/input-editable/input-editable.stories.jsx","examples":[{"name":"Properties","snippet":"const Properties = () => {\n    return (\n        <bds-input-editable\n            input-name=\"\"\n            value=\"Storybook\"\n            minlength={3}\n            minlength-error-message=\"\"\n            required-error-message=\"\"\n            maxlength={null}\n            error-message=\"\"\n            danger={false} />\n    );\n};"},{"name":"Events","snippet":"const Events = () => {\n  useEffect(() => {\n    const inputEditable = document.getElementById('input-editable');\n    inputEditable.addEventListener('bdsBlur', () => {\n      console.log('Evento Blur funcionando');\n    });\n    inputEditable.addEventListener('bdsCancel', () => {\n      console.log('Evento Cancel funcionando');\n    });\n    inputEditable.addEventListener('bdsChange', () => {\n      console.log('Evento Change funcionando');\n    });\n    inputEditable.addEventListener('bdsFocus', () => {\n      console.log('Evento Focus funcionando');\n    });\n    inputEditable.addEventListener('bdsInput', () => {\n      console.log('Evento Input funcionando');\n    });\n    inputEditable.addEventListener('bdsInputEditableSave', () => {\n      console.log('Evento Selected Change funcionando');\n    });\n  });\n  return <bds-input-editable id=\"input-editable\" value=\"Storybook\"></bds-input-editable>;\n};"},{"name":"FrameworkReact","snippet":"const FrameworkReact = () => {\n  return <BdsInputEditable value=\"Storybook\"></BdsInputEditable>;\n};"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  3 | import { BdsInputEditable } from '../../../blip-ds-react/dist/components';\n  4 |\n> 5 | export default {\n    | ^\n  6 |   title: 'Components/Input Editable',\n  7 |   parameters: {\n  8 |     docs: {"}},"components-input-password":{"id":"components-input-password","name":"Input Password","path":"./src/components/input-password/input-password.stories.jsx","examples":[{"name":"Properties","snippet":"const Properties = () => <bds-input-password\n    label=\"Senha\"\n    danger={false}\n    disabled={false}\n    value=\"\"\n    error-message=\"\"\n    helper-message=\"\"\n    min=\"\"\n    minlength={0}\n    max=\"\"\n    maxlength={30}\n    readonly={false} />;"},{"name":"Events","snippet":"const Events = () => {\n  useEffect(() => {\n    const inputPassword = document.getElementById('input-password');\n    inputPassword.addEventListener('bdsInputPasswordBlur', () => {\n      console.log('Evento Blur funcionando');\n    });\n    inputPassword.addEventListener('bdsInputPasswordChange', () => {\n      console.log('Evento Cancel funcionando');\n    });\n    inputPassword.addEventListener('bdsInputPasswordFocus', () => {\n      console.log('Evento Change funcionando');\n    });\n    inputPassword.addEventListener('bdsInputPasswordInput', () => {\n      console.log('Evento Focus funcionando');\n    });\n    inputPassword.addEventListener('bdsInputPasswordSubmit', () => {\n      console.log('Evento Input funcionando');\n    });\n    inputPassword.addEventListener('bdsKeyDownBackspace', () => {\n      console.log('Evento Selected Change funcionando');\n    });\n  });\n  return (\n    <bds-input-password id=\"input-password\" value=\"\">\n    </bds-input-password>\n  );\n};"},{"name":"FrameworkReact","snippet":"const FrameworkReact = () => (\n  <BdsInputPassword\n    placeholder=\"placeholder\"\n    label=\"label do input\"\n  ></BdsInputPassword>\n);"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  3 | import { BdsInputPassword } from '../../../blip-ds-react/dist/components';\n  4 |\n> 5 | export default {\n    | ^\n  6 |   title: 'Components/Input Password',\n  7 |   parameters: {\n  8 |     docs: {"}},"components-input-phone-number":{"id":"components-input-phone-number","name":"Input Phone Number","path":"./src/components/input-phone-number/input-phone-number.stories.jsx","examples":[{"name":"Properties","snippet":"const Properties = () => {\n    const el = document.getElementsByClassName('sb-story');\n    if (el.length !== 0) {\n      el[0].style.height = '300px';\n      el[0].style.position = 'relative';\n      el[0].style.background = 'none';\n    }\n\n    return (\n        <bds-input-phone-number\n            label=\"Phone Number\"\n            disabled={false}\n            danger={false}\n            icon=\"\"\n            value=\"\"\n            language=\"pt_BR\"\n            error-message=\"\"\n            helper-message=\"\" />\n    );\n};"},{"name":"Events","snippet":"const Events = () => {\n  useEffect(() => {\n    const inputPhoneNumber = document.getElementById('input-phone-number');\n    inputPhoneNumber.addEventListener('bdsBlur', () => {\n      console.log('Evento Blur funcionando');\n    });\n    inputPhoneNumber.addEventListener('bdsCancel', () => {\n      console.log('Evento Cancel funcionando');\n    });\n    inputPhoneNumber.addEventListener('bdsFocus', () => {\n      console.log('Evento Change funcionando');\n    });\n    inputPhoneNumber.addEventListener('bdsInput', () => {\n      console.log('Evento Focus funcionando');\n    });\n    inputPhoneNumber.addEventListener('bdsPhoneNumberChange', () => {\n      console.log('Evento inputPhoneNumber funcionando');\n    });\n  });\n  return <bds-input-phone-number id=\"input-phone-number\" label=\"Phone Number\"></bds-input-phone-number>;\n};"},{"name":"FrameworkReact","snippet":"const FrameworkReact = () => (\n  <BdsInputPhoneNumber placeholder=\"placeholder\" label=\"label do input\"></BdsInputPhoneNumber>\n);"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  3 | import { BdsInputPhoneNumber } from '../../../blip-ds-react/dist/components';\n  4 |\n> 5 | export default {\n    | ^\n  6 |   title: 'Components/Input Phone Number',\n  7 |   parameters: {\n  8 |     docs: {"}},"components-input":{"id":"components-input","name":"Input","path":"./src/components/input/input.stories.jsx","examples":[{"name":"Properties","snippet":"const Properties = () => {\n    const el = document.getElementsByClassName('sb-story');\n    if (el.length !== 0) {\n      el[0].style.width = '500px';\n    }\n\n    return (\n        <bds-input\n            placeholder=\"nome completo\"\n            label=\"\"\n            disabled={false}\n            danger={false}\n            success={false}\n            icon=\"\"\n            value=\"\"\n            type=\"\"\n            error-message=\"\"\n            helper-message=\"\"\n            success-message=\"\"\n            min=\"\"\n            minlength={0}\n            max=\"\"\n            maxlength={30}\n            readonly={false}\n            is-textarea={false}\n            rows={3}\n            auto-resize\n            resizable={false}\n            min-height={60}\n            max-height={200}\n            icon-size=\"small\"\n            counter-length={false}\n            encode={false} />\n    );\n};"},{"name":"TextareaExamples","snippet":"const TextareaExamples = () => {\n  const el = document.getElementsByClassName('sb-story');\n  if (el.length !== 0) {\n    el[0].style.width = '600px';\n  }\n  \n  return (\n    <div style={{ display: 'flex', flexDirection: 'column', gap: '24px' }}>\n      <div>\n        <h3>Basic Textarea</h3>\n        <bds-input\n          is-textarea={true}\n          placeholder=\"Enter your message here...\"\n          label=\"Message\"\n          rows={3}\n        ></bds-input>\n      </div>\n      \n      <div>\n        <h3>Textarea with Icon (Small)</h3>\n        <bds-input\n          is-textarea={true}\n          icon=\"edit\"\n          icon-size=\"small\"\n          placeholder=\"Write your content...\"\n          label=\"Content\"\n          helper-message=\"This textarea has a small icon\"\n        ></bds-input>\n      </div>\n      \n      <div>\n        <h3>Textarea with Icon (Medium)</h3>\n        <bds-input\n          is-textarea={true}\n          icon=\"edit\"\n          icon-size=\"medium\"\n          placeholder=\"Write your content...\"\n          label=\"Content\"\n          helper-message=\"This textarea has a medium icon\"\n        ></bds-input>\n      </div>\n      \n      <div>\n        <h3>Textarea with Character Counter</h3>\n        <bds-input\n          is-textarea={true}\n          placeholder=\"Limited to 200 characters...\"\n          label=\"Description\"\n          maxlength={200}\n          counter-length={true}\n          helper-message=\"Character counter enabled\"\n        ></bds-input>\n      </div>\n      \n      <div>\n        <h3>Textarea with Error State</h3>\n        <bds-input\n          is-textarea={true}\n          placeholder=\"This field has an error...\"\n          label=\"Error Example\"\n          danger={true}\n          error-message=\"This field is required\"\n          icon=\"error\"\n        ></bds-input>\n      </div>\n      \n      <div>\n        <h3>Textarea with Success State</h3>\n        <bds-input\n          is-textarea={true}\n          placeholder=\"This field is valid...\"\n          label=\"Success Example\"\n          success={true}\n          success-message=\"Field validated successfully\"\n          value=\"Valid content here\"\n        ></bds-input>\n      </div>\n      \n      <div>\n        <h3>Disabled Textarea</h3>\n        <bds-input\n          is-textarea={true}\n          placeholder=\"This textarea is disabled...\"\n          label=\"Disabled\"\n          disabled={true}\n          value=\"Disabled content\"\n          helper-message=\"This field is disabled\"\n        ></bds-input>\n      </div>\n      \n      <div>\n        <h3>Fixed Height Textarea (No Auto-resize)</h3>\n        <bds-input\n          is-textarea={true}\n          placeholder=\"This textarea has fixed height...\"\n          label=\"Fixed Height\"\n          auto-resize={false}\n          rows={5}\n          helper-message=\"Auto-resize is disabled\"\n        ></bds-input>\n      </div>\n      \n      <div>\n        <h3>Custom Height Limits</h3>\n        <bds-input\n          is-textarea={true}\n          placeholder=\"This textarea has custom height limits...\"\n          label=\"Custom Limits\"\n          min-height={80}\n          max-height={150}\n          helper-message=\"Min: 80px, Max: 150px\"\n        ></bds-input>\n      </div>\n      \n      <div>\n        <h3>Resizable Textarea (Manual Resize Disabled)</h3>\n        <bds-input\n          is-textarea={true}\n          placeholder=\"This textarea cannot be resized manually...\"\n          label=\"Not Resizable\"\n          resizable={false}\n          auto-resize={false}\n          rows={4}\n          helper-message=\"Resizable is set to false (default)\"\n        ></bds-input>\n      </div>\n      \n      <div>\n        <h3>Resizable Textarea (Manual Resize Enabled)</h3>\n        <bds-input\n          is-textarea={true}\n          placeholder=\"This textarea can be resized manually by dragging the corner...\"\n          label=\"Resizable\"\n          resizable={true}\n          auto-resize={false}\n          rows={4}\n          helper-message=\"Resizable is set to true, auto-resize is false\"\n        ></bds-input>\n      </div>\n      \n      <div>\n        <h3>Resizable with Auto-resize (No Manual Resize)</h3>\n        <bds-input\n          is-textarea={true}\n          placeholder=\"This textarea auto-resizes, but manual resize is disabled because auto-resize takes precedence...\"\n          label=\"Auto-resize Priority\"\n          resizable={true}\n          auto-resize={true}\n          rows={3}\n          helper-message=\"When auto-resize is true, manual resizing is disabled\"\n        ></bds-input>\n      </div>\n    </div>\n  );\n};"},{"name":"Events","snippet":"const Events = () => {\n  useEffect(() => {\n    const input = document.getElementById('input');\n    input.addEventListener('bdsOnBlur', () => {\n      console.log('Evento Blur funcionando');\n    });\n    input.addEventListener('bdsKeyDownBackspace', () => {\n      console.log('Evento Cancel funcionando');\n    });\n    input.addEventListener('bdsChange', () => {\n      console.log('Evento Change funcionando');\n    });\n    input.addEventListener('bdsFocus', () => {\n      console.log('Evento Focus funcionando');\n    });\n    input.addEventListener('bdsInput', () => {\n      console.log('Evento Input funcionando');\n    });\n    input.addEventListener('bdsPatternValidation', () => {\n      console.log('Evento Pattern Validation funcionando');\n    });\n    input.addEventListener('bdsSubmit', () => {\n      console.log('Evento Submit funcionando');\n    });\n  });\n  return (\n    <bds-input id=\"input\" label=\"label\" icon=\"email\" value=\"\" disabled={false} placeholder=\"texto aqui\">\n    </bds-input>\n  );\n};"},{"name":"FrameworkReact","snippet":"const FrameworkReact = () => (\n  <BdsInput\n    placeholder=\"placeholder\"\n    label=\"label do input\"\n  ></BdsInput>\n);"},{"name":"FrameworkReactTextarea","snippet":"const FrameworkReactTextarea = () => (\n  <div style={{ display: 'flex', flexDirection: 'column', gap: '16px' }}>\n    <BdsInput\n      isTextarea={true}\n      placeholder=\"React textarea example\"\n      label=\"React Textarea\"\n      helperMessage=\"This is a React wrapper example\"\n    ></BdsInput>\n    \n    <BdsInput\n      isTextarea={true}\n      icon=\"edit\"\n      iconSize=\"medium\"\n      placeholder=\"With icon and counter\"\n      label=\"Advanced Textarea\"\n      maxlength={150}\n      counterLength={true}\n    ></BdsInput>\n  </div>\n);"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  3 | import { BdsInput } from '../../../blip-ds-react/dist/components';\n  4 |\n> 5 | export default {\n    | ^\n  6 |   title: 'Components/Input',\n  7 |   parameters: {\n  8 |     docs: {"}},"components-list":{"id":"components-list","name":"List","path":"./src/components/list/list.stories.jsx","examples":[{"name":"Properties","snippet":"const Properties = () => <bds-list type-list=\"default\">\n    <bds-list-item value=\"01\" icon=\"\" avatar-name=\"\">\n        <bds-list-item-content>\n            <bds-typo>{args.text1}</bds-typo>\n            <bds-typo variant=\"fs-14\">{args.secondaryText1}</bds-typo>\n        </bds-list-item-content>\n    </bds-list-item>\n    <bds-list-item value=\"02\" icon=\"\" avatar-name=\"\">\n        <bds-list-item-content>\n            <bds-typo>{args.text2}</bds-typo>\n            <bds-typo variant=\"fs-14\">{args.secondaryText2}</bds-typo>\n        </bds-list-item-content>\n        <bds-grid slot=\"action-area\">\n            <bds-button-icon size=\"short\" variant=\"secondary\" icon=\"settings-general\" />\n            <bds-button-icon size=\"short\" variant=\"secondary\" icon=\"question\" />\n            <bds-button-icon size=\"short\" variant=\"secondary\" icon=\"bell\" />\n        </bds-grid>\n    </bds-list-item>\n    <bds-list-item value=\"03\" icon=\"\" avatar-name=\"\">\n        <bds-list-item-content>\n            <bds-typo>{args.text3}</bds-typo>\n            <bds-typo variant=\"fs-14\">{args.secondaryText3}</bds-typo>\n        </bds-list-item-content>\n        <bds-list-item-content direction=\"row\" gap=\"1\">\n            <bds-chip-tag color=\"info\" icon=\"\">Category\n                        </bds-chip-tag>\n            <bds-chip-tag color=\"success\" icon=\"\">Category\n                        </bds-chip-tag>\n            <bds-chip-tag color=\"warning\" icon=\"\">Category\n                        </bds-chip-tag>\n        </bds-list-item-content>\n        <bds-grid slot=\"action-area\">\n            <bds-button-icon size=\"short\" variant=\"secondary\" icon=\"settings-general\" />\n            <bds-button-icon size=\"short\" variant=\"secondary\" icon=\"question\" />\n            <bds-button-icon size=\"short\" variant=\"secondary\" icon=\"bell\" />\n        </bds-grid>\n    </bds-list-item>\n    <bds-list-item icon=\"\" avatar-name=\"\">\n        <bds-list-item-content>\n            <bds-badge shape=\"circle\" color=\"system\" />\n        </bds-list-item-content>\n        <bds-list-item-content>\n            <bds-typo>{args.text4}</bds-typo>\n            <bds-typo variant=\"fs-14\">{args.secondaryText4}</bds-typo>\n        </bds-list-item-content>\n        <bds-list-item-content direction=\"row\" gap=\"1\">\n            <bds-chip-tag color=\"info\" icon=\"\">Category\n                        </bds-chip-tag>\n            <bds-chip-tag color=\"success\" icon=\"\">Category\n                        </bds-chip-tag>\n            <bds-chip-tag color=\"warning\" icon=\"\">Category\n                        </bds-chip-tag>\n        </bds-list-item-content>\n        <bds-grid slot=\"action-area\">\n            <bds-button-icon size=\"short\" variant=\"secondary\" icon=\"settings-general\" />\n            <bds-button-icon size=\"short\" variant=\"secondary\" icon=\"question\" />\n            <bds-button-icon size=\"short\" variant=\"secondary\" icon=\"bell\" />\n        </bds-grid>\n    </bds-list-item>\n</bds-list>;"},{"name":"Events","snippet":"const Events = () => {\n  useEffect(() => {\n    const list1 = document.getElementById('list-1');\n    const list2 = document.getElementById('list-2');\n    list1.addEventListener('bdsChecked', () => {\n      console.log('Evento bdsChecked funcionando');\n    });\n    list1.addEventListener('bdsClickActionButtom', () => {\n      console.log('Evento bdsClickActionButtom funcionando');\n    });\n    list2.addEventListener('bdsChecked', () => {\n      console.log('Evento bdsChecked funcionando');\n    });\n    list2.addEventListener('bdsClickActionButtom', () => {\n      console.log('Evento bdsClickActionButtom funcionando');\n    });\n  });\n  return (\n    <bds-list type-list=\"checkbox\">\n      <bds-list-item id=\"list-1\" value=\"01\">\n        <bds-list-item-content>\n          <bds-typo>Text of the item</bds-typo>\n        </bds-list-item-content>\n      </bds-list-item>\n      <bds-list-item id=\"list-2\" value=\"02\">\n        <bds-list-item-content>\n          <bds-typo>Text of the item</bds-typo>\n        </bds-list-item-content>\n      </bds-list-item>\n    </bds-list>\n  );\n};"},{"name":"FrameworkReact","snippet":"const FrameworkReact = () => (\n  <BdsList>\n    <BdsListItem value=\"01\">\n      <bds-list-item-content>\n        <bds-typo>Text of the item</bds-typo>\n      </bds-list-item-content>\n    </BdsListItem>\n    <BdsListItem value=\"02\">\n      <bds-list-item-content>\n        <bds-typo>Text of the item</bds-typo>\n      </bds-list-item-content>\n    </BdsListItem>\n  </BdsList>\n);"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  3 | import { BdsList, BdsListItem } from '../../../blip-ds-react/dist/components';\n  4 |\n> 5 | export default {\n    | ^\n  6 |   title: 'Components/List',\n  7 |   parameters: {\n  8 |     docs: {"}},"components-loading-bar":{"id":"components-loading-bar","name":"Loading Bar","path":"./src/components/loading-bar/loading-bar.stories.jsx","examples":[{"name":"Properties","snippet":"const Properties = () => {\n    const el = document.getElementsByClassName('sb-story');\n    if (el.length !== 0) {\n      el[0].style.width = '500px';\n    }\n    return <bds-loading-bar size=\"default\" percent={48} />;\n};"},{"name":"FrameworkReact","snippet":"const FrameworkReact = () => {\n  return (\n        <BdsLoadingBar size=\"default\" percent={48}></BdsLoadingBar>\n  );\n};"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  3 | import { BdsLoadingBar } from '../../../blip-ds-react/dist/components';\n  4 |\n> 5 | export default {\n    | ^\n  6 |   title: 'Components/Loading Bar',\n  7 |   parameters: {\n  8 |     docs: {"}},"components-loading-page":{"id":"components-loading-page","name":"Loading page","path":"./src/components/loading-page/loading-page.stories.jsx","examples":[{"name":"Properties","snippet":"const Properties = (args) => {\n  const el = document.getElementsByClassName('sb-story');\n  if (el.length !== 0) {\n    el[0].style.width = '700px';\n    el[0].style.height = '500px';\n  }\n  return <bds-loading-page style={loadingPage}></bds-loading-page>;\n};"},{"name":"FrameworkReact","snippet":"const FrameworkReact = () => <BdsLoadingPage></BdsLoadingPage>;"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  3 | import { BdsLoadingPage } from '../../../blip-ds-react/dist/components';\n  4 |\n> 5 | export default {\n    | ^\n  6 |   title: 'Components/Loading page',\n  7 |   parameters: {\n  8 |     docs: {"}},"components-loading-spinner":{"id":"components-loading-spinner","name":"Loading spinner","path":"./src/components/loading-spinner/loading-spinner.stories.jsx","examples":[{"name":"Properties","snippet":"const Properties = () => {\n    const el = document.getElementsByClassName('sb-story');\n    if (el.length !== 0) {\n      el[0].style.width = '200px';\n      el[0].style.textAlign = 'center';\n    }\n    return <bds-loading-spinner size=\"standard\" color=\"main\" />;\n};"},{"name":"FrameworkReact","snippet":"const FrameworkReact = () => (\n    <BdsLoadingSpinner size=\"standard\" color=\"main\"></BdsLoadingSpinner>\n);"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  3 | import { BdsLoadingSpinner } from '../../../blip-ds-react/dist/components';\n  4 |\n> 5 | export default {\n    | ^\n  6 |   title: 'Components/Loading spinner',\n  7 |   parameters: {\n  8 |     docs: {"}},"components-modal":{"id":"components-modal","name":"Modal","path":"./src/components/modal/modal.stories.jsx","examples":[{"name":"Properties","snippet":"const Properties = () => {\n    const el = document.getElementsByClassName('sb-story');\n    if (el.length !== 0) {\n      el[0].style.width = '720px';\n      el[0].style.height = '500px';\n      el[0].style.position = 'relative';\n    }\n\n    return (\n        <bds-modal\n            open\n            enter-close\n            outzone-close\n            close-button={args.CloseButton}\n            size=\"dynamic\">\n            <bds-typo variant=\"fs-14\" bold=\"regular\">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n                        magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n                        consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n                        pariatur.\n                      </bds-typo>\n            <bds-modal-action>\n                <div\n                    style={{ display: 'flex', gap: '16px', justifyContent: 'flex-end', width: '100%' }}>\n                    <bds-button icon=\"video\" variant=\"secondary\">Tutorial\n                                  </bds-button>\n                    <bds-button>Ok, entendi</bds-button>\n                </div>\n            </bds-modal-action>\n        </bds-modal>\n    );\n};"},{"name":"Events","snippet":"const Events = () => {\n  useEffect(() => {\n    const modal = document.getElementById('modal');\n    modal.addEventListener('bdsModalChanged', () => {\n      console.log('Evento bdsModalChanged funcionando');\n    });\n  });\n  return (\n    <bds-modal open={true} outzone-close={true} close-button={true} id=\"modal\">\n      <bds-typo variant=\"fs-14\" bold=\"regular\">\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n        magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n        consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n        pariatur.\n      </bds-typo>\n      <bds-modal-action>\n        <div style={{ display: 'flex', gap: '16px', justifyContent: 'flex-end', width: '100%' }}>\n          <bds-button icon=\"video\" variant=\"secondary\">\n            Tutorial\n          </bds-button>\n          <bds-button>Ok, entendi</bds-button>\n        </div>\n      </bds-modal-action>\n    </bds-modal>\n  );\n};"},{"name":"Methods","snippet":"const Methods = () => {\n  const btToggle = async (id) => {\n    const acc = document.getElementById(id);\n    await acc.toggle();\n  };\n  return (\n    <>\n      <bds-button onClick={() => btToggle('modal')} variant=\"primary\" size=\"short\">\n        Abrir Modal\n      </bds-button>\n      <bds-modal open={true} outzone-close={true} close-button={true} id=\"modal\">\n        <bds-typo variant=\"fs-14\" bold=\"regular\">\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n          magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n          consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n          pariatur.\n        </bds-typo>\n        <bds-modal-action>\n          <div style={{ display: 'flex', gap: '16px', justifyContent: 'flex-end', width: '100%' }}>\n            <bds-button icon=\"video\" variant=\"secondary\">\n              Tutorial\n            </bds-button>\n            <bds-button onClick={() => btToggle('modal')} >Ok, entendi</bds-button>\n          </div>\n        </bds-modal-action>\n      </bds-modal>\n    </>\n  );\n};"},{"name":"FrameworkReact","snippet":"const FrameworkReact = (args) => {\n  const [modalOpen, setModalOpen] = React.useState(true);\n\n  const handleCloseModal = () => {\n    setModalOpen(false);\n  };\n\n  return (\n    <BdsModal open={modalOpen} outzone-close={true} close-button={true}>\n      <BdsTypo variant=\"fs-14\" bold=\"regular\">\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n        magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n        consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n        pariatur.\n      </BdsTypo>\n      <BdsModalAction>\n        <div style={{ display: 'flex', gap: '16px', justifyContent: 'flex-end', width: '100%' }}>\n          <BdsButton icon=\"video\" variant=\"secondary\">\n            Tutorial\n          </BdsButton>\n          <BdsButton onClick={handleCloseModal}>Ok, entendi</BdsButton>\n        </div>\n      </BdsModalAction>\n    </BdsModal>\n  );\n};"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  3 | import { BdsButton, BdsModal, BdsModalAction, BdsTypo } from '../../../blip-ds-react/dist/components';\n  4 |\n> 5 | export default {\n    | ^\n  6 |   title: 'Components/Modal',\n  7 |   parameters: {\n  8 |     docs: {"}},"components-navtree-group":{"id":"components-navtree-group","name":"NavTree Group","path":"./src/components/nav-tree/nav-tree-group.stories.jsx","examples":[{"name":"Properties","snippet":"const Properties = () => {\n    return (\n        <bds-nav-tree-group collapse=\"single\">\n            <bds-nav-tree id=\"nav-tree\" icon=\"heart\" text=\"Título\" secondary-text=\"Breve Descrição\">\n                <bds-nav-tree-item icon=\"heart\" text=\"Título\" />\n                <bds-nav-tree-item text=\"Título\" secondary-text=\"Breve Descrição\">\n                    <bds-nav-tree-item icon=\"heart\" text=\"Título\" isOpen />\n                    <bds-nav-tree-item icon=\"heart\" text=\"Título\" />\n                </bds-nav-tree-item>\n                <bds-nav-tree-item icon=\"heart\" text=\"Título\" secondary-text=\"Breve Descrição\">\n                    <bds-nav-tree-item text=\"Título\" />\n                    <bds-nav-tree-item icon=\"heart\" text=\"Título\" />\n                    <bds-nav-tree-item icon=\"heart\" text=\"Título\" secondary-text=\"Breve Descrição\" />\n                    <bds-nav-tree-item text=\"Título\" secondary-text=\"Breve Descrição\" />\n                </bds-nav-tree-item>\n            </bds-nav-tree>\n            <bds-nav-tree id=\"nav-tree\" icon=\"heart\" text=\"Título\" secondary-text=\"Breve Descrição\">\n                <bds-nav-tree-item icon=\"heart\" text=\"Título\" />\n                <bds-nav-tree-item text=\"Título\" secondary-text=\"Breve Descrição\">\n                    <bds-nav-tree-item icon=\"heart\" text=\"Título\" isOpen />\n                    <bds-nav-tree-item icon=\"heart\" text=\"Título\" />\n                </bds-nav-tree-item>\n                <bds-nav-tree-item icon=\"heart\" text=\"Título\" secondary-text=\"Breve Descrição\">\n                    <bds-nav-tree-item text=\"Título\" />\n                    <bds-nav-tree-item icon=\"heart\" text=\"Título\" />\n                    <bds-nav-tree-item icon=\"heart\" text=\"Título\" secondary-text=\"Breve Descrição\" />\n                    <bds-nav-tree-item text=\"Título\" secondary-text=\"Breve Descrição\" />\n                </bds-nav-tree-item>\n            </bds-nav-tree>\n            <bds-nav-tree id=\"nav-tree\" icon=\"heart\" text=\"Título\" secondary-text=\"Breve Descrição\">\n                <bds-nav-tree-item icon=\"heart\" text=\"Título\" />\n                <bds-nav-tree-item text=\"Título\" secondary-text=\"Breve Descrição\">\n                    <bds-nav-tree-item icon=\"heart\" text=\"Título\" isOpen />\n                    <bds-nav-tree-item icon=\"heart\" text=\"Título\" />\n                </bds-nav-tree-item>\n                <bds-nav-tree-item icon=\"heart\" text=\"Título\" secondary-text=\"Breve Descrição\">\n                    <bds-nav-tree-item text=\"Título\" />\n                    <bds-nav-tree-item icon=\"heart\" text=\"Título\" />\n                    <bds-nav-tree-item icon=\"heart\" text=\"Título\" secondary-text=\"Breve Descrição\" />\n                    <bds-nav-tree-item text=\"Título\" secondary-text=\"Breve Descrição\" />\n                </bds-nav-tree-item>\n            </bds-nav-tree>\n            <bds-nav-tree id=\"nav-tree\" icon=\"heart\" text=\"Título\" secondary-text=\"Breve Descrição\">\n                <bds-nav-tree-item icon=\"heart\" text=\"Título\" />\n                <bds-nav-tree-item text=\"Título\" secondary-text=\"Breve Descrição\">\n                    <bds-nav-tree-item icon=\"heart\" text=\"Título\" isOpen />\n                    <bds-nav-tree-item icon=\"heart\" text=\"Título\" />\n                </bds-nav-tree-item>\n                <bds-nav-tree-item icon=\"heart\" text=\"Título\" secondary-text=\"Breve Descrição\">\n                    <bds-nav-tree-item text=\"Título\" />\n                    <bds-nav-tree-item icon=\"heart\" text=\"Título\" />\n                    <bds-nav-tree-item icon=\"heart\" text=\"Título\" secondary-text=\"Breve Descrição\" />\n                    <bds-nav-tree-item text=\"Título\" secondary-text=\"Breve Descrição\" />\n                </bds-nav-tree-item>\n            </bds-nav-tree>\n        </bds-nav-tree-group>\n    );\n};"},{"name":"Methods","snippet":"const Methods = () => {\n  const btOpenAll = async (id) => {\n    const acc = document.getElementById(id);\n    await acc.openAll();\n  };\n  const btCloseAll = async (id) => {\n    const acc = document.getElementById(id);\n    await acc.closeAll();\n  };\n  return (\n    <bds-grid direction=\"column\" gap=\"2\">\n      <bds-button onClick={() => btOpenAll('nav-tree-group')} variant=\"primary\" size=\"short\">\n        openAll\n      </bds-button>\n      <bds-button onClick={() => btCloseAll('nav-tree-group')} variant=\"primary\" size=\"short\">\n        closeAll\n      </bds-button>\n      <bds-nav-tree-group id=\"nav-tree-group\" collapse=\"multiple\">\n        <bds-nav-tree id=\"nav-tree\" icon=\"heart\" text=\"Título\" secondary-text=\"Breve Descrição\">\n          <bds-nav-tree-item icon=\"heart\" text=\"Título\"></bds-nav-tree-item>\n          <bds-nav-tree-item text=\"Título\" secondary-text=\"Breve Descrição\"></bds-nav-tree-item>\n          <bds-nav-tree-item icon=\"heart\" text=\"Título\" secondary-text=\"Breve Descrição\"></bds-nav-tree-item>\n        </bds-nav-tree>\n        <bds-nav-tree id=\"nav-tree\" icon=\"heart\" text=\"Título\" secondary-text=\"Breve Descrição\">\n          <bds-nav-tree-item icon=\"heart\" text=\"Título\"></bds-nav-tree-item>\n          <bds-nav-tree-item text=\"Título\" secondary-text=\"Breve Descrição\"></bds-nav-tree-item>\n          <bds-nav-tree-item icon=\"heart\" text=\"Título\" secondary-text=\"Breve Descrição\"></bds-nav-tree-item>\n        </bds-nav-tree>\n        <bds-nav-tree id=\"nav-tree\" icon=\"heart\" text=\"Título\" secondary-text=\"Breve Descrição\">\n          <bds-nav-tree-item icon=\"heart\" text=\"Título\"></bds-nav-tree-item>\n          <bds-nav-tree-item text=\"Título\" secondary-text=\"Breve Descrição\"></bds-nav-tree-item>\n          <bds-nav-tree-item icon=\"heart\" text=\"Título\" secondary-text=\"Breve Descrição\"></bds-nav-tree-item>\n        </bds-nav-tree>\n        <bds-nav-tree id=\"nav-tree\" icon=\"heart\" text=\"Título\" secondary-text=\"Breve Descrição\">\n          <bds-nav-tree-item icon=\"heart\" text=\"Título\"></bds-nav-tree-item>\n          <bds-nav-tree-item text=\"Título\" secondary-text=\"Breve Descrição\"></bds-nav-tree-item>\n          <bds-nav-tree-item icon=\"heart\" text=\"Título\" secondary-text=\"Breve Descrição\"></bds-nav-tree-item>\n        </bds-nav-tree>\n      </bds-nav-tree-group>\n    </bds-grid>\n  );\n};"},{"name":"Events","snippet":"const Events = () => {\n  const btOpenAll = async (id) => {\n    const acc = document.getElementById(id);\n    await acc.openAll();\n  };\n  const btCloseAll = async (id) => {\n    const acc = document.getElementById(id);\n    await acc.closeAll();\n  };\n  useEffect(() => {\n    const bdsNavTreeGroupCloseAll = document.getElementById('nav-tree-group');\n    bdsNavTreeGroupCloseAll.addEventListener('bdsNavTreeGroupCloseAll', () => {\n      console.log('Evento bdsNavTreeGroupCloseAll funcionando');\n    });\n    const bdsNavTreeGroupOpenAll = document.getElementById('nav-tree-group');\n    bdsNavTreeGroupOpenAll.addEventListener('bdsNavTreeGroupOpenAll', () => {\n      console.log('Evento bdsNavTreeGroupOpenAll funcionando');\n    });\n  });\n  return (\n    <bds-grid direction=\"column\" gap=\"2\">\n      <bds-button onClick={() => btOpenAll('nav-tree-group')} variant=\"primary\" size=\"short\">\n        openAll\n      </bds-button>\n      <bds-button onClick={() => btCloseAll('nav-tree-group')} variant=\"primary\" size=\"short\">\n        closeAll\n      </bds-button>\n      <bds-nav-tree-group id=\"nav-tree-group\" collapse=\"multiple\">\n        <bds-nav-tree id=\"nav-tree\" icon=\"heart\" text=\"Título\" secondary-text=\"Breve Descrição\">\n          <bds-nav-tree-item icon=\"heart\" text=\"Título\"></bds-nav-tree-item>\n          <bds-nav-tree-item text=\"Título\" secondary-text=\"Breve Descrição\"></bds-nav-tree-item>\n          <bds-nav-tree-item icon=\"heart\" text=\"Título\" secondary-text=\"Breve Descrição\"></bds-nav-tree-item>\n        </bds-nav-tree>\n        <bds-nav-tree id=\"nav-tree\" icon=\"heart\" text=\"Título\" secondary-text=\"Breve Descrição\">\n          <bds-nav-tree-item icon=\"heart\" text=\"Título\"></bds-nav-tree-item>\n          <bds-nav-tree-item text=\"Título\" secondary-text=\"Breve Descrição\"></bds-nav-tree-item>\n          <bds-nav-tree-item icon=\"heart\" text=\"Título\" secondary-text=\"Breve Descrição\"></bds-nav-tree-item>\n        </bds-nav-tree>\n        <bds-nav-tree id=\"nav-tree\" icon=\"heart\" text=\"Título\" secondary-text=\"Breve Descrição\">\n          <bds-nav-tree-item icon=\"heart\" text=\"Título\"></bds-nav-tree-item>\n          <bds-nav-tree-item text=\"Título\" secondary-text=\"Breve Descrição\"></bds-nav-tree-item>\n          <bds-nav-tree-item icon=\"heart\" text=\"Título\" secondary-text=\"Breve Descrição\"></bds-nav-tree-item>\n        </bds-nav-tree>\n        <bds-nav-tree id=\"nav-tree\" icon=\"heart\" text=\"Título\" secondary-text=\"Breve Descrição\">\n          <bds-nav-tree-item icon=\"heart\" text=\"Título\"></bds-nav-tree-item>\n          <bds-nav-tree-item text=\"Título\" secondary-text=\"Breve Descrição\"></bds-nav-tree-item>\n          <bds-nav-tree-item icon=\"heart\" text=\"Título\" secondary-text=\"Breve Descrição\"></bds-nav-tree-item>\n        </bds-nav-tree>\n      </bds-nav-tree-group>\n    </bds-grid>\n  );\n};"},{"name":"FrameworkReact","snippet":"const FrameworkReact = () => {\n  return (\n    <BdsNavTreeGroup>\n      <BdsNavTree icon=\"heart\" text=\"Título\" secondaryText=\"Breve Descrição\">\n        <BdsNavTreeItem text=\"Título\" secondaryText=\"Breve Descrição\"></BdsNavTreeItem>\n        <BdsNavTreeItem text=\"Título\" secondaryText=\"Breve Descrição\"></BdsNavTreeItem>\n        <BdsNavTreeItem text=\"Título\" secondaryText=\"Breve Descrição\"></BdsNavTreeItem>\n      </BdsNavTree>\n      <BdsNavTree icon=\"heart\" text=\"Título\" secondaryText=\"Breve Descrição\">\n        <BdsNavTreeItem text=\"Título\" secondaryText=\"Breve Descrição\"></BdsNavTreeItem>\n        <BdsNavTreeItem text=\"Título\" secondaryText=\"Breve Descrição\"></BdsNavTreeItem>\n        <BdsNavTreeItem text=\"Título\" secondaryText=\"Breve Descrição\"></BdsNavTreeItem>\n      </BdsNavTree>\n      <BdsNavTree icon=\"heart\" text=\"Título\" secondaryText=\"Breve Descrição\">\n        <BdsNavTreeItem text=\"Título\" secondaryText=\"Breve Descrição\"></BdsNavTreeItem>\n        <BdsNavTreeItem text=\"Título\" secondaryText=\"Breve Descrição\"></BdsNavTreeItem>\n        <BdsNavTreeItem text=\"Título\" secondaryText=\"Breve Descrição\"></BdsNavTreeItem>\n      </BdsNavTree>\n      <BdsNavTree icon=\"heart\" text=\"Título\" secondaryText=\"Breve Descrição\">\n        <BdsNavTreeItem text=\"Título\" secondaryText=\"Breve Descrição\"></BdsNavTreeItem>\n        <BdsNavTreeItem text=\"Título\" secondaryText=\"Breve Descrição\"></BdsNavTreeItem>\n        <BdsNavTreeItem text=\"Título\" secondaryText=\"Breve Descrição\"></BdsNavTreeItem>\n      </BdsNavTree>\n    </BdsNavTreeGroup>\n  );\n};"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  3 | import { BdsNavTree, BdsNavTreeGroup, BdsNavTreeItem } from '../../../blip-ds-react/dist/components';\n  4 |\n> 5 | export default {\n    | ^\n  6 |   title: 'Components/NavTree Group',\n  7 |   parameters: {\n  8 |     docs: {"}},"components-navtree":{"id":"components-navtree","name":"NavTree","path":"./src/components/nav-tree/nav-tree.stories.jsx","examples":[{"name":"Properties","snippet":"const Properties = () => {\n    return (\n        <bds-nav-tree\n            isOpen\n            colapse=\"single\"\n            icon=\"heart\"\n            text=\"Título\"\n            secondary-text=\"Breve Descrição\">\n            <bds-nav-tree-item icon=\"heart\" text=\"Título\" />\n            <bds-nav-tree-item text=\"Título\" secondary-text=\"Breve Descrição\">\n                <bds-nav-tree-item icon=\"heart\" text=\"Título\" isOpen />\n                <bds-nav-tree-item icon=\"heart\" text=\"Título\" />\n            </bds-nav-tree-item>\n            <bds-nav-tree-item icon=\"heart\" text=\"Título\" secondary-text=\"Breve Descrição\">\n                <bds-nav-tree-item text=\"Título\" />\n                <bds-nav-tree-item icon=\"heart\" text=\"Título\" />\n                <bds-nav-tree-item icon=\"heart\" text=\"Título\" secondary-text=\"Breve Descrição\" />\n                <bds-nav-tree-item text=\"Título\" secondary-text=\"Breve Descrição\" />\n            </bds-nav-tree-item>\n        </bds-nav-tree>\n    );\n};"},{"name":"Methods","snippet":"const Methods = () => {\n  const btToggle = async (id) => {\n    const acc = document.getElementById(id);\n    await acc.toggle();\n  };\n  return (\n    <bds-grid direction=\"column\" gap=\"2\">\n      <bds-button onClick={() => btToggle('nav-tree')} variant=\"primary\" size=\"short\">\n        Toggle\n      </bds-button>\n      <bds-nav-tree id=\"nav-tree\" icon=\"heart\" text=\"Título\" secondary-text=\"Breve Descrição\">\n        <bds-nav-tree-item text=\"Título\" secondary-text=\"Breve Descrição\"></bds-nav-tree-item>\n        <bds-nav-tree-item text=\"Título\" secondary-text=\"Breve Descrição\"></bds-nav-tree-item>\n        <bds-nav-tree-item text=\"Título\" secondary-text=\"Breve Descrição\"></bds-nav-tree-item>\n        <bds-nav-tree-item text=\"Título\" secondary-text=\"Breve Descrição\"></bds-nav-tree-item>\n      </bds-nav-tree>\n    </bds-grid>\n  );\n};"},{"name":"Events","snippet":"const Events = () => {\n  const btToggle = (id) => {\n    const acc = document.getElementById(id);\n    acc.isOpen = !acc.isOpen;\n  };\n  useEffect(() => {\n    const bdsToogleChange = document.getElementById('nav-tree');\n    bdsToogleChange.addEventListener('bdsToogleChange', () => {\n      console.log('Evento toggle funcionando');\n    });\n  });\n  return (\n    <bds-grid direction=\"column\" gap=\"2\">\n      <bds-button onClick={() => btToggle('nav-tree')} variant=\"primary\" size=\"short\">\n        Toggle\n      </bds-button>\n      <bds-nav-tree id=\"nav-tree\" icon=\"heart\" text=\"Título\" secondary-text=\"Breve Descrição\">\n        <bds-nav-tree-item text=\"Título\" secondary-text=\"Breve Descrição\"></bds-nav-tree-item>\n        <bds-nav-tree-item text=\"Título\" secondary-text=\"Breve Descrição\"></bds-nav-tree-item>\n        <bds-nav-tree-item text=\"Título\" secondary-text=\"Breve Descrição\"></bds-nav-tree-item>\n        <bds-nav-tree-item text=\"Título\" secondary-text=\"Breve Descrição\"></bds-nav-tree-item>\n      </bds-nav-tree>\n    </bds-grid>\n  );\n};"},{"name":"FrameworkReact","snippet":"const FrameworkReact = () => {\n  return (\n    <BdsNavTree icon=\"heart\" text=\"Título\" secondaryText=\"Breve Descrição\">\n      <BdsNavTreeItem text=\"Título\" secondaryText=\"Breve Descrição\"></BdsNavTreeItem>\n      <BdsNavTreeItem text=\"Título\" secondaryText=\"Breve Descrição\">\n        <BdsNavTreeItem text=\"Título\" secondaryText=\"Breve Descrição\"></BdsNavTreeItem>\n        <BdsNavTreeItem text=\"Título\" secondaryText=\"Breve Descrição\"></BdsNavTreeItem>\n        <BdsNavTreeItem text=\"Título\" secondaryText=\"Breve Descrição\">\n          <BdsNavTreeItem text=\"Título\" secondaryText=\"Breve Descrição\"></BdsNavTreeItem>\n          <BdsNavTreeItem text=\"Título\" secondaryText=\"Breve Descrição\"></BdsNavTreeItem>\n          <BdsNavTreeItem text=\"Título\" secondaryText=\"Breve Descrição\"></BdsNavTreeItem>\n          <BdsNavTreeItem text=\"Título\" secondaryText=\"Breve Descrição\"></BdsNavTreeItem>\n        </BdsNavTreeItem>\n        <BdsNavTreeItem text=\"Título\" secondaryText=\"Breve Descrição\"></BdsNavTreeItem>\n        <BdsNavTreeItem text=\"Título\" secondaryText=\"Breve Descrição\"></BdsNavTreeItem>\n      </BdsNavTreeItem>\n      <BdsNavTreeItem text=\"Título\" secondaryText=\"Breve Descrição\"></BdsNavTreeItem>\n      <BdsNavTreeItem text=\"Título\" secondaryText=\"Breve Descrição\"></BdsNavTreeItem>\n      <BdsNavTreeItem text=\"Título\" secondaryText=\"Breve Descrição\"></BdsNavTreeItem>\n    </BdsNavTree>\n  );\n};"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  3 | import { BdsNavTree, BdsNavTreeItem } from '../../../blip-ds-react/dist/components';\n  4 |\n> 5 | export default {\n    | ^\n  6 |   title: 'Components/NavTree',\n  7 |   parameters: {\n  8 |     docs: {"}},"components-navbar":{"id":"components-navbar","name":"NavBar","path":"./src/components/navbar/navbar.stories.jsx","examples":[{"name":"Properties","snippet":"const Properties = () => {\n    return (\n        <bds-navbar\n            orientation=\"horizontal\"\n            justify-content=\"space-between\"\n            background-color=\"surface-2\">\n            <bds-navbar-content>\n                <bds-button-icon size=\"short\" variant=\"secondary\" icon=\"home\" />\n                <bds-button-icon size=\"short\" variant=\"secondary\" icon=\"store\" />\n                <bds-button-icon size=\"short\" variant=\"secondary\" icon=\"team\" />\n                <bds-button-icon size=\"short\" variant=\"secondary\" icon=\"cloud\" />\n                <bds-button-icon size=\"short\" variant=\"secondary\" icon=\"integration\" />\n            </bds-navbar-content>\n            <bds-navbar-content>\n                <bds-button-icon size=\"short\" variant=\"secondary\" icon=\"settings-general\" />\n                <bds-button-icon size=\"short\" variant=\"secondary\" icon=\"question\" />\n                <bds-button-icon size=\"short\" variant=\"secondary\" icon=\"bell\" />\n                <bds-avatar name=\"Dwight Schrute\" size=\"small\" />\n            </bds-navbar-content>\n        </bds-navbar>\n    );\n};"},{"name":"FrameworkReact","snippet":"const FrameworkReact = () => {\n  return (\n    <BdsNavbar orientation=\"horizontal\" justifyContent=\"space-between\" backgroundColor=\"surface-2\">\n      <BdsNavbarContent>\n        <BdsButtonIcon size=\"short\" variant=\"secondary\" icon=\"attention\"></BdsButtonIcon>\n        <BdsButtonIcon size=\"short\" variant=\"secondary\" icon=\"attention\"></BdsButtonIcon>\n        <BdsButtonIcon size=\"short\" variant=\"secondary\" icon=\"attention\"></BdsButtonIcon>\n        <BdsButtonIcon size=\"short\" variant=\"secondary\" icon=\"attention\"></BdsButtonIcon>\n        <BdsButtonIcon size=\"short\" variant=\"secondary\" icon=\"attention\"></BdsButtonIcon>\n      </BdsNavbarContent>\n      <BdsNavbarContent>\n        <BdsButtonIcon size=\"short\" variant=\"secondary\" icon=\"settings-general\"></BdsButtonIcon>\n        <BdsButtonIcon size=\"short\" variant=\"secondary\" icon=\"question\"></BdsButtonIcon>\n        <BdsButtonIcon size=\"short\" variant=\"secondary\" icon=\"bell\"></BdsButtonIcon>\n        <BdsAvatar name=\"Dwight Schrute\" size=\"small\"></BdsAvatar>\n      </BdsNavbarContent>\n    </BdsNavbar>\n  );\n};"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  3 | import { BdsNavbar, BdsNavbarContent, BdsAvatar, BdsButtonIcon } from '../../../blip-ds-react/dist/components';\n  4 |\n> 5 | export default {\n    | ^\n  6 |   title: 'Components/NavBar',\n  7 |   parameters: {\n  8 |     docs: {"}},"components-pagination":{"id":"components-pagination","name":"Pagination","path":"./src/components/pagination/pagination.stories.jsx","examples":[{"name":"Properties","snippet":"const Properties = () => {\n    const el = document.getElementsByClassName('sb-story');\n    if (el.length !== 0) {\n      el[0].style.height = '280px';\n    }\n    return <bds-pagination pages={10} started-Page={1} />;\n};"},{"name":"FrameworkReact","snippet":"const FrameworkReact = () => {\n    return (\n      <BdsPagination started-page=\"20\" pages=\"30\"></BdsPagination>\n    );\n  };"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  3 | import { BdsPagination } from '../../../blip-ds-react/dist/components';\n  4 |\n> 5 | export default {\n    | ^\n  6 |   title: 'Components/Pagination',\n  7 |   parameters: {\n  8 |     docs: {"}},"components-paper":{"id":"components-paper","name":"Paper","path":"./src/components/paper/paper.stories.jsx","examples":[{"name":"Properties","snippet":"const Properties = () => {\n    return <bds-paper border={false} elevation=\"primary\" height=\"100px\" width=\"150px\" />;\n};"},{"name":"FrameworkReact","snippet":"const FrameworkReact = () => {\n  return (\n      <BdsPaper border={false} elevation=\"primary\" height=\"100px\" width=\"150px\"></BdsPaper>\n);\n};"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  3 | import { BdsPaper } from '../../../blip-ds-react/dist/components';\n  4 |\n> 5 | export default {\n    | ^\n  6 |   title: 'Components/Paper',\n  7 |   parameters: {\n  8 |     docs: {"}},"components-progress-bar":{"id":"components-progress-bar","name":"Progress Bar","path":"./src/components/progress-bar/progress-bar.stories.jsx","examples":[{"name":"Properties","snippet":"const Properties = () => {\n    return (\n        <bds-progress-bar\n            size=\"default\"\n            text=\"Texto para aplicar no componente\"\n            percent={16}\n            color=\"default\" />\n    );\n};"},{"name":"FrameworkReact","snippet":"const FrameworkReact = () => {\n  return (\n        <BdsProgressBar size=\"default\" text=\"Texto para aplicar no componente\" percent={16}></BdsProgressBar>\n  );\n};"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  3 | import { BdsProgressBar } from '../../../blip-ds-react/dist/components';\n  4 |\n> 5 | export default {\n    | ^\n  6 |   title: 'Components/Progress Bar',\n  7 |   parameters: {\n  8 |     docs: {"}},"components-radio-button":{"id":"components-radio-button","name":"Radio Button","path":"./src/components/radio-button/radio-button.stories.jsx","examples":[{"name":"Properties","snippet":"const Properties = () => <bds-radio-group>\n    <bds-grid direction=\"column\" gap=\"2\">\n        <bds-typo bold=\"bold\">Radio group</bds-typo>\n        <bds-radio value=\"radio1\" label=\"Radio 1\" checked={false} disabled={false} />\n        <bds-radio value=\"radio2\" label=\"Radio 2\" />\n    </bds-grid>\n</bds-radio-group>;"},{"name":"Events","snippet":"const Events = () => {\n  useEffect(() => {\n    const radio = document.getElementById('radio-group');\n    radio.addEventListener('bdsRadioGroupChange', () => {\n      console.log('Evento bdsRadioGroupChange funcionando');\n    });\n  });\n  return  (\n  <bds-radio-group id=\"radio-group\">\n    <bds-grid direction=\"column\" gap=\"2\">\n      <bds-typo bold=\"bold\">Radio group</bds-typo>\n      <bds-radio value=\"radio1\" label=\"Radio 1\"></bds-radio>\n      <bds-radio value=\"radio2\" label=\"Radio 2\"></bds-radio>\n    </bds-grid>\n  </bds-radio-group>\n);\n};"},{"name":"FrameworkReact","snippet":"const FrameworkReact = () => (\n  <BdsRadioGroup>\n    <BdsGrid direction=\"column\" gap=\"16px\">\n      <BdsTypo bold=\"bold\">Radio group</BdsTypo>\n      <BdsRadio value=\"radio1\" label=\"Radio 1\"></BdsRadio>\n      <BdsRadio value=\"radio2\" label=\"Radio 2\"></BdsRadio>\n    </BdsGrid>\n  </BdsRadioGroup>\n);"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  3 | import { BdsRadioGroup, BdsRadio, BdsTypo, BdsGrid } from '../../../blip-ds-react/dist/components';\n  4 |\n> 5 | export default {\n    | ^\n  6 |   title: 'Components/Radio Button',\n  7 |   parameters: {\n  8 |     docs: {"}},"components-richtext":{"id":"components-richtext","name":"RichText","path":"./src/components/rict-text/rich-text.stories.jsx","examples":[{"name":"Properties","snippet":"const Properties = () => {\n    const el = document.getElementsByClassName('sb-story');\n    if (el.length !== 0) {\n      el[0].style.width = '560px';\n    }\n\n    return (\n        <bds-rich-text\n            weight-button\n            italic-button\n            strike-through-button\n            underline-button\n            link-button\n            code-button\n            alignment-buttons\n            list-buttons\n            quote-button\n            heading-buttons\n            unstyled-button\n            height=\"280px\"\n            language=\"pt_BR\" />\n    );\n};"},{"name":"Events","snippet":"const Events = () => {\n  useEffect(() => {\n    const richText = document.getElementById('rich-text');\n    richText.addEventListener('bdsBlur', () => {\n      console.log('Evento Blur funcionando');\n    });\n    richText.addEventListener('bdsFocus', () => {\n      console.log('Evento Focus funcionando');\n    });\n    richText.addEventListener('bdsRichTextChange', () => {\n      console.log('Evento Change funcionando');\n    });\n    richText.addEventListener('bdsRichTextInput', () => {\n      console.log('Evento Input funcionando');\n    });\n  });\n  return <bds-rich-text id=\"rich-text\" height=\"280px\" language=\"pt_BR\"></bds-rich-text>;\n};"},{"name":"FrameworkReact","snippet":"const FrameworkReact = () => {\n  return <BdsRichText id=\"rich-text\" height=\"280px\" language=\"pt_BR\"></BdsRichText>;\n};"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  3 | import { BdsRichText } from '../../../blip-ds-react/dist/components';\n  4 |\n> 5 | export default {\n    | ^\n  6 |   title: 'Components/RichText',\n  7 |   parameters: {\n  8 |     docs: {"}},"components-select-chips":{"id":"components-select-chips","name":"Select Chips","path":"./src/components/selects/select-chips/select.stories.jsx","examples":[{"name":"Properties","snippet":"const Properties = () => {\n    const el = document.getElementsByClassName('sb-story');\n    if (el.length !== 0) {\n      el[0].style.height = '270px';\n    }\n\n    return (\n        <bds-select-chips\n            new-prefix=\"Create: \"\n            can-add-new\n            chips=\"[\\\"Millie Bobby\\\"]\"\n            placeholder=\"nome completo\"\n            label=\"\"\n            disabled={false}\n            danger={false}\n            icon=\"\"\n            value=\"\"\n            error-message=\"\"\n            helper-message=\"\"\n            success-message=\"\"\n            success={false}>\n            <bds-select-option value=\"1\">Millie Bobby</bds-select-option>\n            <bds-select-option value=\"2\">Finn Wolfhard</bds-select-option>\n            <bds-select-option value=\"3\">David Harbour</bds-select-option>\n            <bds-select-option value=\"4\">Gaten Matarazzo</bds-select-option>\n            <bds-select-option value=\"5\">Caleb McLaughlin</bds-select-option>\n            <bds-select-option value=\"6\">Noah Schnapp</bds-select-option>\n        </bds-select-chips>\n    );\n};"},{"name":"Events","snippet":"const Events = () => {\n  useEffect(() => {\n    const selectChips = document.getElementById('select-chips');\n    selectChips.addEventListener('bdsBlur', () => {\n      console.log('Evento Blur funcionando');\n    });\n    selectChips.addEventListener('bdsCancel', () => {\n      console.log('Evento Cancel funcionando');\n    });\n    selectChips.addEventListener('bdsChange', () => {\n      console.log('Evento Change funcionando');\n    });\n    selectChips.addEventListener('bdsChangeChips', (obj) => {\n      console.log('Evento Focus funcionando', obj);\n    });\n    selectChips.addEventListener('bdsFocus', () => {\n      console.log('Evento Input funcionando');\n    });\n    selectChips.addEventListener('bdsSelectChipsInput', () => {\n      console.log('Evento Selected Change funcionando');\n    });\n    selectChips.addEventListener('bdsSubmit', () => {\n      console.log('Evento Selected Change funcionando');\n    });\n  });\n  return (\n    <bds-select-chips id=\"select-chips\">\n        <bds-select-option value=\"1\">Millie Bobby</bds-select-option>\n        <bds-select-option value=\"2\">Finn Wolfhard</bds-select-option>\n        <bds-select-option value=\"3\">David Harbour</bds-select-option>\n        <bds-select-option value=\"4\">Gaten Matarazzo</bds-select-option>\n        <bds-select-option value=\"5\">Caleb McLaughlin</bds-select-option>\n        <bds-select-option value=\"6\">Noah Schnapp</bds-select-option>\n      </bds-select-chips>\n  );\n};"},{"name":"FrameworkReact","snippet":"const FrameworkReact = () => {\n  return (\n    <BdsSelectChips\n      new-prefix=\"Create: \"\n      can-add-new={true}\n      options='[{\"value\": \"Cat\", \"label\": \"Meow\"}, {\"value\": \"Dog\", \"label\": \"Woof\"}]'\n    ></BdsSelectChips>\n  );\n};"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  3 | import DocumentationTemplate from './select-chips.mdx';\n  4 |\n> 5 | export default {\n    | ^\n  6 |   title: 'Components/Select Chips',\n  7 |   parameters: {\n  8 |     docs: {"}},"components-select":{"id":"components-select","name":"Select","path":"./src/components/selects/select/select.stories.jsx","examples":[{"name":"Properties","snippet":"const Properties = () => {\n    const el = document.getElementsByClassName('sb-story');\n    if (el.length !== 0) {\n      el[0].style.height = '250px';\n    }\n\n    return (\n        <bds-select\n            placeholder=\"nome completo\"\n            label=\"\"\n            disabled={false}\n            danger={false}\n            icon=\"\"\n            value=\"\"\n            error-message=\"\"\n            helper-message=\"\"\n            success-message=\"\"\n            success={false}>\n            <bds-select-option value=\"1\">Millie Bobby</bds-select-option>\n            <bds-select-option value=\"2\">Finn Wolfhard</bds-select-option>\n            <bds-select-option value=\"3\">David Harbour</bds-select-option>\n            <bds-select-option value=\"4\">Gaten Matarazzo</bds-select-option>\n            <bds-select-option value=\"5\">Caleb McLaughlin</bds-select-option>\n            <bds-select-option value=\"6\">Noah Schnapp</bds-select-option>\n        </bds-select>\n    );\n};"},{"name":"Events","snippet":"const Events = () => {\n  useEffect(() => {\n    const select = document.getElementById('select');\n    select.addEventListener('bdsBlur', () => {\n      console.log('Evento Blur funcionando');\n    });\n    select.addEventListener('bdsCancel', () => {\n      console.log('Evento Cancel funcionando');\n    });\n    select.addEventListener('bdsChange', () => {\n      console.log('Evento Change funcionando');\n    });\n    select.addEventListener('bdsFocus', () => {\n      console.log('Evento Focus funcionando');\n    });\n  });\n  return (\n  <bds-select id=\"select\">\n    <bds-select-option value=\"1\">Millie Bobby</bds-select-option>\n    <bds-select-option value=\"2\">Finn Wolfhard</bds-select-option>\n    <bds-select-option value=\"3\">David Harbour</bds-select-option>\n    <bds-select-option value=\"4\">Gaten Matarazzo</bds-select-option>\n    <bds-select-option value=\"5\">Caleb McLaughlin</bds-select-option>\n    <bds-select-option value=\"6\">Noah Schnapp</bds-select-option>\n  </bds-select>\n);\n};"},{"name":"FrameworkReact","snippet":"const FrameworkReact = () => (\n  <BdsSelect>\n    <BdsSelectOption value=\"1\">Millie Bobby</BdsSelectOption>\n    <BdsSelectOption value=\"2\">Finn Wolfhard</BdsSelectOption>\n    <BdsSelectOption value=\"3\">David Harbour</BdsSelectOption>\n    <BdsSelectOption value=\"4\">Gaten Matarazzo</BdsSelectOption>\n    <BdsSelectOption value=\"5\">Caleb McLaughlin</BdsSelectOption>\n    <BdsSelectOption value=\"6\">Noah Schnapp</BdsSelectOption>\n  </BdsSelect>\n);"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  3 | import { BdsSelect, BdsSelectOption } from '../../../../blip-ds-react/dist/components';\n  4 |\n> 5 | export default {\n    | ^\n  6 |   title: 'Components/Select',\n  7 |   parameters: {\n  8 |     docs: {"}},"components-sidebar":{"id":"components-sidebar","name":"Sidebar","path":"./src/components/sidebar/sidebar.stories.jsx","examples":[{"name":"Properties","snippet":"const Properties = () => {\n    const el = document.getElementsByClassName('sb-story');\n    if (el.length !== 0) {\n      el[0].style.width = '500px';\n      el[0].style.height = '680px';\n    }\n\n    return (\n        <bds-grid xxs=\"12\" height=\"95vh\">\n            <bds-sidebar\n                is-open\n                sidebar-position=\"right\"\n                margin=\"true\"\n                type=\"fixed\"\n                background=\"surface-2\"\n                width=\"360\">\n                <div slot=\"header\">\n                    <bds-typo>Insira o header aqui</bds-typo>\n                </div>\n                <div slot=\"body\">\n                    <bds-typo>Insira o seu conteúdo aqui</bds-typo>\n                </div>\n                <div slot=\"footer\">\n                    <bds-typo>Insira o footer aqui</bds-typo>\n                </div>\n            </bds-sidebar>\n        </bds-grid>\n    );\n};"},{"name":"Methods","snippet":"const Methods = () => {\n  const openSidebar = async (id) => {\n    const sb = document.getElementById(id);\n    sb.isOpen = true;\n  };\n  return (\n    <>\n    <bds-button onClick={() => openSidebar('sidebar')}>\n        Abrir Sidebar\n      </bds-button>\n    <bds-grid xxs=\"12\" height=\"95vh\">\n      <bds-sidebar id=\"sidebar\" is-open={false} sidebar-position=\"left\" margin={true} type=\"over\">\n      <div slot=\"header\">\n          <bds-typo>Insira o header aqui</bds-typo>\n        </div>\n        <div slot=\"body\">\n          <bds-typo>Insira o seu conteúdo aqui</bds-typo>\n        </div>\n        <div slot=\"footer\">\n          <bds-typo>Insira o footer aqui</bds-typo>\n        </div>\n      </bds-sidebar>\n    </bds-grid>\n    </>\n    \n  );\n};"},{"name":"Events","snippet":"const Events = () => {\n  const openSidebar = async (id) => {\n    const sb = document.getElementById(id);\n    sb.isOpen = true;\n  };\n  useEffect(() => {\n    const sidebar = document.getElementById('sidebar');\n    sidebar.addEventListener('bdsToggle', () => {\n      console.log('Evento bdsToggle funcionando');\n    });\n  });\n  return (\n    <>\n    <bds-button onClick={() => openSidebar('sidebar')}>\n        Abrir Sidebar\n      </bds-button>\n    <bds-grid xxs=\"12\" height=\"95vh\">\n      <bds-sidebar id=\"sidebar\" is-open={false} sidebar-position=\"left\" margin={true} type=\"over\">\n      <div slot=\"header\">\n          <bds-typo>Insira o header aqui</bds-typo>\n        </div>\n        <div slot=\"body\">\n          <bds-typo>Insira o seu conteúdo aqui</bds-typo>\n        </div>\n        <div slot=\"footer\">\n          <bds-typo>Insira o footer aqui</bds-typo>\n        </div>\n      </bds-sidebar>\n    </bds-grid>\n    </>\n  );\n};"},{"name":"FrameworkReact","snippet":"const FrameworkReact = () => {\n  return (\n      <BdsSidebar  is-open={true} sidebar-position=\"left\" margin={true} type=\"over\">\n        <div slot=\"header\">\n          <BdsTypo>Insira o header aqui</BdsTypo>\n        </div>\n        <div slot=\"body\">\n          <BdsTypo>Insira o seu conteúdo aqui</BdsTypo>\n        </div>\n        <div slot=\"footer\">\n          <BdsTypo>Insira o footer aqui</BdsTypo>\n        </div>\n      </BdsSidebar>\n  );\n};"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  3 | import { BdsSidebar, BdsTypo } from '../../../blip-ds-react/dist/components';\n  4 |\n> 5 | export default {\n    | ^\n  6 |   title: 'Components/Sidebar',\n  7 |   parameters: {\n  8 |     docs: {"}},"components-skeleton":{"id":"components-skeleton","name":"Skeleton","path":"./src/components/skeleton/skeleton.stories.jsx","examples":[{"name":"Properties","snippet":"const Properties = () => {\n    return (\n        <bds-grid xxs=\"12\" direction=\"column\" gap=\"2\">\n            <bds-skeleton shape=\"circle\" width=\"50px\" height=\"50px\" />\n            <bds-skeleton shape=\"square\" width=\"100px\" height=\"20px\" />\n            <bds-skeleton shape=\"square\" width=\"300px\" height=\"100px\" />\n            <bds-skeleton shape=\"square\" width=\"300px\" height=\"10px\" />\n        </bds-grid>\n    );\n};"},{"name":"FrameworkReact","snippet":"const FrameworkReact = () => {\n  return (\n    <BdsGrid xxs=\"12\" direction=\"column\" gap=\"2\">\n      <BdsSkeleton shape=\"circle\" width=\"50px\" height=\"50px\"></BdsSkeleton>\n      <BdsSkeleton shape=\"square\" width=\"100px\" height=\"20px\"></BdsSkeleton>\n      <BdsSkeleton shape=\"square\" width=\"300px\" height=\"100px\"></BdsSkeleton>\n      <BdsSkeleton shape=\"square\" width=\"300px\" height=\"10px\"></BdsSkeleton>\n    </BdsGrid>\n  );\n};"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  3 | import { BdsGrid, BdsSkeleton } from '../../../blip-ds-react/dist/components';\n  4 |\n> 5 | export default {\n    | ^\n  6 |   title: 'Components/Skeleton',\n  7 |   parameters: {\n  8 |     docs: {"}},"components-slider":{"id":"components-slider","name":"Slider","path":"./src/components/slider/slider.stories.jsx","examples":[{"name":"Properties","snippet":"const Properties = () => {\n    const el = document.getElementsByClassName('sb-story');\n    if (el.length !== 0) {\n      el[0].style.width = '700px';\n    }\n\n    return (\n        <bds-grid padding=\"t-6\" xxs={12}>\n            <bds-slider\n                value={50}\n                min={0}\n                max={100}\n                step={10}\n                markers={false}\n                label={false}\n                type=\"fill\"\n                data-markers=\"\" />\n        </bds-grid>\n    );\n};"},{"name":"Events","snippet":"const Events = () => {\n  useEffect(() => {\n    const slider = document.getElementById('slider');\n    slider.addEventListener('bdsChange', (obj) => {\n      console.log('Evento Change funcionando: ', obj);\n    });\n  });\n  return (\n    <bds-grid padding=\"t-6\" xxs={12}>\n      <bds-slider id=\"slider\" value={50} min={0} max={100} step={10} markers label type=\"fill\"></bds-slider>;\n    </bds-grid>\n  );\n};"},{"name":"FrameworkReact","snippet":"const FrameworkReact = () => (\n  <BdsGrid padding=\"t-6\">\n    <BdsSlider value={50} min={0} max={100} step={10} markers label type=\"fill\"></BdsSlider>\n  </BdsGrid>\n);"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  3 | import { BdsGrid, BdsSlider } from '../../../blip-ds-react/dist/components';\n  4 |\n> 5 | export default {\n    | ^\n  6 |   title: 'Components/Slider',\n  7 |   parameters: {\n  8 |     docs: {"}},"components-stepper":{"id":"components-stepper","name":"Stepper","path":"./src/components/stepper/stepper.stories.jsx","examples":[{"name":"Properties","snippet":"const Properties = () => {\n  const [step, setStep] = useState(0);\n\n  const handleNextStep = async () => {\n    const stepperComponent = document.querySelector('bds-stepper');\n\n    const activeStep = await stepperComponent.getActiveStep();\n\n    stepperComponent.setActiveStep(activeStep + 1);\n\n    stepperComponent.setCompletedStep(activeStep);\n\n    setStep(activeStep + 1);\n  };\n\n  const handlePreviousStep = async () => {\n    const stepperComponent = document.querySelector('bds-stepper');\n\n    const activeStep = await stepperComponent.getActiveStep();\n\n    stepperComponent.setActiveStep(activeStep - 1);\n\n    setStep(activeStep - 1);\n  };\n\n  const getStepContentByIndex = (index) => {\n    const content = {\n      0: 'Step one',\n      1: 'Step two',\n      2: 'Step three',\n    };\n\n    return content[index];\n  };\n  return (\n    <>\n      <div style={styles}>\n        <bds-stepper>\n          <bds-step active=\"true\">Step one 1</bds-step>\n          <bds-step>Step two 2</bds-step>\n          <bds-step>Step three 3</bds-step>\n        </bds-stepper>\n        <bds-paper elevation=\"secondary\" style={paperStyles}>\n          {getStepContentByIndex(step)}\n          {step === 3 && 'Finished!'}\n        </bds-paper>\n        <div style={{ display: 'flex' }}>\n          {(step == 1 || step == 2) && (\n            <bds-button style={{ marginRight: '8px' }} onClick={handlePreviousStep}>\n              Previous step\n            </bds-button>\n          )}\n          {(step == 0 || step == 1) && <bds-button onClick={handleNextStep}>Next step</bds-button>}\n          {step == 2 && <bds-button onClick={handleNextStep}>Finish</bds-button>}\n        </div>\n      </div>\n    </>\n  );\n};"},{"name":"Methods","snippet":"const Methods = () => {\n  const [step, setStep] = useState(0);\n\n  const handleNextStep = async () => {\n    const stepperComponent = document.querySelector('bds-stepper');\n\n    const activeStep = await stepperComponent.getActiveStep();\n\n    stepperComponent.setActiveStep(activeStep + 1);\n\n    stepperComponent.setCompletedStep(activeStep);\n\n    setStep(activeStep + 1);\n  };\n\n  const handlePreviousStep = async () => {\n    const stepperComponent = document.querySelector('bds-stepper');\n\n    const activeStep = await stepperComponent.getActiveStep();\n\n    stepperComponent.setActiveStep(activeStep - 1);\n\n    setStep(activeStep - 1);\n  };\n\n  const getStepContentByIndex = (index) => {\n    const content = {\n      0: 'Step one',\n      1: 'Step two',\n      2: 'Step three',\n    };\n\n    return content[index];\n  };\n  return (\n    <>\n      <div style={styles}>\n        <bds-stepper>\n          <bds-step active=\"true\">Step one 1</bds-step>\n          <bds-step>Step two 2</bds-step>\n          <bds-step>Step three 3</bds-step>\n        </bds-stepper>\n        <bds-paper elevation=\"secondary\" style={paperStyles}>\n          {getStepContentByIndex(step)}\n          {step === 3 && 'Finished!'}\n        </bds-paper>\n        <div style={{ display: 'flex' }}>\n          {(step == 1 || step == 2) && (\n            <bds-button style={{ marginRight: '8px' }} onClick={handlePreviousStep}>\n              Previous step\n            </bds-button>\n          )}\n          {(step == 0 || step == 1) && <bds-button onClick={handleNextStep}>Next step</bds-button>}\n          {step == 2 && <bds-button onClick={handleNextStep}>Finish</bds-button>}\n        </div>\n      </div>\n    </>\n  );\n};"},{"name":"FrameworkReact","snippet":"const FrameworkReact = () => {\n  const [step, setStep] = useState(0);\n\n  const handleNextStep = async () => {\n    const stepperComponent = document.querySelector('bds-stepper');\n\n    const activeStep = await stepperComponent.getActiveStep();\n\n    stepperComponent.setActiveStep(activeStep + 1);\n\n    stepperComponent.setCompletedStep(activeStep);\n\n    setStep(activeStep + 1);\n  };\n\n  const handlePreviousStep = async () => {\n    const stepperComponent = document.querySelector('bds-stepper');\n\n    const activeStep = await stepperComponent.getActiveStep();\n\n    stepperComponent.setActiveStep(activeStep - 1);\n\n    setStep(activeStep - 1);\n  };\n\n  const getStepContentByIndex = (index) => {\n    const content = {\n      0: 'Step one',\n      1: 'Step two',\n      2: 'Step three',\n    };\n\n    return content[index];\n  };\n  return (\n    <>\n      <div style={styles}>\n        <BdsStepper>\n          <BdsStep active=\"true\">Step one 1</BdsStep>\n          <BdsStep>Step two 2</BdsStep>\n          <BdsStep>Step three 3</BdsStep>\n        </BdsStepper>\n        <BdsPaper elevation=\"secondary\" style={paperStyles}>\n          {getStepContentByIndex(step)}\n          {step === 3 && 'Finished!'}\n        </BdsPaper>\n        <div style={{ display: 'flex' }}>\n          {(step == 1 || step == 2) && (\n            <BdsButton style={{ marginRight: '8px' }} onClick={handlePreviousStep}>\n              Previous step\n            </BdsButton>\n          )}\n          {(step == 0 || step == 1) && <BdsButton onClick={handleNextStep}>Next step</BdsButton>}\n          {step == 2 && <BdsButton onClick={handleNextStep}>Finish</BdsButton>}\n        </div>\n      </div>\n    </>\n  );\n};"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  3 | import { BdsStepper, BdsStep, BdsPaper, BdsButton } from '../../../blip-ds-react/dist/components';\n  4 |\n> 5 | export default {\n    | ^\n  6 |   title: 'Components/Stepper',\n  7 |   parameters: {\n  8 |     docs: {"}},"components-switch":{"id":"components-switch","name":"Switch","path":"./src/components/switch/switch.stories.jsx","examples":[{"name":"Properties","snippet":"const Properties = () => {\n    return <bds-switch name=\"cb1\" disabled={false} checked={false} refer=\"\" size=\"standard\" />;\n};"},{"name":"Events","snippet":"const Events = () => {\n  useEffect(() => {\n    const switchEl = document.getElementById('switch');\n    switchEl.addEventListener('bdsChange', () => {\n      console.log('Evento Blur funcionando');\n    });\n  });\n  return (\n    <bds-switch id=\"switch\" name=\"cb1\" disabled={false} checked={true}></bds-switch>\n);\n};"},{"name":"FrameworkReact","snippet":"const FrameworkReact = () => {\n  return (\n    <BdsSwitch id=\"switch\" name=\"cb1\" disabled={false} checked={true}></BdsSwitch>\n);\n};"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  3 | import { BdsSwitch } from '../../../blip-ds-react/dist/components';\n  4 |\n> 5 | export default {\n    | ^\n  6 |   title: 'Components/Switch',\n  7 |   parameters: {\n  8 |     docs: {"}},"components-data-table":{"id":"components-data-table","name":"Data Table","path":"./src/components/table/data-table.stories.jsx","examples":[{"name":"Properties","snippet":"const Properties = () => {\n    const el = document.getElementsByClassName('sb-story');\n    if (el.length !== 0) {\n      el[0].style.width = '600px';\n    }\n\n    return (\n        <bds-data-table\n            sorting=\"true\"\n            column=\"[{\\\"heading\\\": \\\"ID\\\", \\\"value\\\": \\\"id\\\"},{\\\"heading\\\": \\\"Name\\\", \\\"value\\\": \\\"name\\\"},{\\\"heading\\\": \\\"Data do primeiro ticket atendido\\\", \\\"value\\\": \\\"data\\\"},{\\\"heading\\\": \\\"Status\\\", \\\"value\\\": \\\"status\\\"}]\"\n            options=\"[{ \\\"id\\\": \\\"1\\\", \\\"name\\\": \\\"Michael Scott\\\", \\\"avatar\\\":\\\"\\\", \\\"data\\\": \\\"01/01/2022\\\", \\\"status\\\": \\\"ativo\\\" },{ \\\"id\\\": \\\"2\\\", \\\"name\\\" : \\\"Dwight Schrute\\\", \\\"data\\\": \\\"01/01/2022\\\", \\\"status\\\": \\\"ativo\\\" },{ \\\"id\\\": \\\"3\\\", \\\"name\\\" : \\\"Jim Halpert\\\", \\\"avatar\\\":\\\"\\\", \\\"data\\\": \\\"01/01/2022\\\", \\\"status\\\": \\\"ativo\\\" },{ \\\"id\\\": \\\"4\\\", \\\"name\\\" : \\\"Pam Beesly\\\", \\\"avatar\\\":\\\"\\\", \\\"data\\\": \\\"01/01/2022\\\", \\\"status\\\": \\\"inativo\\\"},{ \\\"id\\\": \\\"5\\\", \\\"name\\\" : \\\"Ryan Howard\\\", \\\"avatar\\\":\\\"\\\", \\\"data\\\": \\\"01/01/2022\\\", \\\"status\\\": \\\"inativo\\\" },{ \\\"id\\\": \\\"6\\\", \\\"name\\\" : \\\"Andy Bernard\\\", \\\"avatar\\\":\\\"\\\", \\\"data\\\": \\\"01/01/2022\\\", \\\"status\\\": \\\"ativo\\\"}]\" />\n    );\n};"},{"name":"FrameworkReact","snippet":"const FrameworkReact = () => {\n  return (\n    <BdsDataTable\n      sorting=\"true\"\n      column='[\n      {\"heading\": \"ID\", \"value\": \"id\"},\n      {\"heading\": \"Name\", \"value\": \"name\"},\n      {\"heading\": \"Data do primeiro ticket atendido\", \"value\": \"data\"},\n      {\"heading\": \"Status\", \"value\": \"status\"}\n      ]'\n      options='[\n        { \"id\": \"1\", \"name\": \"Michael Scott\", \"avatar\":\"\", \"data\": \"01/01/2022\", \"status\": \"ativo\" },\n      { \"id\": \"2\", \"name\" : \"Dwight Schrute\", \"data\": \"01/01/2022\", \"status\": \"ativo\" },\n      { \"id\": \"3\", \"name\" : \"Jim Halpert\", \"avatar\":\"\", \"data\": \"01/01/2022\", \"status\": \"ativo\" },\n      { \"id\": \"4\", \"name\" : \"Pam Beesly\", \"avatar\":\"\", \"data\": \"01/01/2022\", \"status\": \"inativo\"},\n      { \"id\": \"5\", \"name\" : \"Ryan Howard\", \"avatar\":\"\", \"data\": \"01/01/2022\", \"status\": \"inativo\" },\n      { \"id\": \"6\", \"name\" : \"Andy Bernard\", \"avatar\":\"\", \"data\": \"01/01/2022\", \"status\": \"ativo\"}\n      ]'\n    ></BdsDataTable>\n  );\n};"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  3 | import DocumentationTemplate from './data-table.mdx';\n  4 |\n> 5 | export default {\n    | ^\n  6 |   title: 'Components/Data Table',\n  7 |   parameters: {\n  8 |     docs: {"}},"components-table":{"id":"components-table","name":"Table","path":"./src/components/table/table/table.stories.jsx","examples":[{"name":"Properties","snippet":"const Properties = () => {\n    const el = document.getElementsByClassName('sb-story');\n    if (el.length !== 0) {\n      el[0].style.height = '300px';\n    }\n\n    return (\n        <bds-table id=\"table-default\" scrollable={false} dense-table={false}>\n            <bds-table-header>\n                <bds-table-row>\n                    <bds-table-th justify-content=\"center\">Identificador</bds-table-th>\n                    <bds-table-th>Produtos</bds-table-th>\n                    <bds-table-th>Valor</bds-table-th>\n                    <bds-table-th>Disponibilidade</bds-table-th>\n                    <bds-table-th>Marca</bds-table-th>\n                    <bds-table-th justify-content=\"right\">Estoque</bds-table-th>\n                    <bds-table-th>Categoria</bds-table-th>\n                </bds-table-row>\n            </bds-table-header>\n            <bds-table-body>\n                {DATA.map((row, index) => {\n                  return (\n                    <bds-table-row key={index}>\n                      <bds-table-cell justify-content=\"center\">\n                        <bds-typo variant=\"fs-14\">{row.id}</bds-typo>\n                      </bds-table-cell>\n                      <bds-table-cell>\n                        <bds-typo variant=\"fs-14\">{row.produto}</bds-typo>\n                      </bds-table-cell>\n                      <bds-table-cell>\n                        <bds-typo variant=\"fs-14\">{row.valor}</bds-typo>\n                      </bds-table-cell>\n                      <bds-table-cell type={args.type}>\n                        {row.disponibilidade === 'disponivel' ? (\n                          <bds-chip-tag color=\"success\">{row.disponibilidade}</bds-chip-tag>\n                        ) : (\n                          <bds-chip-tag color=\"danger\">{row.disponibilidade}</bds-chip-tag>\n                        )}\n                      </bds-table-cell>\n                      <bds-table-cell>\n                        <bds-typo variant=\"fs-14\">{row.marca}</bds-typo>\n                      </bds-table-cell>\n                      <bds-table-cell justify-content=\"right\">\n                        <bds-typo variant=\"fs-14\">{row.estoque}</bds-typo>\n                      </bds-table-cell>\n                      <bds-table-cell>\n                        <bds-typo variant=\"fs-14\">{row.categoria}</bds-typo>\n                      </bds-table-cell>\n                    </bds-table-row>\n                  );\n                })}\n            </bds-table-body>\n        </bds-table>\n    );\n};"},{"name":"WebComponent","snippet":"const WebComponent = () => {\n  const DATA = [\n    { id: 1, produto: 'Celular', valor: '1500,00', disponibilidade: 'disponivel' },\n    { id: 2, produto: 'Notebook', valor: '4000,00', disponibilidade: 'indisponivel' },\n    { id: 3, produto: 'Livros', valor: '60,00', disponibilidade: 'disponivel' },\n  ];\n\n  const heading = ['id', 'Produtos', 'Valor', 'Disponibilidade'];\n\n  return (\n    <bds-table>\n      <bds-table-header>\n        <bds-table-row>\n          {heading.map((item, index) => {\n            return <bds-table-th key={index}>{item}</bds-table-th>;\n          })}\n        </bds-table-row>\n      </bds-table-header>\n      <bds-table-body>\n        {DATA.map((row, index) => {\n          return (\n            <bds-table-row key={index}>\n              <bds-table-cell>\n                <bds-typo variant=\"fs-14\">{row.id}</bds-typo>\n              </bds-table-cell>\n              <bds-table-cell>\n                <bds-typo variant=\"fs-14\">{row.produto}</bds-typo>\n              </bds-table-cell>\n              <bds-table-cell>\n                <bds-typo variant=\"fs-14\">{row.valor}</bds-typo>\n              </bds-table-cell>\n              <bds-table-cell type=\"custom\">\n                {row.disponibilidade === 'disponivel' ? (\n                  <bds-chip-tag color=\"success\">{row.disponibilidade}</bds-chip-tag>\n                ) : (\n                  <bds-chip-tag color=\"danger\">{row.disponibilidade}</bds-chip-tag>\n                )}\n              </bds-table-cell>\n            </bds-table-row>\n          );\n        })}\n      </bds-table-body>\n    </bds-table>\n  );\n};"},{"name":"FrameworkReact","snippet":"const FrameworkReact = () => {\n  return (\n    <BdsTable>\n      <BdsTableHeader>\n        <BdsTableRow>\n          {heading.map((item, index) => {\n            return <BdsTableTh key={index}>{item}</BdsTableTh>;\n          })}\n        </BdsTableRow>\n      </BdsTableHeader>\n      <BdsTableBody>\n        {DATA.map((row, index) => {\n          return (\n            <BdsTableRow key={index}>\n              <BdsTableCell>\n                <BdsTypo variant=\"fs-14\">{row.id}</BdsTypo>\n              </BdsTableCell>\n              <BdsTableCell>\n                <BdsTypo variant=\"fs-14\">{row.produto}</BdsTypo>\n              </BdsTableCell>\n              <BdsTableCell>\n                <BdsTypo variant=\"fs-14\">{row.valor}</BdsTypo>\n              </BdsTableCell>\n              <BdsTableCell type=\"custom\">\n                {row.disponibilidade === 'disponivel' ? (\n                  <BdsChipTag color=\"success\">{row.disponibilidade}</BdsChipTag>\n                ) : (\n                  <BdsChipTag color=\"danger\">{row.disponibilidade}</BdsChipTag>\n                )}\n              </BdsTableCell>\n            </BdsTableRow>\n          );\n        })}\n      </BdsTableBody>\n    </BdsTable>\n  );\n};"},{"name":"TableSorting","snippet":"const TableSorting = () => {\n  const [arrow, setArrow] = useState('');\n  const [sortedColumn, setSortedColumn] = useState(null);\n  const [sortDirection, setSortDirection] = useState(1);\n\n  const toggleSort = (columnIndex) => {\n    if (sortedColumn === columnIndex) {\n      setSortDirection(-sortDirection);\n      if (sortDirection === -1) {\n        setArrow('asc');\n      } else {\n        setArrow('dsc');\n      }\n    } else {\n      setSortedColumn(columnIndex);\n      setSortDirection(1);\n      if (sortDirection === -1) {\n        setArrow('dsc');\n      } else {\n        setArrow('asc');\n      }\n    }\n  };\n\n  const sortedData =\n    sortedColumn !== null\n      ? [...DATA].sort((a, b) => {\n          const valA = a[heading[sortedColumn]];\n          const valB = b[heading[sortedColumn]];\n\n          console.log(sortedColumn);\n\n          if (valA < valB) return -sortDirection;\n          if (valA > valB) return sortDirection;\n          return 0;\n        })\n      : DATA;\n\n  return (\n    <bds-table>\n      <bds-table-header>\n        <bds-table-row>\n          {heading.map((item, index) => {\n            return (\n              <bds-table-th\n                onClick={() => toggleSort(index)}\n                sortable={sortedColumn === index ? true : false}\n                arrow={arrow}\n                key={index}\n              >\n                {item}\n              </bds-table-th>\n            );\n          })}\n        </bds-table-row>\n      </bds-table-header>\n      <bds-table-body>\n        {sortedData.map((row, index) => {\n          console.log(sortedColumn);\n          return (\n            <bds-table-row key={index}>\n              <bds-table-cell>\n                <bds-typo variant=\"fs-14\" bold={sortedColumn === 0 ? 'bold' : 'regular'}>\n                  {row.id}\n                </bds-typo>\n              </bds-table-cell>\n              <bds-table-cell>\n                <bds-typo variant=\"fs-14\" bold={sortedColumn === 1 ? 'bold' : 'regular'}>\n                  {row.produto}\n                </bds-typo>\n              </bds-table-cell>\n              <bds-table-cell>\n                <bds-typo variant=\"fs-14\" bold={sortedColumn === 2 ? 'bold' : 'regular'}>\n                  {row.valor}\n                </bds-typo>\n              </bds-table-cell>\n              <bds-table-cell type=\"custom\">\n                {row.disponibilidade === 'disponivel' ? (\n                  <bds-chip-tag color=\"success\">{row.disponibilidade}</bds-chip-tag>\n                ) : (\n                  <bds-chip-tag color=\"danger\">{row.disponibilidade}</bds-chip-tag>\n                )}\n              </bds-table-cell>\n            </bds-table-row>\n          );\n        })}\n      </bds-table-body>\n    </bds-table>\n  );\n};"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  13 | import DocumentationTemplate from './table.mdx';\n  14 |\n> 15 | export default {\n     | ^\n  16 |   title: 'Components/Table',\n  17 |   parameters: {\n  18 |     docs: {"}},"components-tabs":{"id":"components-tabs","name":"Tabs","path":"./src/components/tabs/tab-group.stories.jsx","examples":[{"name":"Properties","snippet":"const Properties = () => {\n    return (\n        <bds-tab-group align=\"center\" content-scrollable>\n            <bds-tab-item\n                label=\"Basic settings\"\n                icon=\"builder-publish-bot\"\n                icon-position=\"left\"\n                icon-theme=\"outline\"\n                badge\n                badge-shape=\"circle\"\n                badge-color=\"warning\"\n                badge-icon=\"warning\"\n                badge-animation={false}\n                badge-number={null}\n                badge-position=\"right\"\n                error={false}\n                header-style={null}\n                content-style={null}>\n                <bds-grid padding=\"2\">\n                    <bds-typo variant=\"fs-16\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed ultricies consectetur quam ut feugiat. Integer arcu enim, placerat eget mauris sed, pretium congue augue.\n                                  </bds-typo>\n                </bds-grid>\n            </bds-tab-item>\n            <bds-tab-item disable={false} label=\"Advanced settings\">\n                <bds-grid padding=\"2\">\n                    <bds-typo variant=\"fs-16\">Donec ut lacus sit amet tellus egestas placerat non sed lacus. Curabitur varius commodo sagittis. In hac habitasse platea dictumst. Morbi non suscipit nisi.\n                                  </bds-typo>\n                </bds-grid>\n            </bds-tab-item>\n            <bds-tab-item open={false} label=\"Very advanced settings\">\n                <bds-grid padding=\"2\">\n                    <bds-typo variant=\"fs-16\">Suspendisse pellentesque quam porttitor enim rhoncus vehicula. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas.\n                                  </bds-typo>\n                </bds-grid>\n            </bds-tab-item>\n        </bds-tab-group>\n    );\n};"},{"name":"Events","snippet":"const Events = () => {\n  useEffect(() => {\n    const tabs = document.getElementById('tabs');\n    tabs.addEventListener('bdsTabChange', () => {\n      console.log('Evento bdsTabChange funcionando');\n    });\n    tabs.addEventListener('bdsTabDisabled', () => {\n      console.log('Evento bdsTabDisabled funcionando');\n    });\n  });\n  return (\n          <bds-tab-group id=\"tabs\">\n            <bds-tab-item label=\"Basic settings\" error={true}>\n              <bds-typo style={contentDefault} variant=\"fs-16\">\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed ultricies consectetur quam ut feugiat.\n                Integer arcu enim, placerat eget mauris sed, pretium congue augue.\n              </bds-typo>\n            </bds-tab-item>\n            <bds-tab-item disable={true} label=\"Advanced settings\">\n              <bds-typo style={contentDefault} variant=\"fs-16\">\n                Donec ut lacus sit amet tellus egestas placerat non sed lacus. Curabitur varius commodo sagittis. In hac\n                habitasse platea dictumst. Morbi non suscipit nisi.\n              </bds-typo>\n            </bds-tab-item>\n            <bds-tab-item label=\"Very advanced settings\">\n              <bds-typo style={contentDefault} variant=\"fs-16\">\n                Suspendisse pellentesque quam porttitor enim rhoncus vehicula. Pellentesque habitant morbi tristique\n                senectus et netus et malesuada fames ac turpis egestas.\n              </bds-typo>\n            </bds-tab-item>\n            <bds-tab-item label=\"Personal settings\">\n              <bds-typo style={contentDefault} variant=\"fs-16\">\n                Phasellus eget semper ipsum. Vivamus interdum luctus varius. Nullam vel orci elit. Phasellus auctor\n                augue vitae ultrices accumsan. In eget ornare orci, eu sollicitudin justo.\n              </bds-typo>\n            </bds-tab-item>\n            <bds-tab-item label=\"Common settings\">\n              <bds-typo style={contentDefault} variant=\"fs-16\">\n                Integer sollicitudin bibendum eros, quis scelerisque lorem vulputate sit amet. Aliquam cursus lacinia\n                egestas. In hac habitasse platea dictumst. Aenean eu volutpat risus.\n              </bds-typo>\n            </bds-tab-item>\n          </bds-tab-group>\n  );\n};"},{"name":"CustomStyling","snippet":"const CustomStyling = () => {\n  return (\n    <bds-tab-group>\n      <bds-tab-item \n        label=\"Basic settings\" \n        error={true}\n        header-style=\"padding: 0;\"\n        content-style=\"background: red;\"\n      >\n        <bds-typo variant=\"fs-16\">\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed ultricies consectetur quam ut feugiat. Integer arcu enim, placerat eget mauris sed, pretium congue augue.\n        </bds-typo>\n      </bds-tab-item>\n      <bds-tab-item \n        label=\"Advanced settings\"\n        header-style=\"padding: 20px; background: lightblue;\"\n        content-style=\"background: lightgreen; padding: 20px;\"\n      >\n        <bds-typo variant=\"fs-16\">\n          Donec ut lacus sit amet tellus egestas placerat non sed lacus. Curabitur varius commodo sagittis. In hac habitasse platea dictumst. Morbi non suscipit nisi.\n        </bds-typo>\n      </bds-tab-item>\n      <bds-tab-item \n        label=\"Very advanced settings\"\n        header-style=\"padding: 10px; border: 2px solid purple;\"\n        content-style=\"background: lightyellow; border: 1px solid orange; padding: 15px;\"\n      >\n        <bds-typo variant=\"fs-16\">\n          Suspendisse pellentesque quam porttitor enim rhoncus vehicula. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas.\n        </bds-typo>\n      </bds-tab-item>\n    </bds-tab-group>\n  );\n};"},{"name":"FrameworkReact","snippet":"const FrameworkReact = () => {\n  return (\n    <>\n          <BdsTabGroup>\n            <BdsTabItem label=\"Basic settings\">\n              <BdsTypo variant=\"fs-16\">\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed ultricies consectetur quam ut feugiat.\n                Integer arcu enim, placerat eget mauris sed, pretium congue augue.\n              </BdsTypo>\n            </BdsTabItem>\n            <BdsTabItem label=\"Advanced settings\">\n              <BdsTypo variant=\"fs-16\">\n                Donec ut lacus sit amet tellus egestas placerat non sed lacus. Curabitur varius commodo sagittis. In hac\n                habitasse platea dictumst. Morbi non suscipit nisi.\n              </BdsTypo>\n            </BdsTabItem>\n          </BdsTabGroup>\n    </>\n  );\n};"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  3 | import DocumentationTemplate from './tabs.mdx';\n  4 |\n> 5 | export default {\n    | ^\n  6 |   title: 'Components/Tabs',\n  7 |   parameters: {\n  8 |     docs: {"}},"components-theme-provider":{"id":"components-theme-provider","name":"Theme provider","path":"./src/components/theme-provider/theme-provider.stories.jsx","examples":[{"name":"Properties","snippet":"const Properties = () => {\n    return (\n        <>\n            <bds-theme-provider theme=\"light\">\n                <bds-grid xxs=\"12\">\n                    <bds-paper width=\"500px\">\n                        <bds-grid direction=\"column\" padding=\"2\" gap=\"2\">\n                            <bds-typo variant=\"fs-32\" bold=\"bold\">Exemplo de uso do tema\n                                              </bds-typo>\n                            <bds-input-chips chips='[\"chip1\", \"chip2\"]' />\n                            <bds-avatar name=\"Michael Scott\" size=\"standard\" upload=\"false\">\n                            </bds-avatar>\n                            <bds-banner variant=\"system\" context=\"inside\">Este é um banner do tipo inside. Ele pode conter várias linhas, mas a sugestão é que possua textos\n                                                  curtos e objetivos.\n                                                </bds-banner>\n                        </bds-grid>\n                    </bds-paper>\n                </bds-grid>\n            </bds-theme-provider>\n        </>\n    );\n};"},{"name":"FrameworkReact","snippet":"const FrameworkReact = () => {\n  return (\n    <>\n      <BdsThemeProvider theme=\"light\">\n        <BdsGrid xxs=\"12\">\n          <BdsPaper width=\"500px\">\n            <BdsGrid direction=\"column\" padding=\"2\" gap=\"2\">\n              <BdsTypo variant=\"fs-32\" bold=\"bold\">\n                Exemplo de uso do tema\n              </BdsTypo>\n              <BdsInputChips chips='[\"chip1\", \"chip2\"]'></BdsInputChips>\n              <BdsAvatar name=\"Michael Scott\" size=\"standard\" upload=\"false\">\n              </BdsAvatar>\n              <BdsBanner variant=\"system\" context=\"inside\">\n                  Este é um banner do tipo inside. Ele pode conter várias linhas, mas a sugestão é que possua textos\n                  curtos e objetivos.\n                </BdsBanner>\n            </BdsGrid>\n          </BdsPaper>\n        </BdsGrid>\n      </BdsThemeProvider>\n    </>\n  );\n};"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  3 | import { BdsAvatar, BdsBanner, BdsGrid, BdsInputChips, BdsPaper, BdsThemeProvider, BdsTypo } from '../../../blip-ds-react/dist/components';\n  4 |\n> 5 | export default {\n    | ^\n  6 |   title: 'Components/Theme provider',\n  7 |   parameters: {\n  8 |     docs: {"}},"components-toast":{"id":"components-toast","name":"Toast","path":"./src/components/toast/toast.stories.jsx","examples":[{"name":"Properties","snippet":"const Properties = () => {\n    return (\n        <bds-toast\n            button-action=\"close\"\n            button-text=\"\"\n            action-type=\"icon\"\n            toast-title=\"Toast de teste\"\n            toast-text=\"Esse é um toast para testes, podendo ser modificado na tabela.\"\n            variant=\"system\"\n            show />\n    );\n};"},{"name":"Events","snippet":"const Events = () => {\n  useEffect(() => {\n    const toast = document.getElementById('toast');\n    toast.addEventListener('toastButtonClick', () => {\n      console.log('Evento toastButtonClick funcionando');\n    });\n  });\n  return (\n    <bds-toast\n      id=\"toast\"\n      button-action=\"close\"\n      action-type=\"icon\"\n      toast-title=\"toast system\"\n      toast-text=\"Este é um toast de sistema\"\n      variant=\"system\"\n      show=\"true\"\n    ></bds-toast>\n  );\n};"},{"name":"FrameworkReact","snippet":"const FrameworkReact = () => {\n  return (\n    <BdsToast\n      id=\"toast\"\n      buttonAction=\"close\"\n      actionType=\"icon\"\n      toastTitle=\"toast system\"\n      toastText=\"Este é um toast de sistema\"\n      variant=\"system\"\n      show=\"true\"\n    ></BdsToast>\n  );\n};"},{"name":"Methods","snippet":"const Methods = () => {\n  const showToast = async () => {\n    const newtoast = document.createElement('bds-toast');\n    document.body.appendChild(newtoast);\n\n    const icon = 'bell';\n    const variant = 'system';\n    const actionType = 'icon';\n    const toastTitle = 'Toast de teste';\n    const toastText = 'Esse é um toast para testes, podendo ser modificado na tabela.';\n    const buttonAction = 'close';\n\n    await newtoast.create({\n      variant,\n      actionType,\n      toastTitle,\n      buttonAction,\n      toastText,\n      icon,\n    });\n  };\n\n  return (\n    <>\n      <bds-button onClick={() => showToast()}>Show toast</bds-button>\n    </>\n  );\n};"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  3 | import { BdsToast } from '../../../blip-ds-react/dist/components';\n  4 |\n> 5 | export default {\n    | ^\n  6 |   title: 'Components/Toast',\n  7 |   parameters: {\n  8 |     docs: {"}},"components-tooltip":{"id":"components-tooltip","name":"Tooltip","path":"./src/components/tooltip/tooltip.stories.jsx","examples":[{"name":"Properties","snippet":"const Properties = () => {\n    return (\n        <bds-grid margin=\"auto\">\n            <bds-tooltip\n                position=\"right-center\"\n                tooltip-text=\"Tooltip\"\n                disabled={false}\n                max-width=\"\">\n                <bds-button>Hover me</bds-button>\n            </bds-tooltip>\n        </bds-grid>\n    );\n};"},{"name":"Methods","snippet":"const Methods = () => {\n  const showTooltip = async (id) => {\n    const tooltip = document.getElementById(id);\n    tooltip.visible();\n  };\n  return (\n    <bds-grid margin=\"auto\" gap=\"3\" direction=\"column\" align-items=\"center\">\n      <bds-tooltip id=\"tooltip\" position=\"left-center\" tooltip-text=\"Texto do tooltip\">\n        <bds-icon name=\"warning\"></bds-icon>\n      </bds-tooltip>\n      <bds-button onClick={() => showTooltip('tooltip')}>Mostrar tooltip</bds-button>\n    </bds-grid>\n  );\n};"},{"name":"FrameworkReact","snippet":"const FrameworkReact = () => {\n  return (\n    <BdsGrid margin=\"auto\" gap=\"3\" direction=\"column\" align-items=\"center\">\n      <BdsTooltip id=\"tooltip\" position=\"left-center\" tooltip-text=\"Texto do tooltip\">\n        <BdsIcon name=\"warning\"></BdsIcon>\n      </BdsTooltip>\n    </BdsGrid>\n  );\n};"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  3 | import { BdsGrid, BdsIcon, BdsTooltip } from '../../../blip-ds-react/dist/components';\n  4 |\n> 5 | export default {\n    | ^\n  6 |   title: 'Components/Tooltip',\n  7 |   parameters: {\n  8 |     docs: {"}},"components-typo":{"id":"components-typo","name":"Typo","path":"./src/components/typo/typo.stories.jsx","examples":[{"name":"Properties","snippet":"const Properties = () => {\n    return (\n        <bds-typo\n            variant=\"fs-16\"\n            line-height=\"\"\n            bold=\"regular\"\n            italic={false}\n            no-wrap={false}\n            paragraph={false}\n            margin={false}>Texto para teste do typo.\n                </bds-typo>\n    );\n};"},{"name":"FrameworkReact","snippet":"const FrameworkReact = () => {\n  return <BdsTypo>Texto para teste do typo.</BdsTypo>;\n};"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  3 | import { BdsTypo } from '../../../blip-ds-react/dist/components';\n  4 |\n> 5 | export default {\n    | ^\n  6 |   title: 'Components/Typo',\n  7 |   parameters: {\n  8 |     docs: {"}},"components-upload":{"id":"components-upload","name":"Upload","path":"./src/components/upload/upload.stories.jsx","examples":[{"name":"Properties","snippet":"const Properties = () => {\n    return (\n        <bds-upload\n            title-name=\"Title uploader\"\n            subtitle=\"Description uploades, only one file\"\n            accept=\"\"\n            error=\"\"\n            language=\"pt_BR\"\n            multiple={false} />\n    );\n};"},{"name":"Methods","snippet":"const Methods = () => {\n  const deleteItem = async (id) => {\n    const inputUpload = document.getElementById(id);\n    await inputUpload.deleteFile(0);\n  };\n  const deleteAllItens = async (id) => {\n    const inputUpload = document.getElementById(id);\n    await inputUpload.deleteAllFiles();\n  };\n  return (\n    <bds-grid direction=\"column\" gap=\"2\">\n      <bds-grid gap=\"2\">\n        <bds-upload\n          id=\"upload\"\n          multiple\n          title-name=\"Title uploader\"\n          subtitle=\"Description uploades, e.g.: can upload multiples files\"\n        ></bds-upload>\n        <bds-button onClick={() => deleteItem('upload')}> Excluir Item </bds-button>\n        <bds-button onClick={() => deleteAllItens('upload')}> Excluir todos os Itens </bds-button>\n      </bds-grid>\n    </bds-grid>\n  );\n};"},{"name":"Events","snippet":"const Events = () => {\n  useEffect(() => {\n    const upload = document.getElementById('upload');\n    upload.addEventListener('bdsUploadChange', () => {\n      console.log('Evento bdsUploadChange funcionando');\n    });\n    upload.addEventListener('bdsUploadDelete', () => {\n      console.log('Evento bdsUploadDelete funcionando');\n    });\n  });\n\n  return (\n    <bds-upload\n      id=\"upload\"\n      multiple\n      title-name=\"Title uploader\"\n      subtitle=\"Description uploades, e.g.: can upload multiples files\"\n    ></bds-upload>\n  );\n};"},{"name":"FrameworkReact","snippet":"const FrameworkReact = () => {\n  return (\n    <BdsUpload\n      multiple\n      error=\"There was an error attaching the file, please try again or select another file\"\n      titleName=\"Title uploader\"\n      subtitle=\"Description uploades, e.g.: only .jpg files at 10mb or less\"\n    ></BdsUpload>\n  );\n};"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  3 | import { BdsUpload } from '../../../blip-ds-react/dist/components';\n  4 |\n> 5 | export default {\n    | ^\n  6 |   title: 'Components/Upload',\n  7 |   parameters: {\n  8 |     docs: {"}},"snippets-button-group":{"id":"snippets-button-group","name":"Button Group","path":"./src/snippets/button-group.stories.jsx","examples":[{"name":"SimpleButtonGroup","snippet":"const SimpleButtonGroup = (args) => (\n  <bds-button-group>\n    <bds-button icon-left=\"builder-publish-bot\"></bds-button>\n    <bds-button icon-left=\"search\"></bds-button>\n    <bds-button icon-left=\"email\"></bds-button>\n    <bds-button icon-left=\"bell\"></bds-button>\n    <bds-button icon-left=\"settings-general\"></bds-button>\n  </bds-button-group>\n);"},{"name":"InteractiveButtonGroup","snippet":"const InteractiveButtonGroup = () => {\n  const [selectedButton, setSelectedButton] = useState('');\n\n  useEffect(() => {\n    const buttonGroup = document.getElementById('button-group');\n\n    buttonGroup.addEventListener('buttonSelected', (obj) => {\n      setSelectedButton(obj.detail);\n    });\n\n    return () => {\n      buttonGroup.removeEventListener('buttonSelected', (obj) => {\n        setSelectedButton('');\n      });\n    };\n  }, []);\n\n  return (\n    <div>\n      <bds-button-group id=\"button-group\">\n        <bds-button icon-left=\"builder-publish-bot\" id=\"bot-builder-publish\"></bds-button>\n        <bds-button icon-left=\"search\" id=\"bot-search\"></bds-button>\n        <bds-button icon-left=\"email\" id=\"bot-email\"></bds-button>\n        <bds-button icon-left=\"bell\" id=\"bot-bell\"></bds-button>\n        <bds-button icon-left=\"settings-general\" id=\"bot-settings\"></bds-button>\n      </bds-button-group>\n      <bds-grid padding=\"y-3\">\n        <bds-typo>\n          <strong>Botão selecionado:</strong> {selectedButton}\n        </bds-typo>\n      </bds-grid>\n    </div>\n  );\n};"},{"name":"CompleteButtonGroup","snippet":"const CompleteButtonGroup = () => {\n  const [selectedGroup, setSelectedGroup] = useState(null);\n\n  const handleGroupSelection = (group) => {\n    setSelectedGroup(group);\n  };\n\n  return (\n    <bds-card height=\"fit-content\" width=\"500px\">\n      <bds-card-header align=\"center\">\n        <bds-card-title text=\"Selecione um Grupo\"></bds-card-title>\n      </bds-card-header>\n      <bds-card-content>\n        <bds-button-group>\n          {DATA.map((group) => (\n            <bds-button\n              key={group.id}\n              onClick={() => handleGroupSelection(group.name)}\n              variant={group.name === selectedGroup ? 'solid' : 'outline'}\n            >\n              {group.name}\n            </bds-button>\n          ))}\n        </bds-button-group>\n      </bds-card-content>\n      <bds-card-footer align=\"center\">\n        <bds-typo variant=\"fs-14\">Grupo selecionado: {selectedGroup}</bds-typo>\n      </bds-card-footer>\n    </bds-card>\n  );\n};"},{"name":"FilterButtonGroup","snippet":"const FilterButtonGroup = () => {\n  const [selectedCategory, setSelectedCategory] = useState(null);\n  const filteredItems = DATAGroup.find((data) => data.category === selectedCategory)?.items || [];\n\n  return (\n    <bds-card height=\"fit-content\" width=\"500px\">\n      <bds-card-header align=\"center\">\n        <bds-card-title text=\"Selecione uma Categoria\"></bds-card-title>\n      </bds-card-header>\n      <bds-card-content>\n        <bds-button-group>\n          {DATAGroup.map((data) => (\n            <bds-button\n              key={data.id}\n              onClick={() => setSelectedCategory(data.category)}\n              variant={data.category === selectedCategory ? 'solid' : 'outline'}\n            >\n              {data.category}\n            </bds-button>\n          ))}\n        </bds-button-group>\n        <bds-grid margin=\"t-2\" direction=\"column\">\n          <bds-typo bold=\"bold\">Itens da Categoria: {selectedCategory}</bds-typo>\n          <ul>\n            {filteredItems.map((item, index) => (\n              <li key={index}>\n                <bds-typo>{item}</bds-typo>\n              </li>\n            ))}\n          </ul>\n        </bds-grid>\n      </bds-card-content>\n    </bds-card>\n  );\n};"},{"name":"ThemeSelector","snippet":"const ThemeSelector = () => {\n  const [selectedTheme, setSelectedTheme] = useState(THEMES[0].class);\n\n  const applyTheme = (themeClass) => {\n    setSelectedTheme(themeClass);\n  };\n\n  useEffect(() => {\n    const buttonGroup = document.getElementById('button-group-theme');\n    if (buttonGroup) {\n      buttonGroup.addEventListener('buttonSelected', (event) => {\n        console.log('Botão selecionado:', event.detail);\n      });\n\n      buttonGroup.activateButton(0);\n    }\n  }, []);\n\n  return (\n    <bds-card height=\"fit-content\" width=\"500px\">\n      <bds-card-header align=\"center\">\n        <bds-card-title text=\"Selecione um Tema\"></bds-card-title>\n      </bds-card-header>\n      <bds-card-content>\n        <bds-button-group id=\"button-group-theme\">\n          {THEMES.map((theme) => (\n            <bds-button\n              key={theme.id}\n              onClick={() => applyTheme(theme.class)}\n              variant={theme.class === selectedTheme ? 'solid' : 'outline'}\n            >\n              {theme.name}\n            </bds-button>\n          ))}\n        </bds-button-group>\n        <bds-theme-provider theme={selectedTheme}>\n          <bds-paper>\n            <bds-grid direction=\"column\" margin=\"y-4\" padding=\"2\">\n              <bds-typo variant=\"fs-24\" bold=\"bold\">\n                Conteúdo com tema aplicado\n              </bds-typo>\n              <bds-typo>Este conteúdo será estilizado conforme o tema selecionado.</bds-typo>\n            </bds-grid>\n          </bds-paper>\n        </bds-theme-provider>\n      </bds-card-content>\n    </bds-card>\n  );\n};"},{"name":"MultiSelectButtonGroup","snippet":"const MultiSelectButtonGroup = () => {\n  const [selectedOptions, setSelectedOptions] = useState(new Set());\n\n  const toggleOption = (optionId) => {\n    const newSelectedOptions = new Set(selectedOptions);\n    if (newSelectedOptions.has(optionId)) {\n      newSelectedOptions.delete(optionId);\n    } else {\n      newSelectedOptions.add(optionId);\n    }\n    setSelectedOptions(newSelectedOptions);\n  };\n\n  return (\n    <bds-card height=\"fit-content\" width=\"500px\">\n      <bds-card-header align=\"center\">\n        <bds-card-title text=\"Selecione Opções Múltiplas\"></bds-card-title>\n      </bds-card-header>\n      <bds-card-content>\n        <bds-button-group multiple={true}>\n          {OPTIONS.map((option) => (\n            <bds-button\n              key={option.id}\n              onClick={() => toggleOption(option.id)}\n              variant={selectedOptions.has(option.id) ? 'solid' : 'outline'}\n            >\n              {option.label}\n            </bds-button>\n          ))}\n        </bds-button-group>\n        <div style={{ marginTop: '1rem' }}>\n          <bds-typo bold=\"bold\">Opções Selecionadas:</bds-typo>\n          <ul>\n            {OPTIONS.filter((option) => selectedOptions.has(option.id)).map((option) => (\n              <li key={option.id}>\n                <bds-typo>{option.label}</bds-typo>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </bds-card-content>\n    </bds-card>\n  );\n};"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  1 | import React, { useState, useEffect } from 'react';\n  2 |\n> 3 | export default {\n    | ^\n  4 |   title: 'Snippets/Button Group',\n  5 | };\n  6 |"}},"snippets-buttons":{"id":"snippets-buttons","name":"Buttons","path":"./src/snippets/buttons.stories.jsx","examples":[{"name":"BasicButton","snippet":"const BasicButton = (args) => <bds-button>Click Me</bds-button>;"},{"name":"ButtonWithIcons","snippet":"const ButtonWithIcons = (args) => (\n  <bds-grid direction=\"row\" gap=\"2\">\n    <bds-button icon-left=\"builder-publish-bot\">Publish</bds-button>\n    <bds-button icon-right=\"search\">Search</bds-button>\n    <bds-button icon=\"email\">Email</bds-button>\n  </bds-grid>\n);"},{"name":"ButtonVariants","snippet":"const ButtonVariants = (args) => (\n  <bds-grid direction=\"row\" gap=\"2\">\n    <bds-button variant=\"solid\">solid</bds-button>\n    <bds-button variant=\"outline\">outline</bds-button>\n    <bds-button variant=\"text\">text</bds-button>\n  </bds-grid>\n);"},{"name":"ButtonColor","snippet":"const ButtonColor = (args) => (\n  <bds-grid direction=\"column\" gap=\"2\">\n    <bds-grid direction=\"row\" gap=\"2\">\n      <bds-button color=\"primary\">primary</bds-button>\n      <bds-button color=\"content\">content</bds-button>\n      <bds-button color=\"positive\">positive</bds-button>\n      <bds-button color=\"negative\">negative</bds-button>\n    </bds-grid>\n    <bds-grid direction=\"row\" gap=\"2\">\n      <bds-button variant=\"outline\" color=\"primary\">\n        primary\n      </bds-button>\n      <bds-button variant=\"outline\" color=\"content\">\n        content\n      </bds-button>\n      <bds-button variant=\"outline\" color=\"positive\">\n        positive\n      </bds-button>\n      <bds-button variant=\"outline\" color=\"negative\">\n        negative\n      </bds-button>\n    </bds-grid>\n    <bds-grid direction=\"row\" gap=\"2\">\n      <bds-button variant=\"text\" color=\"primary\">\n        primary\n      </bds-button>\n      <bds-button variant=\"text\" color=\"content\">\n        content\n      </bds-button>\n      <bds-button variant=\"text\" color=\"positive\">\n        positive\n      </bds-button>\n      <bds-button variant=\"text\" color=\"negative\">\n        negative\n      </bds-button>\n    </bds-grid>\n  </bds-grid>\n);"},{"name":"ButtonSize","snippet":"const ButtonSize = (args) => (\n    <bds-grid direction=\"column\" gap=\"2\">\n      <bds-grid direction=\"row\" gap=\"2\">\n        <bds-button size=\"medium\">Button Medium</bds-button>\n        <bds-button size=\"large\">Button Large</bds-button>\n      </bds-grid>\n    </bds-grid>\n  );"},{"name":"LoadingButton","snippet":"const LoadingButton = (args) => {\n  const [loading, setLoading] = useState(false);\n\n  const handleClick = () => {\n    setLoading(true);\n    setTimeout(() => {\n      setLoading(false);\n    }, 2000);\n  };\n\n  return (\n    <bds-grid direction=\"row\" gap=\"2\">\n      <bds-button bds-loading color=\"primary\">primary</bds-button>\n      <bds-button bds-loading color=\"content\">content</bds-button>\n      <bds-button bds-loading color=\"positive\">positive</bds-button>\n      <bds-button bds-loading color=\"negative\">negative</bds-button>\n    </bds-grid>\n  );\n};"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  1 | import React, { useState } from 'react';\n  2 |\n> 3 | export default {\n    | ^\n  4 |   title: 'Snippets/Buttons',\n  5 | };\n  6 |"}},"snippets-cards":{"id":"snippets-cards","name":"Cards","path":"./src/snippets/cards.stories.jsx","examples":[{"name":"BotsCardClickable","snippet":"const BotsCardClickable = () => {\n  return (\n    <bds-grid direction=\"column\">\n      <bds-card bg-color=\"surface-1\" padding=\"4\">\n        <bds-grid>\n          <bds-typo tag=\"h3\" variant=\"fs-24\" margin=\"false\" bold=\"bold\">\n            Lista de Chatbots\n          </bds-typo>\n        </bds-grid>\n        <bds-divider></bds-divider>\n        <bds-grid direction=\"row\" flex-wrap=\"wrap\" gap=\"3\">\n          <bds-card clickable=\"true\" width=\"188px\" height=\"196px\" bg-color=\"surface-0\">\n            <bds-grid\n              style={{ textAlign: 'center' }}\n              direction=\"column\"\n              xxs=\"12\"\n              height=\"100%\"\n              gap=\"1\"\n              justify-content=\"center\"\n              align-items=\"center\"\n            >\n              <bds-icon type=\"logo\" size=\"brand\" name=\"blip-chat\"></bds-icon>\n              <bds-typo bold=\"bold\">Blip Chat</bds-typo>\n              <bds-typo>Builder</bds-typo>\n            </bds-grid>\n          </bds-card>\n\n          <bds-card clickable=\"true\" width=\"188px\" height=\"196px\" bg-color=\"surface-0\">\n            <bds-grid\n              style={{ textAlign: 'center' }}\n              direction=\"column\"\n              xxs=\"12\"\n              height=\"100%\"\n              gap=\"1\"\n              justify-content=\"center\"\n              align-items=\"center\"\n            >\n              <bds-icon type=\"logo\" size=\"brand\" name=\"blip-chat\"></bds-icon>\n              <bds-typo bold=\"bold\">Chatbot Maker</bds-typo>\n              <bds-typo>Builder</bds-typo>\n            </bds-grid>\n          </bds-card>\n\n          <bds-card clickable=\"true\" width=\"188px\" height=\"196px\" bg-color=\"surface-0\">\n            <bds-grid\n              style={{ textAlign: 'center' }}\n              direction=\"column\"\n              xxs=\"12\"\n              height=\"100%\"\n              gap=\"1\"\n              justify-content=\"center\"\n              align-items=\"center\"\n            >\n              <bds-icon type=\"logo\" size=\"brand\" name=\"blip-chat\"></bds-icon>\n              <bds-typo bold=\"bold\">Blip Assistant</bds-typo>\n              <bds-typo>Builder</bds-typo>\n            </bds-grid>\n          </bds-card>\n        </bds-grid>\n      </bds-card>\n    </bds-grid>\n  );\n};"},{"name":"FeedbackCard","snippet":"const FeedbackCard = () => {\n  return (\n    <bds-grid direction=\"column\">\n      <bds-card bg-color=\"surface-1\" padding=\"4\">\n        <bds-grid>\n          <bds-typo tag=\"h3\" variant=\"fs-24\" margin=\"false\" bold=\"bold\">\n            Satisfação do cliente\n          </bds-typo>\n        </bds-grid>\n        <bds-divider></bds-divider>\n        <bds-card bg-color=\"surface-0\">\n          <bds-grid direction=\"row\" flex-wrap=\"wrap\" gap=\"3\">\n            <bds-card width=\"188px\" height=\"196px\" border-color=\"error\" bg-color=\"surface-0\">\n              <bds-grid\n                style={{ textAlign: 'center' }}\n                direction=\"column\"\n                xxs=\"12\"\n                height=\"100%\"\n                gap=\"1\"\n                justify-content=\"center\"\n                align-items=\"center\"\n              >\n                <bds-icon type=\"icon\" size=\"brand\" name=\"emoji-negative\"></bds-icon>\n                <bds-typo bold=\"bold\">Insuficiente</bds-typo>\n                <bds-typo variant=\"fs-12\">Parece que a sua experiência não foi como esperávamos.</bds-typo>\n              </bds-grid>\n            </bds-card>\n\n            <bds-card width=\"188px\" height=\"196px\" border-color=\"warning\" bg-color=\"surface-0\">\n              <bds-grid\n                style={{ textAlign: 'center' }}\n                direction=\"column\"\n                xxs=\"12\"\n                height=\"100%\"\n                gap=\"1\"\n                justify-content=\"center\"\n                align-items=\"center\"\n              >\n                <bds-icon type=\"icon\" size=\"brand\" name=\"emoji-neutral\"></bds-icon>\n                <bds-typo bold=\"bold\">Neutra</bds-typo>\n                <bds-typo variant=\"fs-12\">\n                  Agradecemos sua avaliação. Embora não tenha sido uma experiência excelente.\n                </bds-typo>\n              </bds-grid>\n            </bds-card>\n\n            <bds-card width=\"188px\" height=\"196px\" border-color=\"success\" bg-color=\"surface-0\">\n              <bds-grid\n                style={{ textAlign: 'center' }}\n                direction=\"column\"\n                xxs=\"12\"\n                height=\"100%\"\n                gap=\"1\"\n                justify-content=\"center\"\n                align-items=\"center\"\n              >\n                <bds-icon type=\"icon\" size=\"brand\" name=\"emoji\"></bds-icon>\n                <bds-typo bold=\"bold\">Alta</bds-typo>\n                <bds-typo variant=\"fs-12\">Ficamos felizes em saber que você teve uma ótima experiência! </bds-typo>\n              </bds-grid>\n            </bds-card>\n          </bds-grid>\n        </bds-card>\n      </bds-card>\n    </bds-grid>\n  );\n};"},{"name":"SelectableMultipleCards","snippet":"const SelectableMultipleCards = () => {\n  const [checked, setChecked] = useState([false, false, false]);\n  const [borderColors, setBorderColors] = useState(['surface-1', 'surface-1', 'surface-1']);\n\n  const handleSelection = (index) => {\n    const newChecked = [...checked];\n    const newBorderColors = [...borderColors];\n\n    newChecked[index] = !newChecked[index];\n    newBorderColors[index] = newChecked[index] ? 'primary' : 'surface-1';\n\n    setChecked(newChecked);\n    setBorderColors(newBorderColors);\n  };\n\n  useEffect(() => {\n    const newBorderColors = checked.map((isChecked) => (isChecked ? 'primary' : 'surface-1'));\n    setBorderColors(newBorderColors);\n  }, [checked]);\n\n  return (\n    <BdsCard bgColor=\"surface-1\" padding=\"4\">\n      <BdsGrid>\n        <BdsTypo tag=\"h3\" variant=\"fs-24\" margin=\"false\" bold=\"bold\">\n          Selecione os tipos de notificações que deseja receber:\n        </BdsTypo>\n      </BdsGrid>\n      <BdsDivider />\n      <BdsGrid direction=\"row\" flexWrap=\"wrap\" gap=\"3\">\n        {/* Card 1 */}\n        <BdsCard\n          width=\"188px\"\n          height=\"196px\"\n          borderColor={borderColors[0]}\n          bg-color=\"surface-0\"\n          selectable\n          onClick={() => handleSelection(0)}\n        >\n          <BdsCardHeader>\n            <BdsCheckbox\n              id=\"checkbox1\"\n              name=\"checkbox1\"\n              checked={checked[0]}\n              dataTest=\"checkbox1\"\n              onChange={() => handleSelection(0)}\n            />\n          </BdsCardHeader>\n          <BdsGrid\n            style={{ textAlign: 'center' }}\n            direction=\"column\"\n            xxs=\"12\"\n            height=\"100%\"\n            gap=\"1\"\n            alignItems=\"center\"\n          >\n            <BdsIcon name=\"email\" size=\"medium\" theme=\"outline\" />\n            <BdsTypo bold=\"bold\">E-mails</BdsTypo>\n            <BdsTypo variant=\"fs-12\">Receba emails notificando novidades.</BdsTypo>\n          </BdsGrid>\n        </BdsCard>\n\n        {/* Card 2 */}\n        <BdsCard\n          width=\"188px\"\n          height=\"196px\"\n          borderColor={borderColors[1]}\n          bg-color=\"surface-0\"\n          selectable\n          onClick={() => handleSelection(1)}\n        >\n          <BdsCardHeader>\n            <BdsCheckbox\n              id=\"checkbox2\"\n              name=\"checkbox2\"\n              checked={checked[1]}\n              dataTest=\"checkbox2\"\n              onChange={() => handleSelection(1)}\n            />\n          </BdsCardHeader>\n          <BdsGrid\n            style={{ textAlign: 'center' }}\n            direction=\"column\"\n            xxs=\"12\"\n            height=\"100%\"\n            gap=\"1\"\n            alignItems=\"center\"\n          >\n            <BdsIcon name=\"sms\" size=\"medium\" theme=\"outline\" />\n            <BdsTypo bold=\"bold\">SMS</BdsTypo>\n            <BdsTypo variant=\"fs-12\">Receba via sms novidades da sua conta.</BdsTypo>\n          </BdsGrid>\n        </BdsCard>\n\n        {/* Card 3 */}\n        <BdsCard\n          width=\"188px\"\n          height=\"196px\"\n          borderColor={borderColors[2]}\n          bg-color=\"surface-0\"\n          selectable\n          onClick={() => handleSelection(2)}\n        >\n          <BdsCardHeader>\n            <BdsCheckbox\n              id=\"checkbox3\"\n              name=\"checkbox3\"\n              checked={checked[2]}\n              dataTest=\"checkbox3\"\n              onChange={() => handleSelection(2)}\n            />\n          </BdsCardHeader>\n          <BdsGrid\n            style={{ textAlign: 'center' }}\n            direction=\"column\"\n            xxs=\"12\"\n            height=\"100%\"\n            gap=\"1\"\n            alignItems=\"center\"\n          >\n            <BdsIcon name=\"whatsapp\" size=\"medium\" theme=\"outline\" />\n            <BdsTypo bold=\"bold\">Whatsapp</BdsTypo>\n            <BdsTypo variant=\"fs-12\">Tenha uma experiência completa no chat.</BdsTypo>\n          </BdsGrid>\n        </BdsCard>\n      </BdsGrid>\n    </BdsCard>\n  );\n};"},{"name":"SelectableUniqueCards","snippet":"const SelectableUniqueCards = () => {\n  // Estado para armazenar a seleção do card (com base no valor do radio)\n  const [selectedCard, setSelectedCard] = useState(undefined);\n\n  // Função para tratar a mudança no radio e atualizar a seleção do card\n  const handleCardSelection = (value) => {\n    setSelectedCard(value);\n  };\n\n  // Função para tratar o clique no card e atualizar a seleção do radio\n  const handleCardClick = (value) => {\n    setSelectedCard((prev) => (prev === value ? undefined : value)); // Alterna entre selecionar ou desmarcar o card\n  };\n\n  return (\n    <BdsCard bgColor=\"surface-1\" padding=\"4\">\n      <BdsGrid>\n        <BdsTypo tag=\"h3\" variant=\"fs-24\" margin=\"false\" bold=\"bold\">\n        Selecione o método de pagamento preferido\n        </BdsTypo>\n      </BdsGrid>\n      <BdsDivider />\n\n      <BdsRadioGroup value={selectedCard} onBdsRadioGroupChange={(event) => handleCardSelection(event.detail.value)}>\n        <BdsGrid direction=\"row\" flexWrap=\"wrap\" gap=\"3\">\n          {/* Card 1 */}\n          <BdsCard\n            width=\"188px\"\n            height=\"196px\"\n            borderColor={selectedCard === '1' ? 'primary' : 'surface-1'}\n            bg-color=\"surface-0\"\n            selectable\n            onClick={() => handleCardClick('1')} // Atualiza a seleção ao clicar no card\n          >\n            <BdsCardHeader>\n            <BdsRadio value=\"1\" checked={selectedCard === '1'} name=\"satisfaction\" dataTest=\"radio1\" />\n            </BdsCardHeader>\n            <BdsGrid\n              style={{ textAlign: 'center' }}\n              direction=\"column\"\n              xxs=\"12\"\n              height=\"100%\"\n              gap=\"1\"\n              justifyContent=\"center\"\n              alignItems=\"center\"\n            >\n              <BdsTypo bold=\"bold\">Cartão de Crédito</BdsTypo>\n              <BdsTypo variant=\"fs-12\">Pague de forma rápida e segura com seu cartão, com possibilidade de parcelamento.</BdsTypo>\n            </BdsGrid>\n          </BdsCard>\n\n          {/* Card 2 */}\n          <BdsCard\n            width=\"188px\"\n            height=\"196px\"\n            borderColor={selectedCard === '2' ? 'primary' : 'surface-1'}\n            bg-color=\"surface-0\"\n            selectable\n            onClick={() => handleCardClick('2')} // Atualiza a seleção ao clicar no card\n          >\n            <BdsCardHeader>\n            <BdsRadio value=\"2\" checked={selectedCard === '2'} name=\"satisfaction\" dataTest=\"radio2\" />\n            </BdsCardHeader>\n            <BdsGrid\n              style={{ textAlign: 'center' }}\n              direction=\"column\"\n              xxs=\"12\"\n              height=\"100%\"\n              gap=\"1\"\n              justifyContent=\"center\"\n              alignItems=\"center\"\n            >\n              <BdsTypo bold=\"bold\">Boleto Bancário</BdsTypo>\n              <BdsTypo variant=\"fs-12\">\n              Pague via boleto bancário com prazo para vencimento.\n              </BdsTypo>\n              \n            </BdsGrid>\n          </BdsCard>\n\n          {/* Card 3 */}\n          <BdsCard\n            width=\"188px\"\n            height=\"196px\"\n            borderColor={selectedCard === '3' ? 'primary' : 'surface-1'}\n            bg-color=\"surface-0\"\n            selectable\n            onClick={() => handleCardClick('3')} // Atualiza a seleção ao clicar no card\n          >\n            <BdsCardHeader>\n            <BdsRadio value=\"3\" checked={selectedCard === '3'} name=\"satisfaction\" dataTest=\"radio3\" />\n            </BdsCardHeader>\n            <BdsGrid\n              style={{ textAlign: 'center' }}\n              direction=\"column\"\n              xxs=\"12\"\n              height=\"100%\"\n              gap=\"1\"\n              justifyContent=\"center\"\n              alignItems=\"center\"\n            >\n              <BdsTypo bold=\"bold\">PayPal</BdsTypo>\n              <BdsTypo variant=\"fs-12\">Pague com sua conta PayPal de forma prática e segura.</BdsTypo>\n              \n            </BdsGrid>\n          </BdsCard>\n        </BdsGrid>\n      </BdsRadioGroup>\n    </BdsCard>\n  );\n};"},{"name":"CompleteCard","snippet":"const CompleteCard = () => {\n  const DATA = [\n    {\n      id: 1,\n      produto: 'Celular',\n      valor: '1500,00',\n      disponibilidade: 'disponivel',\n      marca: 'Samsung',\n      modelo: 'Galaxy S20',\n      cor: 'Preto',\n    },\n    {\n      id: 2,\n      produto: 'Notebook',\n      valor: '4000,00',\n      disponibilidade: 'indisponivel',\n      marca: 'Apple',\n      modelo: 'MacBook Pro',\n      cor: 'Cinza Espacial',\n    },\n    {\n      id: 3,\n      produto: 'Câmera',\n      valor: '800,00',\n      disponibilidade: 'disponivel',\n      marca: 'Canon',\n      modelo: 'EOS Rebel T7',\n      cor: 'Preto',\n    },\n  ];\n\n  const heading = ['Produtos', 'Valor', 'Marca', 'Cor', 'Disponibilidade'];\n\n  return (\n    <bds-card height=\"fit-content\" width=\"700px\" bg-color=\"surface-0\">\n      <bds-grid direction=\"column\" xxs=\"12\" gap=\"3\" justify-content=\"center\" align-items=\"center\">\n        <bds-card-header align=\"flex-start\">\n          <bds-card-title text=\"Titulo do bloco de card\"></bds-card-title>\n          <bds-icon theme=\"solid\" size=\"medium\" name=\"info\"></bds-icon>\n        </bds-card-header>\n\n        <bds-grid direction=\"column\" align-items=\"flex-start\" gap=\"2\">\n          <bds-typo variant=\"fs-14\">\n            Um componente de card é uma estrutura comum para organizar e apresentar conteúdo de maneira compacta e\n            visualmente atraente. Geralmente, inclui elementos como título, descrição e ações, fornecendo uma visão\n            geral rápida do conteúdo.\n          </bds-typo>\n\n          <bds-table>\n            <bds-table-header>\n              <bds-table-row>\n                {heading.map((item, index) => {\n                  return <bds-table-th key={index}>{item}</bds-table-th>;\n                })}\n              </bds-table-row>\n            </bds-table-header>\n            <bds-table-body>\n              {DATA.map((row, index) => {\n                return (\n                  <bds-table-row key={index}>\n                    <bds-table-cell>\n                      <bds-typo variant=\"fs-14\">{row.produto}</bds-typo>\n                    </bds-table-cell>\n                    <bds-table-cell>\n                      <bds-typo variant=\"fs-14\">{row.valor}</bds-typo>\n                    </bds-table-cell>\n                    <bds-table-cell>\n                      <bds-typo variant=\"fs-14\">{row.marca}</bds-typo>\n                    </bds-table-cell>\n                    <bds-table-cell>\n                      <bds-typo variant=\"fs-14\">{row.cor}</bds-typo>\n                    </bds-table-cell>\n                    <bds-table-cell>\n                      {row.disponibilidade === 'disponivel' ? (\n                        <bds-chip-tag color=\"success\">{row.disponibilidade}</bds-chip-tag>\n                      ) : (\n                        <bds-chip-tag color=\"danger\">{row.disponibilidade}</bds-chip-tag>\n                      )}\n                    </bds-table-cell>\n                  </bds-table-row>\n                );\n              })}\n            </bds-table-body>\n          </bds-table>\n        </bds-grid>\n        <bds-card-footer align=\"flex-end\">\n          <bds-button size=\"standard\" type=\"button\" type-icon=\"icon\" variant=\"tertiary\">\n            Botão Terciário\n          </bds-button>\n          <bds-button size=\"standard\" type=\"button\" type-icon=\"icon\" variant=\"primary\">\n            Botão Primário\n          </bds-button>\n        </bds-card-footer>\n      </bds-grid>\n    </bds-card>\n  );\n};"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  12 | } from '../../blip-ds-react/dist/components';\n  13 |\n> 14 | export default {\n     | ^\n  15 |   title: 'Snippets/Cards',\n  16 | };\n  17 |"}},"snippets-carousel":{"id":"snippets-carousel","name":"Carousel","path":"./src/snippets/carousel.stories.jsx","examples":[{"name":"BasicCarousel","snippet":"const BasicCarousel = () => {\n  const el = document.getElementsByClassName('sb-story');\n  for (var i = 0; i < el.length; i++) {\n    el[i].style.width = '800px';\n  }\n  return (\n    <bds-carousel>\n      <bds-carousel-item>\n        <bds-paper width=\"100%\" bg-color=\"surface-0\" elevation=\"none\">\n          <bds-grid align-items=\"center\" flex-wrap=\"wrap\">\n            <bds-grid xxs=\"3\" padding=\"3\" direction=\"column\">\n              <bds-illustration type=\"spots\" name=\"star\"></bds-illustration>\n            </bds-grid>\n            <bds-grid xxs=\"9\" direction=\"column\" padding=\"2\" gap=\"1\">\n              <bds-typo variant=\"fs-20\" bold=\"bold\" margin={false}>\n                1 - {title}\n              </bds-typo>\n              <bds-typo variant=\"fs-16\">{paragraph}</bds-typo>\n              <bds-button>Saiba mais</bds-button>\n            </bds-grid>\n          </bds-grid>\n        </bds-paper>\n      </bds-carousel-item>\n      <bds-carousel-item>\n        <bds-paper width=\"100%\" bg-color=\"surface-0\" elevation=\"none\">\n          <bds-grid align-items=\"center\" flex-wrap=\"wrap\">\n            <bds-grid xxs=\"3\" padding=\"3\" direction=\"column\">\n              <bds-illustration type=\"spots\" name=\"check\"></bds-illustration>\n            </bds-grid>\n            <bds-grid xxs=\"9\" direction=\"column\" padding=\"2\" gap=\"1\">\n              <bds-typo variant=\"fs-20\" bold=\"bold\" margin={false}>\n                2 - {title}\n              </bds-typo>\n              <bds-typo variant=\"fs-16\">{paragraph}</bds-typo>\n              <bds-button>Saiba mais</bds-button>\n            </bds-grid>\n          </bds-grid>\n        </bds-paper>\n      </bds-carousel-item>\n      <bds-carousel-item>\n        <bds-paper width=\"100%\" bg-color=\"surface-0\" elevation=\"none\">\n          <bds-grid align-items=\"center\" flex-wrap=\"wrap\">\n            <bds-grid xxs=\"3\" padding=\"3\" direction=\"column\">\n              <bds-illustration type=\"spots\" name=\"air-ballon\"></bds-illustration>\n            </bds-grid>\n            <bds-grid xxs=\"9\" direction=\"column\" padding=\"2\" gap=\"1\">\n              <bds-typo variant=\"fs-20\" bold=\"bold\" margin={false}>\n                3 - {title}\n              </bds-typo>\n              <bds-typo variant=\"fs-16\">{paragraph}</bds-typo>\n              <bds-button>Saiba mais</bds-button>\n            </bds-grid>\n          </bds-grid>\n        </bds-paper>\n      </bds-carousel-item>\n      <bds-carousel-item>\n        <bds-paper width=\"100%\" bg-color=\"surface-0\" elevation=\"none\">\n          <bds-grid align-items=\"center\" flex-wrap=\"wrap\">\n            <bds-grid xxs=\"3\" padding=\"3\" direction=\"column\">\n              <bds-illustration type=\"spots\" name=\"analytics-satisfaction\"></bds-illustration>\n            </bds-grid>\n            <bds-grid xxs=\"9\" direction=\"column\" padding=\"2\" gap=\"1\">\n              <bds-typo variant=\"fs-20\" bold=\"bold\" margin={false}>\n                4 - {title}\n              </bds-typo>\n              <bds-typo variant=\"fs-16\">{paragraph}</bds-typo>\n              <bds-button>Saiba mais</bds-button>\n            </bds-grid>\n          </bds-grid>\n        </bds-paper>\n      </bds-carousel-item>\n    </bds-carousel>\n  );\n};"},{"name":"BasicCarouselMobile","snippet":"const BasicCarouselMobile = () => {\n  return (\n    <bds-grid style={{ maxWidth: `320px` }}>\n      <bds-carousel arrows=\"none\" autoplay>\n        <bds-carousel-item>\n          <bds-paper width=\"100%\" bg-color=\"surface-0\" elevation=\"none\">\n            <bds-grid align-items=\"center\" flex-wrap=\"wrap\">\n              <bds-grid xxs=\"12\" padding=\"5\" direction=\"column\">\n                <bds-illustration type=\"spots\" name=\"star\"></bds-illustration>\n              </bds-grid>\n              <bds-grid xxs=\"12\" direction=\"column\" padding=\"2\" gap=\"1\">\n                <bds-typo variant=\"fs-20\" bold=\"bold\" margin={false}>\n                  1 - {title}\n                </bds-typo>\n                <bds-typo variant=\"fs-16\">{paragraph}</bds-typo>\n                <bds-button>Saiba mais</bds-button>\n              </bds-grid>\n            </bds-grid>\n          </bds-paper>\n        </bds-carousel-item>\n        <bds-carousel-item>\n          <bds-paper width=\"100%\" bg-color=\"surface-0\" elevation=\"none\">\n            <bds-grid align-items=\"center\" flex-wrap=\"wrap\">\n              <bds-grid xxs=\"12\" padding=\"5\" direction=\"column\">\n                <bds-illustration type=\"spots\" name=\"check\"></bds-illustration>\n              </bds-grid>\n              <bds-grid xxs=\"12\" direction=\"column\" padding=\"2\" gap=\"1\">\n                <bds-typo variant=\"fs-20\" bold=\"bold\" margin={false}>\n                  2 - {title}\n                </bds-typo>\n                <bds-typo variant=\"fs-16\">{paragraph}</bds-typo>\n                <bds-button>Saiba mais</bds-button>\n              </bds-grid>\n            </bds-grid>\n          </bds-paper>\n        </bds-carousel-item>\n        <bds-carousel-item>\n          <bds-paper width=\"100%\" bg-color=\"surface-0\" elevation=\"none\">\n            <bds-grid align-items=\"center\" flex-wrap=\"wrap\">\n              <bds-grid xxs=\"12\" padding=\"5\" direction=\"column\">\n                <bds-illustration type=\"spots\" name=\"air-ballon\"></bds-illustration>\n              </bds-grid>\n              <bds-grid xxs=\"12\" direction=\"column\" padding=\"2\" gap=\"1\">\n                <bds-typo variant=\"fs-20\" bold=\"bold\" margin={false}>\n                  3 - {title}\n                </bds-typo>\n                <bds-typo variant=\"fs-16\">{paragraph}</bds-typo>\n                <bds-button>Saiba mais</bds-button>\n              </bds-grid>\n            </bds-grid>\n          </bds-paper>\n        </bds-carousel-item>\n        <bds-carousel-item>\n          <bds-paper width=\"100%\" bg-color=\"surface-0\" elevation=\"none\">\n            <bds-grid align-items=\"center\" flex-wrap=\"wrap\">\n              <bds-grid xxs=\"12\" padding=\"5\" direction=\"column\">\n                <bds-illustration type=\"spots\" name=\"analytics-satisfaction\"></bds-illustration>\n              </bds-grid>\n              <bds-grid xxs=\"12\" direction=\"column\" padding=\"2\" gap=\"1\">\n                <bds-typo variant=\"fs-20\" bold=\"bold\" margin={false}>\n                  4 - {title}\n                </bds-typo>\n                <bds-typo variant=\"fs-16\">{paragraph}</bds-typo>\n                <bds-button>Saiba mais</bds-button>\n              </bds-grid>\n            </bds-grid>\n          </bds-paper>\n        </bds-carousel-item>\n      </bds-carousel>\n    </bds-grid>\n  );\n};"},{"name":"CarouselWithCard","snippet":"const CarouselWithCard = () => {\n  return (\n    <bds-carousel bullets=\"outside\" slide-per-page={3} gap=\"2\">\n      <bds-carousel-item>\n        <bds-grid direction=\"column\" padding=\"1\">\n          <bds-card width=\"100%\" bg-color=\"surface-0\" clickable>\n            <bds-grid direction=\"column\" padding=\"2\" gap=\"2\">\n              <bds-icon theme=\"outline\" size=\"xxx-large\" name=\"heart\" role=\"img\" aria-label=\"heart\"></bds-icon>\n              <bds-typo variant=\"fs-20\" bold=\"bold\" margin={false}>\n                1 - {title}\n              </bds-typo>\n              <bds-typo variant=\"fs-16\">{longParagraph}</bds-typo>\n            </bds-grid>\n          </bds-card>\n        </bds-grid>\n      </bds-carousel-item>\n      <bds-carousel-item>\n        <bds-grid direction=\"column\" padding=\"1\">\n          <bds-card width=\"100%\" bg-color=\"surface-0\" clickable>\n            <bds-grid direction=\"column\" padding=\"2\" gap=\"2\">\n              <bds-icon theme=\"outline\" size=\"xxx-large\" name=\"heart\" role=\"img\" aria-label=\"heart\"></bds-icon>\n              <bds-typo variant=\"fs-20\" bold=\"bold\" margin={false}>\n                2 - {title}\n              </bds-typo>\n              <bds-typo variant=\"fs-16\">{longParagraph}</bds-typo>\n            </bds-grid>\n          </bds-card>\n        </bds-grid>\n      </bds-carousel-item>\n      <bds-carousel-item>\n        <bds-grid direction=\"column\" padding=\"1\">\n          <bds-card width=\"100%\" bg-color=\"surface-0\" clickable>\n            <bds-grid direction=\"column\" padding=\"2\" gap=\"2\">\n              <bds-icon theme=\"outline\" size=\"xxx-large\" name=\"heart\" role=\"img\" aria-label=\"heart\"></bds-icon>\n              <bds-typo variant=\"fs-20\" bold=\"bold\" margin={false}>\n                3 - {title}\n              </bds-typo>\n              <bds-typo variant=\"fs-16\">{longParagraph}</bds-typo>\n            </bds-grid>\n          </bds-card>\n        </bds-grid>\n      </bds-carousel-item>\n      <bds-carousel-item>\n        <bds-grid direction=\"column\" padding=\"1\">\n          <bds-card width=\"100%\" bg-color=\"surface-0\" clickable>\n            <bds-grid direction=\"column\" padding=\"2\" gap=\"2\">\n              <bds-icon theme=\"outline\" size=\"xxx-large\" name=\"heart\" role=\"img\" aria-label=\"heart\"></bds-icon>\n              <bds-typo variant=\"fs-20\" bold=\"bold\" margin={false}>\n                4 - {title}\n              </bds-typo>\n              <bds-typo variant=\"fs-16\">{longParagraph}</bds-typo>\n            </bds-grid>\n          </bds-card>\n        </bds-grid>\n      </bds-carousel-item>\n    </bds-carousel>\n  );\n};"},{"name":"CarouselWithCardMobile","snippet":"const CarouselWithCardMobile = () => {\n  return (\n    <bds-grid style={{ maxWidth: `320px` }}>\n      <bds-carousel arrows=\"none\" gap=\"2\">\n        <bds-carousel-item>\n          <bds-grid direction=\"column\" padding=\"1\">\n            <bds-card width=\"100%\" bg-color=\"surface-0\" clickable>\n              <bds-grid direction=\"column\" padding=\"2\" gap=\"2\">\n                <bds-icon theme=\"outline\" size=\"xxx-large\" name=\"heart\" role=\"img\" aria-label=\"heart\"></bds-icon>\n                <bds-typo variant=\"fs-20\" bold=\"bold\" margin={false}>\n                  1 - {title}\n                </bds-typo>\n                <bds-typo variant=\"fs-16\">{longParagraph}</bds-typo>\n              </bds-grid>\n            </bds-card>\n          </bds-grid>\n        </bds-carousel-item>\n        <bds-carousel-item>\n          <bds-grid direction=\"column\" padding=\"1\">\n            <bds-card width=\"100%\" bg-color=\"surface-0\" clickable>\n              <bds-grid direction=\"column\" padding=\"2\" gap=\"2\">\n                <bds-icon theme=\"outline\" size=\"xxx-large\" name=\"heart\" role=\"img\" aria-label=\"heart\"></bds-icon>\n                <bds-typo variant=\"fs-20\" bold=\"bold\" margin={false}>\n                  2 - {title}\n                </bds-typo>\n                <bds-typo variant=\"fs-16\">{longParagraph}</bds-typo>\n              </bds-grid>\n            </bds-card>\n          </bds-grid>\n        </bds-carousel-item>\n        <bds-carousel-item>\n          <bds-grid direction=\"column\" padding=\"1\">\n            <bds-card width=\"100%\" bg-color=\"surface-0\" clickable>\n              <bds-grid direction=\"column\" padding=\"2\" gap=\"2\">\n                <bds-icon theme=\"outline\" size=\"xxx-large\" name=\"heart\" role=\"img\" aria-label=\"heart\"></bds-icon>\n                <bds-typo variant=\"fs-20\" bold=\"bold\" margin={false}>\n                  3 - {title}\n                </bds-typo>\n                <bds-typo variant=\"fs-16\">{longParagraph}</bds-typo>\n              </bds-grid>\n            </bds-card>\n          </bds-grid>\n        </bds-carousel-item>\n        <bds-carousel-item>\n          <bds-grid direction=\"column\" padding=\"1\">\n            <bds-card width=\"100%\" bg-color=\"surface-0\" clickable>\n              <bds-grid direction=\"column\" padding=\"2\" gap=\"2\">\n                <bds-icon theme=\"outline\" size=\"xxx-large\" name=\"heart\" role=\"img\" aria-label=\"heart\"></bds-icon>\n                <bds-typo variant=\"fs-20\" bold=\"bold\" margin={false}>\n                  4 - {title}\n                </bds-typo>\n                <bds-typo variant=\"fs-16\">{longParagraph}</bds-typo>\n              </bds-grid>\n            </bds-card>\n          </bds-grid>\n        </bds-carousel-item>\n      </bds-carousel>\n    </bds-grid>\n  );\n};"},{"name":"CarouselImage","snippet":"const CarouselImage = () => {\n  return (\n    <bds-carousel\n      arrows=\"inside\"\n      autoplay\n      autoplay-hover-pause\n      autoplay-timeout=\"5000\"\n      auto-height\n      infinite-loop\n      slide-per-page={1}\n      gap=\"2\"\n      bullets=\"inside\"\n    >\n      <bds-carousel-item>\n        <bds-image\n          style={imageContent}\n          alt=\"Example of a image\"\n          width=\"100%\"\n          height=\"420px\"\n          object-fit=\"cover\"\n          src=\"https://picsum.photos/1920/1080\"\n        />\n      </bds-carousel-item>\n      <bds-carousel-item>\n        <bds-image\n          style={imageContent}\n          alt=\"Example of a image\"\n          width=\"100%\"\n          height=\"420px\"\n          object-fit=\"cover\"\n          src=\"https://picsum.photos/1920/1080\"\n        />\n      </bds-carousel-item>\n      <bds-carousel-item>\n        <bds-image\n          style={imageContent}\n          alt=\"Example of a image\"\n          width=\"100%\"\n          height=\"420px\"\n          object-fit=\"cover\"\n          src=\"https://picsum.photos/1920/1080\"\n        />\n      </bds-carousel-item>\n    </bds-carousel>\n  );\n};"},{"name":"CarouselImageMobile","snippet":"const CarouselImageMobile = () => {\n  return (\n    <bds-grid style={{ maxWidth: `320px` }}>\n      <bds-carousel\n        arrows=\"inside\"\n        autoplay\n        autoplay-hover-pause\n        autoplay-timeout=\"5000\"\n        auto-height\n        infinite-loop\n        slide-per-page={1}\n        gap=\"2\"\n        bullets=\"inside\"\n      >\n        <bds-carousel-item>\n          <bds-image\n            style={imageContent}\n            alt=\"Example of a image\"\n            width=\"100%\"\n            height=\"210px\"\n            object-fit=\"cover\"\n            src=\"https://picsum.photos/1920/1080\"\n          />\n        </bds-carousel-item>\n        <bds-carousel-item>\n          <bds-image\n            style={imageContent}\n            alt=\"Example of a image\"\n            width=\"100%\"\n            height=\"210px\"\n            object-fit=\"cover\"\n            src=\"https://picsum.photos/1920/1080\"\n          />\n        </bds-carousel-item>\n        <bds-carousel-item>\n          <bds-image\n            style={imageContent}\n            alt=\"Example of a image\"\n            width=\"100%\"\n            height=\"210px\"\n            object-fit=\"cover\"\n            src=\"https://picsum.photos/1920/1080\"\n          />\n        </bds-carousel-item>\n      </bds-carousel>\n    </bds-grid>\n  );\n};"},{"name":"CarouselImageDesciption","snippet":"const CarouselImageDesciption = () => {\n  return (\n    <bds-carousel auto-height bullets=\"inside\" bullets-position=\"right\" slide-per-page={2} gap=\"2\">\n      <bds-carousel-item>\n        <bds-paper width=\"100%\" height=\"290px\" clickable style={{ backgroundColor: 'var(--color-extended-pink)' }}>\n          <bds-theme-provider theme=\"dark\" style={{ height: '100%', display: 'block' }}>\n            <bds-grid direction=\"column\" padding=\"3\" gap=\"2\" justify-content=\"center\" style={{ height: '100%' }}>\n              <bds-typo variant=\"fs-20\" bold=\"bold\" margin={false}>\n                1 - {title}\n              </bds-typo>\n              <bds-typo variant=\"fs-16\">{paragraph}</bds-typo>\n            </bds-grid>\n          </bds-theme-provider>\n        </bds-paper>\n      </bds-carousel-item>\n      <bds-carousel-item>\n        <bds-image\n          style={imageContent}\n          alt=\"Example of a image\"\n          width=\"100%\"\n          height=\"290px\"\n          object-fit=\"cover\"\n          src=\"https://picsum.photos/573/290\"\n        />\n      </bds-carousel-item>\n      <bds-carousel-item>\n        <bds-paper width=\"100%\" height=\"290px\" clickable style={{ backgroundColor: 'var(--color-extended-green)' }}>\n          <bds-theme-provider theme=\"dark\" style={{ height: '100%', display: 'block' }}>\n            <bds-grid direction=\"column\" padding=\"3\" gap=\"2\" justify-content=\"center\" style={{ height: '100%' }}>\n              <bds-typo variant=\"fs-20\" bold=\"bold\" margin={false}>\n                2 - {title}\n              </bds-typo>\n              <bds-typo variant=\"fs-16\">{paragraph}</bds-typo>\n            </bds-grid>\n          </bds-theme-provider>\n        </bds-paper>\n      </bds-carousel-item>\n      <bds-carousel-item>\n        <bds-image\n          style={imageContent}\n          alt=\"Example of a image\"\n          width=\"100%\"\n          height=\"290px\"\n          object-fit=\"cover\"\n          src=\"https://picsum.photos/573/290\"\n        />\n      </bds-carousel-item>\n      <bds-carousel-item>\n        <bds-paper width=\"100%\" height=\"290px\" clickable style={{ backgroundColor: 'var(--color-extended-blue)' }}>\n          <bds-theme-provider theme=\"dark\" style={{ height: '100%', display: 'block' }}>\n            <bds-grid direction=\"column\" padding=\"3\" gap=\"2\" justify-content=\"center\" style={{ height: '100%' }}>\n              <bds-typo variant=\"fs-20\" bold=\"bold\" margin={false}>\n                3 - {title}\n              </bds-typo>\n              <bds-typo variant=\"fs-16\">{paragraph}</bds-typo>\n            </bds-grid>\n          </bds-theme-provider>\n        </bds-paper>\n      </bds-carousel-item>\n      <bds-carousel-item>\n        <bds-image\n          style={imageContent}\n          alt=\"Example of a image\"\n          width=\"100%\"\n          height=\"290px\"\n          object-fit=\"cover\"\n          src=\"https://picsum.photos/573/290\"\n        />\n      </bds-carousel-item>\n    </bds-carousel>\n  );\n};"},{"name":"CarouselImageDesciptionMobile","snippet":"const CarouselImageDesciptionMobile = () => {\n  return (\n    <bds-grid style={{ maxWidth: `320px` }}>\n      <bds-carousel arrows=\"none\" bullets=\"inside\" gap=\"2\">\n        <bds-carousel-item>\n          <bds-grid direction=\"column\" gap=\"2\">\n            <bds-paper width=\"100%\" clickable style={{ backgroundColor: 'var(--color-extended-pink)' }}>\n              <bds-theme-provider theme=\"dark\" style={{ height: '100%', display: 'block' }}>\n                <bds-grid direction=\"column\" padding=\"3\" gap=\"2\" justify-content=\"center\" style={{ height: '100%' }}>\n                  <bds-typo variant=\"fs-20\" bold=\"bold\" margin={false}>\n                    1 - {title}\n                  </bds-typo>\n                  <bds-typo variant=\"fs-16\">{paragraph}</bds-typo>\n                </bds-grid>\n              </bds-theme-provider>\n            </bds-paper>\n            <bds-image\n              style={imageContent}\n              alt=\"Example of a image\"\n              width=\"100%\"\n              height=\"180px\"\n              object-fit=\"cover\"\n              src=\"https://picsum.photos/573/180\"\n            />\n          </bds-grid>\n        </bds-carousel-item>\n        <bds-carousel-item>\n          <bds-grid direction=\"column\" gap=\"2\">\n            <bds-paper width=\"100%\" clickable style={{ backgroundColor: 'var(--color-extended-green)' }}>\n              <bds-theme-provider theme=\"dark\" style={{ height: '100%', display: 'block' }}>\n                <bds-grid direction=\"column\" padding=\"3\" gap=\"2\" justify-content=\"center\" style={{ height: '100%' }}>\n                  <bds-typo variant=\"fs-20\" bold=\"bold\" margin={false}>\n                    2 - {title}\n                  </bds-typo>\n                  <bds-typo variant=\"fs-16\">{paragraph}</bds-typo>\n                </bds-grid>\n              </bds-theme-provider>\n            </bds-paper>\n            <bds-image\n              style={imageContent}\n              alt=\"Example of a image\"\n              width=\"100%\"\n              height=\"180px\"\n              object-fit=\"cover\"\n              src=\"https://picsum.photos/573/180\"\n            />\n          </bds-grid>\n        </bds-carousel-item>\n        <bds-carousel-item>\n          <bds-grid direction=\"column\" gap=\"2\">\n            <bds-paper width=\"100%\" clickable style={{ backgroundColor: 'var(--color-extended-blue)' }}>\n              <bds-theme-provider theme=\"dark\" style={{ height: '100%', display: 'block' }}>\n                <bds-grid direction=\"column\" padding=\"3\" gap=\"2\" justify-content=\"center\" style={{ height: '100%' }}>\n                  <bds-typo variant=\"fs-20\" bold=\"bold\" margin={false}>\n                    3 - {title}\n                  </bds-typo>\n                  <bds-typo variant=\"fs-16\">{paragraph}</bds-typo>\n                </bds-grid>\n              </bds-theme-provider>\n            </bds-paper>\n            <bds-image\n              style={imageContent}\n              alt=\"Example of a image\"\n              width=\"100%\"\n              height=\"180px\"\n              object-fit=\"cover\"\n              src=\"https://picsum.photos/573/180\"\n            />\n          </bds-grid>\n        </bds-carousel-item>\n      </bds-carousel>\n    </bds-grid>\n  );\n};"},{"name":"CarouselProduct","snippet":"const CarouselProduct = () => {\n  return (\n    <bds-grid container>\n      <bds-carousel arrows=\"none\" slide-per-page={1} gap=\"2\">\n        <bds-carousel-item\n          bg-image=\"https://blipmediastore.blip.ai/public-medias/Media_bdcb8c47-a74f-47d8-8b55-9a91a367fead?56983082-a993-4c40-9d78-d7a90416db97\"\n          bg-image-brightness={0.4}\n          theme=\"dark\"\n        >\n          <bds-grid align-items=\"center\" flex-wrap=\"wrap\" padding=\"2\" style={{ position: 'relative' }}>\n            <bds-grid xxs=\"8\" direction=\"column\" padding=\"2\" gap=\"3\">\n              <bds-grid justify-content=\"space-between\">\n                <bds-illustration\n                  type=\"brand\"\n                  name=\"blip-store-blue-white\"\n                  style={{ width: '100px' }}\n                ></bds-illustration>\n                <bds-chip-tag color=\"outline\">Inteligência Artificial</bds-chip-tag>\n              </bds-grid>\n              <bds-grid direction=\"column\" gap=\"2\">\n                <bds-typo variant=\"fs-32\" bold=\"bold\" margin={false}>\n                  Título com até uma linha\n                </bds-typo>\n                <bds-typo variant=\"fs-16\">\n                  Descrição com até duas linhas sobre o item destacado no carrosel respeitando as orientações de uso de\n                  content design.\n                </bds-typo>\n                <bds-typo variant=\"fs-16\">Observações com até uma linha</bds-typo>\n              </bds-grid>\n              <bds-grid gap=\"2\">\n                <bds-button color=\"content\" variant=\"solid\">\n                  Ação principal\n                </bds-button>\n                <bds-button color=\"content\" variant=\"outline\">\n                  Ação secundária\n                </bds-button>\n              </bds-grid>\n            </bds-grid>\n            <bds-grid xxs=\"4\" padding=\"3\" direction=\"column\"></bds-grid>\n          </bds-grid>\n        </bds-carousel-item>\n\n        <bds-carousel-item bg-image=\"https://blipmediastore.blip.ai/public-medias/Media_ccaf8af6-eb96-4372-a4db-91f1180329be?26b68de3-5e74-4724-bc5b-edc3c640ce66\">\n          <bds-grid align-items=\"center\" flex-wrap=\"wrap\" padding=\"2\" style={{ position: 'relative' }}>\n            <bds-grid xxs=\"8\" direction=\"column\" padding=\"2\" gap=\"3\">\n              <bds-grid justify-content=\"space-between\">\n                <bds-illustration\n                  type=\"brand\"\n                  name=\"blip-store-blue-black\"\n                  style={{ width: '100px' }}\n                ></bds-illustration>\n                <bds-chip-tag color=\"outline\">Inteligência Artificial</bds-chip-tag>\n              </bds-grid>\n              <bds-grid direction=\"column\" gap=\"2\">\n                <bds-typo variant=\"fs-32\" bold=\"bold\" margin={false}>\n                  Título com até uma linha\n                </bds-typo>\n                <bds-typo variant=\"fs-16\">\n                  Descrição com até duas linhas sobre o item destacado no carrosel respeitando as orientações de uso de\n                  content design.\n                </bds-typo>\n                <bds-typo variant=\"fs-16\">Observações com até uma linha</bds-typo>\n              </bds-grid>\n              <bds-grid gap=\"2\">\n                <bds-button color=\"content\" variant=\"solid\">\n                  Ação principal\n                </bds-button>\n                <bds-button color=\"content\" variant=\"outline\">\n                  Ação secundária\n                </bds-button>\n              </bds-grid>\n            </bds-grid>\n            <bds-grid xxs=\"4\" padding=\"3\" direction=\"column\"></bds-grid>\n          </bds-grid>\n        </bds-carousel-item>\n\n        <bds-carousel-item bg-color=\"linear-gradient(45deg, #590ABF, #05378E)\" theme=\"dark\">\n          <bds-grid align-items=\"center\" flex-wrap=\"wrap\" padding=\"2\" style={{ position: 'relative' }}>\n            <bds-grid xxs=\"4\" padding=\"3\" justify-content=\"center\">\n              <bds-illustration name=\"agent-1\" type=\"default\" style={{ width: '200px' }} />\n            </bds-grid>\n            <bds-grid xxs=\"8\" direction=\"column\" padding=\"2\" gap=\"3\">\n              <bds-grid justify-content=\"space-between\">\n                <bds-illustration\n                  type=\"brand\"\n                  name=\"blip-store-blue-white\"\n                  style={{ width: '100px' }}\n                ></bds-illustration>\n                <bds-chip-tag color=\"outline\">Inteligência Artificial</bds-chip-tag>\n              </bds-grid>\n              <bds-grid direction=\"column\" gap=\"2\">\n                <bds-typo variant=\"fs-32\" bold=\"bold\" margin={false}>\n                  Título com até uma linha\n                </bds-typo>\n                <bds-typo variant=\"fs-16\">\n                  Descrição com até duas linhas sobre o item destacado no carrosel respeitando as orientações de uso de\n                  content design.\n                </bds-typo>\n                <bds-typo variant=\"fs-16\">Observações com até uma linha</bds-typo>\n              </bds-grid>\n              <bds-grid gap=\"2\">\n                <bds-button color=\"content\" variant=\"solid\">\n                  Ação principal\n                </bds-button>\n                <bds-button color=\"content\" variant=\"outline\">\n                  Ação secundária\n                </bds-button>\n              </bds-grid>\n            </bds-grid>\n          </bds-grid>\n        </bds-carousel-item>\n\n        <bds-carousel-item bg-color=\"#B2DFFD\">\n          <bds-grid align-items=\"center\" flex-wrap=\"wrap\" height=\"100%\" padding=\"2\" style={{ position: 'relative' }}>\n            <bds-grid xxs=\"4\" padding=\"3\" justify-content=\"center\">\n              <bds-illustration name=\"agent-1\" type=\"default\" style={{ width: '200px' }} />\n            </bds-grid>\n            <bds-grid xxs=\"8\" direction=\"column\" padding=\"2\" gap=\"3\">\n              <bds-grid justify-content=\"space-between\">\n                <bds-illustration\n                  type=\"brand\"\n                  name=\"blip-store-blue-black\"\n                  style={{ width: '100px' }}\n                ></bds-illustration>\n                <bds-chip-tag color=\"outline\">Inteligência Artificial</bds-chip-tag>\n              </bds-grid>\n              <bds-grid direction=\"column\" gap=\"2\">\n                <bds-typo variant=\"fs-32\" bold=\"bold\" margin={false}>\n                  Título com até uma linha\n                </bds-typo>\n                <bds-typo variant=\"fs-16\">\n                  Descrição com até duas linhas sobre o item destacado no carrosel respeitando as orientações de uso de\n                  content design.\n                </bds-typo>\n                <bds-typo variant=\"fs-16\">Observações com até uma linha</bds-typo>\n              </bds-grid>\n              <bds-grid gap=\"2\">\n                <bds-button color=\"content\" variant=\"solid\">\n                  Ação principal\n                </bds-button>\n                <bds-button color=\"content\" variant=\"outline\">\n                  Ação secundária\n                </bds-button>\n              </bds-grid>\n            </bds-grid>\n          </bds-grid>\n        </bds-carousel-item>\n      </bds-carousel>\n    </bds-grid>\n  );\n};"},{"name":"CarouselProductMobile","snippet":"const CarouselProductMobile = () => {\n  return (\n    <bds-grid style={{ maxWidth: `320px` }}>\n      <bds-carousel arrows=\"none\" slide-per-page={1} gap=\"2\">\n        <bds-carousel-item\n          bg-image=\"https://blipmediastore.blip.ai/public-medias/Media_bdcb8c47-a74f-47d8-8b55-9a91a367fead?56983082-a993-4c40-9d78-d7a90416db97\"\n          bg-image-brightness={0.4}\n          theme=\"dark\"\n        >\n          <bds-grid\n            justify-content=\"center\"\n            flex-wrap=\"wrap\"\n            height=\"100%\"\n            style={{ position: 'relative' }}\n            direction=\"column\"\n            gap=\"3\"\n            padding=\"4\"\n          >\n            <bds-grid justify-content=\"space-between\">\n              <bds-illustration type=\"brand\" name=\"blip-store-blue-white\" style={{ width: '100px' }}></bds-illustration>\n              <bds-chip-tag color=\"outline\">Inteligência Artificial</bds-chip-tag>\n            </bds-grid>\n            <bds-grid direction=\"column\" gap=\"2\">\n              <bds-typo variant=\"fs-20\" bold=\"bold\" margin={false}>\n                {title}\n              </bds-typo>\n              <bds-typo variant=\"fs-16\">{paragraph}</bds-typo>\n              <bds-typo variant=\"fs-16\">Observações com até uma linha</bds-typo>\n            </bds-grid>\n            <bds-grid gap=\"2\">\n              <bds-button color=\"content\" variant=\"solid\">\n                Ação principal\n              </bds-button>\n              <bds-button color=\"content\" variant=\"outline\">\n                Ação secundária\n              </bds-button>\n            </bds-grid>\n          </bds-grid>\n        </bds-carousel-item>\n\n        <bds-carousel-item bg-image=\"https://blipmediastore.blip.ai/public-medias/Media_ccaf8af6-eb96-4372-a4db-91f1180329be?26b68de3-5e74-4724-bc5b-edc3c640ce66\">\n          <bds-grid\n            justify-content=\"center\"\n            flex-wrap=\"wrap\"\n            height=\"100%\"\n            style={{ position: 'relative' }}\n            direction=\"column\"\n            gap=\"3\"\n            padding=\"4\"\n          >\n            <bds-grid justify-content=\"space-between\">\n              <bds-illustration type=\"brand\" name=\"blip-store-blue-black\" style={{ width: '100px' }}></bds-illustration>\n              <bds-chip-tag color=\"outline\">Inteligência Artificial</bds-chip-tag>\n            </bds-grid>\n            <bds-grid direction=\"column\" gap=\"2\">\n              <bds-typo variant=\"fs-20\" bold=\"bold\" margin={false}>\n                {title}\n              </bds-typo>\n              <bds-typo variant=\"fs-16\">{paragraph}</bds-typo>\n              <bds-typo variant=\"fs-16\">Observações com até uma linha</bds-typo>\n            </bds-grid>\n            <bds-grid gap=\"2\">\n              <bds-button color=\"content\" variant=\"solid\">\n                Ação principal\n              </bds-button>\n              <bds-button color=\"content\" variant=\"outline\">\n                Ação secundária\n              </bds-button>\n            </bds-grid>\n          </bds-grid>\n        </bds-carousel-item>\n\n        <bds-carousel-item bg-color=\"linear-gradient(45deg, #590ABF, #05378E)\" theme=\"dark\">\n          <bds-grid\n            justify-content=\"center\"\n            flex-wrap=\"wrap\"\n            height=\"100%\"\n            style={{ position: 'relative' }}\n            direction=\"column\"\n            gap=\"3\"\n            padding=\"4\"\n          >\n            <bds-grid justify-content=\"space-between\">\n              <bds-illustration type=\"brand\" name=\"blip-store-blue-white\" style={{ width: '100px' }}></bds-illustration>\n              <bds-chip-tag color=\"outline\">Inteligência Artificial</bds-chip-tag>\n            </bds-grid>\n            <bds-grid direction=\"column\" gap=\"2\">\n              <bds-grid gap=\"3\">\n                <bds-illustration name=\"agent-1\" type=\"default\" style={{ width: '50px' }} />\n                <bds-typo variant=\"fs-20\" bold=\"bold\" margin={false}>\n                  {title}\n                </bds-typo>\n              </bds-grid>\n              <bds-typo variant=\"fs-16\">{paragraph}</bds-typo>\n              <bds-typo variant=\"fs-16\">Observações com até uma linha</bds-typo>\n            </bds-grid>\n            <bds-grid gap=\"2\">\n              <bds-button color=\"content\" variant=\"solid\">\n                Ação principal\n              </bds-button>\n              <bds-button color=\"content\" variant=\"outline\">\n                Ação secundária\n              </bds-button>\n            </bds-grid>\n          </bds-grid>\n        </bds-carousel-item>\n\n        <bds-carousel-item bg-color=\"#B2DFFD\">\n          <bds-grid\n            justify-content=\"center\"\n            flex-wrap=\"wrap\"\n            height=\"100%\"\n            style={{ position: 'relative' }}\n            direction=\"column\"\n            gap=\"3\"\n            padding=\"4\"\n          >\n            <bds-grid justify-content=\"space-between\">\n              <bds-illustration type=\"brand\" name=\"blip-store-blue-black\" style={{ width: '100px' }}></bds-illustration>\n              <bds-chip-tag color=\"outline\">Inteligência Artificial</bds-chip-tag>\n            </bds-grid>\n            <bds-grid direction=\"column\" gap=\"2\">\n              <bds-grid gap=\"3\">\n                <bds-illustration name=\"agent-1\" type=\"default\" style={{ width: '50px' }} />\n                <bds-typo variant=\"fs-20\" bold=\"bold\" margin={false}>\n                  {title}\n                </bds-typo>\n              </bds-grid>\n              <bds-typo variant=\"fs-16\">{paragraph}</bds-typo>\n              <bds-typo variant=\"fs-16\">Observações com até uma linha</bds-typo>\n            </bds-grid>\n            <bds-grid gap=\"2\">\n              <bds-button color=\"content\" variant=\"solid\">\n                Ação principal\n              </bds-button>\n              <bds-button color=\"content\" variant=\"outline\">\n                Ação secundária\n              </bds-button>\n            </bds-grid>\n          </bds-grid>\n        </bds-carousel-item>\n      </bds-carousel>\n    </bds-grid>\n  );\n};"},{"name":"CarouselBulletsExamples","snippet":"const CarouselBulletsExamples = () => {\n  return (\n    <bds-grid xxs=\"12\" padding=\"x-2\" flex-wrap=\"wrap\">\n      <bds-grid xxs=\"6\" padding=\"6\" direction=\"column\" gap=\"6\">\n        <bds-carousel arrows=\"inside\" bullets=\"inside\" bullets-position=\"left\" infinite-loop={false} slide-per-page={1}>\n          {DATACAROUSEL.map((item, index) => {\n            return (\n              <bds-carousel-item key={index} bg-color={item.bgColor} theme={item.theme}>\n                <bds-grid padding=\"x-7\" margin=\"y-6\" align-items=\"center\">\n                  <bds-grid xxs=\"3\" direction=\"column\">\n                    <bds-illustration type={item.illustration.type} name={item.illustration.name}></bds-illustration>\n                  </bds-grid>\n                  <bds-grid xxs=\"9\" direction=\"column\" gap=\"1\">\n                    <bds-typo variant=\"fs-20\" bold=\"bold\" margin={false}>\n                      {item.title}\n                    </bds-typo>\n                    <bds-typo variant=\"fs-16\">{item.subTitle}</bds-typo>\n                    <bds-button>Saiba mais</bds-button>\n                  </bds-grid>\n                </bds-grid>\n              </bds-carousel-item>\n            );\n          })}\n        </bds-carousel>\n        <bds-carousel\n          arrows=\"inside\"\n          bullets=\"inside\"\n          bullets-position=\"center\"\n          infinite-loop={false}\n          slide-per-page={1}\n          gap=\"2\"\n        >\n          {DATACAROUSEL.map((item, index) => {\n            return (\n              <bds-carousel-item key={index} bg-color={item.bgColor} theme={item.theme}>\n                <bds-grid padding=\"x-7\" margin=\"y-6\" align-items=\"center\">\n                  <bds-grid xxs=\"3\" direction=\"column\">\n                    <bds-illustration type={item.illustration.type} name={item.illustration.name}></bds-illustration>\n                  </bds-grid>\n                  <bds-grid xxs=\"9\" direction=\"column\" gap=\"1\">\n                    <bds-typo variant=\"fs-20\" bold=\"bold\" margin={false}>\n                      {item.title}\n                    </bds-typo>\n                    <bds-typo variant=\"fs-16\">{item.subTitle}</bds-typo>\n                    <bds-button>Saiba mais</bds-button>\n                  </bds-grid>\n                </bds-grid>\n              </bds-carousel-item>\n            );\n          })}\n        </bds-carousel>\n        <bds-carousel\n          arrows=\"inside\"\n          bullets=\"inside\"\n          bullets-position=\"right\"\n          infinite-loop={false}\n          slide-per-page={1}\n          gap=\"2\"\n        >\n          {DATACAROUSEL.map((item, index) => {\n            return (\n              <bds-carousel-item key={index} bg-color={item.bgColor} theme={item.theme}>\n                <bds-grid padding=\"x-7\" margin=\"y-6\" align-items=\"center\">\n                  <bds-grid xxs=\"3\" direction=\"column\">\n                    <bds-illustration type={item.illustration.type} name={item.illustration.name}></bds-illustration>\n                  </bds-grid>\n                  <bds-grid xxs=\"9\" direction=\"column\" gap=\"1\">\n                    <bds-typo variant=\"fs-20\" bold=\"bold\" margin={false}>\n                      {item.title}\n                    </bds-typo>\n                    <bds-typo variant=\"fs-16\">{item.subTitle}</bds-typo>\n                    <bds-button>Saiba mais</bds-button>\n                  </bds-grid>\n                </bds-grid>\n              </bds-carousel-item>\n            );\n          })}\n        </bds-carousel>\n      </bds-grid>\n      <bds-grid xxs=\"6\" padding=\"6\" direction=\"column\" gap=\"6\">\n        <bds-carousel\n          arrows=\"inside\"\n          bullets=\"outside\"\n          bullets-position=\"left\"\n          infinite-loop={false}\n          slide-per-page={1}\n          gap=\"2\"\n        >\n          {DATACAROUSEL.map((item, index) => {\n            return (\n              <bds-carousel-item key={index} bg-color={item.bgColor} theme={item.theme}>\n                <bds-grid padding=\"x-7\" margin=\"y-5\" align-items=\"center\">\n                  <bds-grid xxs=\"3\" direction=\"column\">\n                    <bds-illustration type={item.illustration.type} name={item.illustration.name}></bds-illustration>\n                  </bds-grid>\n                  <bds-grid xxs=\"9\" direction=\"column\" gap=\"1\">\n                    <bds-typo variant=\"fs-20\" bold=\"bold\" margin={false}>\n                      {item.title}\n                    </bds-typo>\n                    <bds-typo variant=\"fs-16\">{item.subTitle}</bds-typo>\n                    <bds-button>Saiba mais</bds-button>\n                  </bds-grid>\n                </bds-grid>\n              </bds-carousel-item>\n            );\n          })}\n        </bds-carousel>\n        <bds-carousel\n          arrows=\"inside\"\n          bullets=\"outside\"\n          bullets-position=\"center\"\n          infinite-loop={false}\n          slide-per-page={1}\n          gap=\"2\"\n        >\n          {DATACAROUSEL.map((item, index) => {\n            return (\n              <bds-carousel-item key={index} bg-color={item.bgColor} theme={item.theme}>\n                <bds-grid padding=\"x-7\" margin=\"y-5\" align-items=\"center\">\n                  <bds-grid xxs=\"3\" direction=\"column\">\n                    <bds-illustration type={item.illustration.type} name={item.illustration.name}></bds-illustration>\n                  </bds-grid>\n                  <bds-grid xxs=\"9\" direction=\"column\" gap=\"1\">\n                    <bds-typo variant=\"fs-20\" bold=\"bold\" margin={false}>\n                      {item.title}\n                    </bds-typo>\n                    <bds-typo variant=\"fs-16\">{item.subTitle}</bds-typo>\n                    <bds-button>Saiba mais</bds-button>\n                  </bds-grid>\n                </bds-grid>\n              </bds-carousel-item>\n            );\n          })}\n        </bds-carousel>\n        <bds-carousel\n          arrows=\"inside\"\n          bullets=\"outside\"\n          bullets-position=\"right\"\n          infinite-loop={false}\n          slide-per-page={1}\n          gap=\"2\"\n        >\n          {DATACAROUSEL.map((item, index) => {\n            return (\n              <bds-carousel-item key={index} bg-color={item.bgColor} theme={item.theme}>\n                <bds-grid padding=\"x-7\" margin=\"y-5\" align-items=\"center\">\n                  <bds-grid xxs=\"3\" direction=\"column\">\n                    <bds-illustration type={item.illustration.type} name={item.illustration.name}></bds-illustration>\n                  </bds-grid>\n                  <bds-grid xxs=\"9\" direction=\"column\" gap=\"1\">\n                    <bds-typo variant=\"fs-20\" bold=\"bold\" margin={false}>\n                      {item.title}\n                    </bds-typo>\n                    <bds-typo variant=\"fs-16\">{item.subTitle}</bds-typo>\n                    <bds-button>Saiba mais</bds-button>\n                  </bds-grid>\n                </bds-grid>\n              </bds-carousel-item>\n            );\n          })}\n        </bds-carousel>\n      </bds-grid>\n    </bds-grid>\n  );\n};"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  2 | import React from 'react';\n  3 |\n> 4 | export default {\n    | ^\n  5 |   title: 'Snippets/Carousel',\n  6 | };\n  7 | const DATACAROUSEL = ["}},"snippets-form":{"id":"snippets-form","name":"Form","path":"./src/snippets/form-snippet.stories.jsx","examples":[{"name":"BasicForm","snippet":"const BasicForm = (args) => {\n  return (\n    <form>\n      <bds-paper width=\"500px\">\n        <bds-grid padding=\"3\" direction=\"column\" gap=\"1\">\n          <bds-typo variant=\"fs-24\" bold=\"bold\">\n            Entrar\n          </bds-typo>\n          <bds-input label=\"E-mail\"></bds-input>\n          <bds-input label=\"Senha\"></bds-input>\n          <bds-checkbox label=\"Esqueci minha senha\"></bds-checkbox>\n          <bds-grid justify-content=\"flex-end\" padding=\"t-2\">\n            <bds-button>Cadastrar</bds-button>\n          </bds-grid>\n        </bds-grid>\n      </bds-paper>\n    </form>\n  );\n};"},{"name":"ComplexForm","snippet":"const ComplexForm = (args) => {\n  return (\n    <form>\n      <bds-grid padding=\"3\" direction=\"column\" gap=\"2\">\n        <bds-typo variant=\"fs-24\" bold=\"bold\">\n          Overview\n        </bds-typo>\n        <bds-checkbox label=\"checkbox label 1\"></bds-checkbox>\n        <bds-checkbox label=\"checkbox label 2\"></bds-checkbox>\n        <bds-checkbox label=\"checkbox label 3\"></bds-checkbox>\n        <bds-input label=\"input\"></bds-input>\n        <bds-input-phone-number label=\"Phone Number\" value=\"\" />\n        <bds-upload language=\"pt_BR\" subtitle=\"Description uploades, only one file\" title-name=\"Title uploader\" />\n        <bds-radio-group>\n          <bds-grid direction=\"column\" gap=\"2\">\n            <bds-typo bold=\"bold\">Radio group</bds-typo>\n            <bds-radio label=\"Radio 1\" value=\"radio1\" />\n            <bds-radio label=\"Radio 2\" value=\"radio2\" />\n          </bds-grid>\n        </bds-radio-group>\n        <bds-select placeholder=\"nome completo\">\n          <bds-select-option value=\"1\">Millie Bobby</bds-select-option>\n          <bds-select-option value=\"2\">Finn Wolfhard</bds-select-option>\n          <bds-select-option value=\"3\">David Harbour</bds-select-option>\n          <bds-select-option value=\"4\">Gaten Matarazzo</bds-select-option>\n          <bds-select-option value=\"5\">Caleb McLaughlin</bds-select-option>\n          <bds-select-option value=\"6\">Noah Schnapp</bds-select-option>\n        </bds-select>\n        <bds-input rows=\"4\" is-textarea label=\"input textarea\"></bds-input>\n        <bds-grid justify-content=\"flex-end\" padding=\"t-2\">\n          <bds-button type=\"submit\">Enviar</bds-button>\n        </bds-grid>\n      </bds-grid>\n    </form>\n  );\n};"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  1 | import React from 'react';\n  2 |\n> 3 | export default {\n    | ^\n  4 |   title: 'Snippets/Form',\n  5 | };\n  6 |"}},"snippets-pagination":{"id":"snippets-pagination","name":"Pagination","path":"./src/snippets/pagination.stories.jsx","examples":[{"name":"TableWithPagination","snippet":"const TableWithPagination = () => {\n  const data = [\n    {\n      id: 1,\n      produto: 'Celular',\n      valor: '1500,00',\n      disponibilidade: 'disponível',\n      marca: 'Samsung',\n      estoque: 10,\n      categoria: 'Eletrônicos',\n    },\n    {\n      id: 2,\n      produto: 'Notebook',\n      valor: '4000,00',\n      disponibilidade: 'indisponível',\n      marca: 'Dell',\n      estoque: 5,\n      categoria: 'Computadores',\n    },\n    {\n      id: 3,\n      produto: 'Livros',\n      valor: '60,00',\n      disponibilidade: 'disponível',\n      marca: 'Penguin',\n      estoque: 20,\n      categoria: 'Livros',\n    },\n    {\n      id: 4,\n      produto: 'Tablet',\n      valor: '1200,00',\n      disponibilidade: 'disponível',\n      marca: 'Apple',\n      estoque: 15,\n      categoria: 'Eletrônicos',\n    },\n    {\n      id: 5,\n      produto: 'Headphones',\n      valor: '350,00',\n      disponibilidade: 'indisponível',\n      marca: 'Sony',\n      estoque: 8,\n      categoria: 'Acessórios',\n    },\n    {\n      id: 6,\n      produto: 'Monitor',\n      valor: '800,00',\n      disponibilidade: 'disponível',\n      marca: 'LG',\n      estoque: 12,\n      categoria: 'Computadores',\n    },\n    {\n      id: 7,\n      produto: 'Câmera',\n      valor: '2500,00',\n      disponibilidade: 'disponível',\n      marca: 'Canon',\n      estoque: 7,\n      categoria: 'Eletrônicos',\n    },\n    {\n      id: 8,\n      produto: 'Teclado',\n      valor: '150,00',\n      disponibilidade: 'disponível',\n      marca: 'Microsoft',\n      estoque: 25,\n      categoria: 'Acessórios',\n    },\n    {\n      id: 9,\n      produto: 'Mouse',\n      valor: '80,00',\n      disponibilidade: 'disponível',\n      marca: 'Logitech',\n      estoque: 30,\n      categoria: 'Acessórios',\n    },\n    {\n      id: 10,\n      produto: 'Impressora',\n      valor: '600,00',\n      disponibilidade: 'indisponível',\n      marca: 'HP',\n      estoque: 4,\n      categoria: 'Computadores',\n    },\n    {\n      id: 11,\n      produto: 'Micro-ondas',\n      valor: '400,00',\n      disponibilidade: 'disponível',\n      marca: 'Electrolux',\n      estoque: 14,\n      categoria: 'Eletrodomésticos',\n    },\n    {\n      id: 12,\n      produto: 'Geladeira',\n      valor: '2000,00',\n      disponibilidade: 'disponível',\n      marca: 'Brastemp',\n      estoque: 6,\n      categoria: 'Eletrodomésticos',\n    },\n    {\n      id: 13,\n      produto: 'Fogão',\n      valor: '900,00',\n      disponibilidade: 'disponível',\n      marca: 'Consul',\n      estoque: 9,\n      categoria: 'Eletrodomésticos',\n    },\n    {\n      id: 14,\n      produto: 'Aspirador de pó',\n      valor: '350,00',\n      disponibilidade: 'disponível',\n      marca: 'Philips',\n      estoque: 11,\n      categoria: 'Eletrodomésticos',\n    },\n    {\n      id: 15,\n      produto: 'Batedeira',\n      valor: '200,00',\n      disponibilidade: 'indisponível',\n      marca: 'Mondial',\n      estoque: 3,\n      categoria: 'Eletrodomésticos',\n    },\n    {\n      id: 16,\n      produto: 'Fritadeira',\n      valor: '300,00',\n      disponibilidade: 'disponível',\n      marca: 'Arno',\n      estoque: 13,\n      categoria: 'Eletrodomésticos',\n    },\n    {\n      id: 17,\n      produto: 'Cafeteira',\n      valor: '120,00',\n      disponibilidade: 'disponível',\n      marca: 'Nespresso',\n      estoque: 18,\n      categoria: 'Eletrodomésticos',\n    },\n    {\n      id: 18,\n      produto: 'Sandwich Maker',\n      valor: '100,00',\n      disponibilidade: 'indisponível',\n      marca: 'Black+Decker',\n      estoque: 6,\n      categoria: 'Eletrodomésticos',\n    },\n    {\n      id: 19,\n      produto: 'Torradeira',\n      valor: '80,00',\n      disponibilidade: 'disponível',\n      marca: 'Cadence',\n      estoque: 20,\n      categoria: 'Eletrodomésticos',\n    },\n    {\n      id: 20,\n      produto: 'Liquidificador',\n      valor: '180,00',\n      disponibilidade: 'disponível',\n      marca: 'Arno',\n      estoque: 15,\n      categoria: 'Eletrodomésticos',\n    },\n    {\n      id: 21,\n      produto: 'Máquina de costura',\n      valor: '700,00',\n      disponibilidade: 'disponível',\n      marca: 'Singer',\n      estoque: 8,\n      categoria: 'Eletrodomésticos',\n    },\n    {\n      id: 22,\n      produto: 'Escova de cabelo',\n      valor: '60,00',\n      disponibilidade: 'disponível',\n      marca: 'Philips',\n      estoque: 22,\n      categoria: 'Beleza',\n    },\n    {\n      id: 23,\n      produto: 'Secador de cabelo',\n      valor: '150,00',\n      disponibilidade: 'disponível',\n      marca: 'Taiff',\n      estoque: 12,\n      categoria: 'Beleza',\n    },\n    {\n      id: 24,\n      produto: 'Chapinha',\n      valor: '100,00',\n      disponibilidade: 'disponível',\n      marca: 'Gama',\n      estoque: 16,\n      categoria: 'Beleza',\n    },\n    {\n      id: 25,\n      produto: 'Kit de maquiagem',\n      valor: '250,00',\n      disponibilidade: 'disponível',\n      marca: 'Maybelline',\n      estoque: 10,\n      categoria: 'Beleza',\n    },\n    {\n      id: 26,\n      produto: 'Perfume',\n      valor: '180,00',\n      disponibilidade: 'indisponível',\n      marca: 'Dior',\n      estoque: 5,\n      categoria: 'Beleza',\n    },\n    {\n      id: 27,\n      produto: 'Creme para o rosto',\n      valor: '80,00',\n      disponibilidade: 'disponível',\n      marca: \"L'Oréal\",\n      estoque: 25,\n      categoria: 'Beleza',\n    },\n    {\n      id: 28,\n      produto: 'Desodorante',\n      valor: '30,00',\n      disponibilidade: 'disponível',\n      marca: 'Nivea',\n      estoque: 40,\n      categoria: 'Beleza',\n    },\n    {\n      id: 29,\n      produto: 'Shampoo',\n      valor: '50,00',\n      disponibilidade: 'disponível',\n      marca: 'Pantene',\n      estoque: 30,\n      categoria: 'Beleza',\n    },\n    {\n      id: 30,\n      produto: 'Condicionador',\n      valor: '50,00',\n      disponibilidade: 'disponível',\n      marca: 'Elseve',\n      estoque: 28,\n      categoria: 'Beleza',\n    },\n    {\n      id: 31,\n      produto: 'Sabonete',\n      valor: '20,00',\n      disponibilidade: 'disponível',\n      marca: 'Dove',\n      estoque: 50,\n      categoria: 'Beleza',\n    },\n    {\n      id: 32,\n      produto: 'Creme para as mãos',\n      valor: '35,00',\n      disponibilidade: 'disponível',\n      marca: 'Avon',\n      estoque: 20,\n      categoria: 'Beleza',\n    },\n    {\n      id: 33,\n      produto: 'Base',\n      valor: '120,00',\n      disponibilidade: 'disponível',\n      marca: 'MAC',\n      estoque: 18,\n      categoria: 'Beleza',\n    },\n    {\n      id: 34,\n      produto: 'Corretivo',\n      valor: '90,00',\n      disponibilidade: 'disponível',\n      marca: 'Clinique',\n      estoque: 22,\n      categoria: 'Beleza',\n    },\n  ];\n\n  const heading = ['Id', 'Produtos', 'Valor', 'Marca', 'Estoque', 'Categoria', 'Disponibilidade'];\n\n  const numberPerPage = [5, 10, 20];\n\n  const [currentPage, setCurrentPage] = useState(1);\n  const [itemsPerPage, setItemsPerPage] = useState(numberPerPage[0]);\n\n  const [paginatedData, setPaginatedData] = useState(data);\n\n  useEffect(() => {\n    const startIndex = (currentPage - 1) * itemsPerPage;\n    const endIndex = startIndex + itemsPerPage;\n    setPaginatedData(data.slice(startIndex, endIndex));\n  }, [currentPage, itemsPerPage]);\n\n  const handlePaginationChange = (event) => {\n    setCurrentPage(event.detail);\n  };\n\n  const handleItemsPerPageChange = (newItemsPerPage) => {\n    setItemsPerPage(newItemsPerPage.detail);\n    setCurrentPage(1);\n  };\n\n  return (\n    <BdsGrid xxs=\"12\" gap=\"2\" direction=\"column\">\n      <BdsTable scrollable={true}>\n        <BdsTableHeader>\n          <BdsTableRow>\n            {heading.map((item, index) => (\n              <BdsTableTh key={index}>{item}</BdsTableTh>\n            ))}\n          </BdsTableRow>\n        </BdsTableHeader>\n        <BdsTableBody>\n          {paginatedData.map((row, index) => (\n            <BdsTableRow key={index}>\n              <BdsTableCell>\n                <BdsTypo variant=\"fs-14\">{row.id}</BdsTypo>\n              </BdsTableCell>\n              <BdsTableCell>\n                <BdsTypo variant=\"fs-14\">{row.produto}</BdsTypo>\n              </BdsTableCell>\n              <BdsTableCell>\n                <BdsTypo variant=\"fs-14\">{row.valor}</BdsTypo>\n              </BdsTableCell>\n              <BdsTableCell>\n                <BdsTypo variant=\"fs-14\">{row.marca}</BdsTypo>\n              </BdsTableCell>\n              <BdsTableCell>\n                <BdsTypo variant=\"fs-14\">{row.estoque}</BdsTypo>\n              </BdsTableCell>\n              <BdsTableCell>\n                <BdsTypo variant=\"fs-14\">{row.categoria}</BdsTypo>\n              </BdsTableCell>\n              <BdsTableCell>\n                {row.disponibilidade === 'disponível' ? (\n                  <BdsChipTag key={row.index} color=\"success\">\n                    {row.disponibilidade}\n                  </BdsChipTag>\n                ) : (\n                  <BdsChipTag key={row.index} color=\"danger\">\n                    {row.disponibilidade}\n                  </BdsChipTag>\n                )}\n              </BdsTableCell>\n            </BdsTableRow>\n          ))}\n        </BdsTableBody>\n      </BdsTable>\n      <BdsPagination\n        numberItems={data.length}\n        itemsPage={numberPerPage}\n        startedPage={1}\n        pageCounter={true}\n        onBdsPaginationChange={handlePaginationChange}\n        onBdsItemsPerPageChange={handleItemsPerPageChange}\n      />\n    </BdsGrid>\n  );\n};"},{"name":"CardsWithPagination","snippet":"const CardsWithPagination = () => {\n  const data = [\n    { title: 'Celular', subtitle: 'Samsung', text: 'R$1500,00', disponibilidade: 'disponível' },\n    { title: 'Notebook', subtitle: 'Dell', text: 'R$4000,00', disponibilidade: 'indisponível' },\n    { title: 'Livros', subtitle: 'Penguin', text: 'R$60,00', disponibilidade: 'disponível' },\n    { title: 'Tablet', subtitle: 'Apple', text: 'R$1200,00', disponibilidade: 'disponível' },\n    { title: 'Headphones', subtitle: 'Sony', text: 'R$350,00', disponibilidade: 'indisponível' },\n    { title: 'Monitor', subtitle: 'LG', text: 'R$800,00', disponibilidade: 'disponível' },\n    { title: 'Câmera', subtitle: 'Canon', text: 'R$2500,00', disponibilidade: 'disponível' },\n    { title: 'Teclado', subtitle: 'Microsoft', text: 'R$150,00', disponibilidade: 'disponível' },\n    { title: 'Mouse', subtitle: 'Logitech', text: 'R$80,00', disponibilidade: 'disponível' },\n    { title: 'Impressora', subtitle: 'HP', text: 'R$600,00', disponibilidade: 'indisponível' },\n    { title: 'Micro-ondas', subtitle: 'Electrolux', text: 'R$400,00', disponibilidade: 'disponível' },\n    { title: 'Geladeira', subtitle: 'Brastemp', text: 'R$2000,00', disponibilidade: 'disponível' },\n    { title: 'Fogão', subtitle: 'Consul', text: 'R$900,00', disponibilidade: 'disponível' },\n    { title: 'Aspirador de pó', subtitle: 'Philips', text: 'R$350,00', disponibilidade: 'disponível' },\n    { title: 'Batedeira', subtitle: 'Mondial', text: 'R$200,00', disponibilidade: 'indisponível' },\n    { title: 'Fritadeira', subtitle: 'Arno', text: 'R$300,00', disponibilidade: 'disponível' },\n    { title: 'Cafeteira', subtitle: 'Nespresso', text: 'R$120,00', disponibilidade: 'disponível' },\n    { title: 'Sandwich Maker', subtitle: 'Black+Decker', text: 'R$100,00', disponibilidade: 'indisponível' },\n    { title: 'Torradeira', subtitle: 'Cadence', text: 'R$80,00', disponibilidade: 'disponível' },\n    { title: 'Liquidificador', subtitle: 'Arno', text: 'R$180,00', disponibilidade: 'disponível' },\n    { title: 'Máquina de costura', subtitle: 'Singer', text: 'R$700,00', disponibilidade: 'disponível' },\n    { title: 'Escova de cabelo', subtitle: 'Philips', text: 'R$60,00', disponibilidade: 'disponível' },\n    { title: 'Secador de cabelo', subtitle: 'Taiff', text: 'R$150,00', disponibilidade: 'disponível' },\n    { title: 'Chapinha', subtitle: 'Gama', text: 'R$100,00', disponibilidade: 'disponível' },\n    { title: 'Kit de maquiagem', subtitle: 'Maybelline', text: 'R$250,00', disponibilidade: 'disponível' },\n    { title: 'Perfume', subtitle: 'Dior', text: 'R$180,00', disponibilidade: 'indisponível' },\n    { title: 'Creme para o rosto', subtitle: \"L'Oréal\", text: 'R$80,00', disponibilidade: 'disponível' },\n    { title: 'Desodorante', subtitle: 'Nivea', text: 'R$30,00', disponibilidade: 'disponível' },\n    { title: 'Shampoo', subtitle: 'Pantene', text: 'R$50,00', disponibilidade: 'disponível' },\n    { title: 'Condicionador', subtitle: 'Elseve', text: 'R$50,00', disponibilidade: 'disponível' },\n    { title: 'Sabonete', subtitle: 'Dove', text: 'R$20,00', disponibilidade: 'disponível' },\n    { title: 'Creme para as mãos', subtitle: 'Avon', text: 'R$35,00', disponibilidade: 'disponível' },\n    { title: 'Base', subtitle: 'MAC', text: 'R$120,00', disponibilidade: 'disponível' },\n    { title: 'Corretivo', subtitle: 'Clinique', text: 'R$90,00', disponibilidade: 'disponível' },\n  ];\n\n  const numberPerPage = [5, 10, 20];\n\n  const [currentPage, setCurrentPage] = useState(1);\n  const [itemsPerPage, setItemsPerPage] = useState(numberPerPage[0]);\n\n  const [paginatedData, setPaginatedData] = useState(data);\n\n  useEffect(() => {\n    const startIndex = (currentPage - 1) * itemsPerPage;\n    const endIndex = startIndex + itemsPerPage;\n    setPaginatedData(data.slice(startIndex, endIndex));\n  }, [currentPage, itemsPerPage]);\n\n  const handlePaginationChange = (event) => {\n    setCurrentPage(event.detail);\n  };\n\n  const handleItemsPerPageChange = (newItemsPerPage) => {\n    setItemsPerPage(newItemsPerPage.detail);\n    setCurrentPage(1);\n  };\n\n  return (\n    <BdsGrid gap={2} direction=\"column\" xxs=\"12\">\n      <BdsGrid direction=\"row\" gap=\"3\" justifyContent=\"flex-start\" flexWrap=\"wrap\">\n        {paginatedData.map((obj, index) => (\n          <BdsGrid xxs=\"2\" key={index}>\n            <BdsCard width=\"100%\">\n              <BdsCardHeader>\n                <BdsGrid direction=\"column\">\n                  <BdsCardTitle text={obj.title} />\n                  <BdsCardSubtitle text={obj.subtitle} />\n                </BdsGrid>\n              </BdsCardHeader>\n              <BdsCardBody>\n                <BdsTypo>{obj.text}</BdsTypo>\n              </BdsCardBody>\n            </BdsCard>\n          </BdsGrid>\n        ))}\n      </BdsGrid>\n      <BdsPagination\n        numberItems={data.length}\n        itemsPage={numberPerPage}\n        startedPage={1}\n        pageCounter={true}\n        onBdsPaginationChange={handlePaginationChange}\n        onBdsItemsPerPageChange={handleItemsPerPageChange}\n      />\n    </BdsGrid>\n  );\n};"},{"name":"ListWithPagination","snippet":"const ListWithPagination = () => {\n  const data = [\n    { title: 'Celular', subtitle: 'Samsung', text: 'R$1500,00', disponibilidade: 'disponível' },\n    { title: 'Notebook', subtitle: 'Dell', text: 'R$4000,00', disponibilidade: 'indisponível' },\n    { title: 'Livros', subtitle: 'Penguin', text: 'R$60,00', disponibilidade: 'disponível' },\n    { title: 'Tablet', subtitle: 'Apple', text: 'R$1200,00', disponibilidade: 'disponível' },\n    { title: 'Headphones', subtitle: 'Sony', text: 'R$350,00', disponibilidade: 'indisponível' },\n    { title: 'Monitor', subtitle: 'LG', text: 'R$800,00', disponibilidade: 'disponível' },\n    { title: 'Câmera', subtitle: 'Canon', text: 'R$2500,00', disponibilidade: 'disponível' },\n    { title: 'Teclado', subtitle: 'Microsoft', text: 'R$150,00', disponibilidade: 'disponível' },\n    { title: 'Mouse', subtitle: 'Logitech', text: 'R$80,00', disponibilidade: 'disponível' },\n    { title: 'Impressora', subtitle: 'HP', text: 'R$600,00', disponibilidade: 'indisponível' },\n    { title: 'Micro-ondas', subtitle: 'Electrolux', text: 'R$400,00', disponibilidade: 'disponível' },\n    { title: 'Geladeira', subtitle: 'Brastemp', text: 'R$2000,00', disponibilidade: 'disponível' },\n    { title: 'Fogão', subtitle: 'Consul', text: 'R$900,00', disponibilidade: 'disponível' },\n    { title: 'Aspirador de pó', subtitle: 'Philips', text: 'R$350,00', disponibilidade: 'disponível' },\n    { title: 'Batedeira', subtitle: 'Mondial', text: 'R$200,00', disponibilidade: 'indisponível' },\n    { title: 'Fritadeira', subtitle: 'Arno', text: 'R$300,00', disponibilidade: 'disponível' },\n    { title: 'Cafeteira', subtitle: 'Nespresso', text: 'R$120,00', disponibilidade: 'disponível' },\n    { title: 'Sandwich Maker', subtitle: 'Black+Decker', text: 'R$100,00', disponibilidade: 'indisponível' },\n    { title: 'Torradeira', subtitle: 'Cadence', text: 'R$80,00', disponibilidade: 'disponível' },\n    { title: 'Liquidificador', subtitle: 'Arno', text: 'R$180,00', disponibilidade: 'disponível' },\n    { title: 'Máquina de costura', subtitle: 'Singer', text: 'R$700,00', disponibilidade: 'disponível' },\n    { title: 'Escova de cabelo', subtitle: 'Philips', text: 'R$60,00', disponibilidade: 'disponível' },\n    { title: 'Secador de cabelo', subtitle: 'Taiff', text: 'R$150,00', disponibilidade: 'disponível' },\n    { title: 'Chapinha', subtitle: 'Gama', text: 'R$100,00', disponibilidade: 'disponível' },\n    { title: 'Kit de maquiagem', subtitle: 'Maybelline', text: 'R$250,00', disponibilidade: 'disponível' },\n    { title: 'Perfume', subtitle: 'Dior', text: 'R$180,00', disponibilidade: 'indisponível' },\n    { title: 'Creme para o rosto', subtitle: \"L'Oréal\", text: 'R$80,00', disponibilidade: 'disponível' },\n    { title: 'Desodorante', subtitle: 'Nivea', text: 'R$30,00', disponibilidade: 'disponível' },\n    { title: 'Shampoo', subtitle: 'Pantene', text: 'R$50,00', disponibilidade: 'disponível' },\n    { title: 'Condicionador', subtitle: 'Elseve', text: 'R$50,00', disponibilidade: 'disponível' },\n    { title: 'Sabonete', subtitle: 'Dove', text: 'R$20,00', disponibilidade: 'disponível' },\n    { title: 'Creme para as mãos', subtitle: 'Avon', text: 'R$35,00', disponibilidade: 'disponível' },\n    { title: 'Base', subtitle: 'MAC', text: 'R$120,00', disponibilidade: 'disponível' },\n    { title: 'Corretivo', subtitle: 'Clinique', text: 'R$90,00', disponibilidade: 'disponível' },\n  ];\n\n  const numberPerPage = [5, 10, 20];\n\n  const [currentPage, setCurrentPage] = useState(1);\n  const [itemsPerPage, setItemsPerPage] = useState(numberPerPage[0]);\n\n  const [paginatedData, setPaginatedData] = useState(data);\n\n  useEffect(() => {\n    const startIndex = (currentPage - 1) * itemsPerPage;\n    const endIndex = startIndex + itemsPerPage;\n    setPaginatedData(data.slice(startIndex, endIndex));\n  }, [currentPage, itemsPerPage]);\n\n  const handlePaginationChange = (event) => {\n    setCurrentPage(event.detail);\n  };\n\n  const handleItemsPerPageChange = (newItemsPerPage) => {\n    setItemsPerPage(newItemsPerPage.detail);\n    setCurrentPage(1);\n  };\n\n  return (\n    <BdsGrid gap={2} direction=\"column\" xxs=\"12\">\n      <BdsGrid direction=\"row\" gap=\"3\" justifyContent=\"flex-start\" flexWrap=\"wrap\">\n        <BdsList typeList=\"default\">\n          {paginatedData.map((obj, index) => (\n            <BdsListItem value={index}>\n              <BdsTypo variant=\"fs-16\">{obj.text}</BdsTypo>\n              <BdsTypo variant=\"fs-14\">{obj.subtitle}</BdsTypo>\n              {obj.disponibilidade === 'disponível' ? (\n                <BdsChipTag key={index} color=\"success\">\n                  {obj.disponibilidade}\n                </BdsChipTag>\n              ) : (\n                <BdsChipTag key={index} color=\"danger\">\n                  {obj.disponibilidade}\n                </BdsChipTag>\n              )}\n            </BdsListItem>\n          ))}\n        </BdsList>\n      </BdsGrid>\n      <BdsPagination\n        numberItems={data.length}\n        itemsPage={numberPerPage}\n        startedPage={1}\n        pageCounter={true}\n        onBdsPaginationChange={handlePaginationChange}\n        onBdsItemsPerPageChange={handleItemsPerPageChange}\n      />\n    </BdsGrid>\n  );\n};"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  20 | } from '../../blip-ds-react/dist/components';\n  21 |\n> 22 | export default {\n     | ^\n  23 |   title: 'Snippets/Pagination',\n  24 | };\n  25 |"}},"snippets-search":{"id":"snippets-search","name":"Search","path":"./src/snippets/search.stories.jsx","examples":[{"name":"BasicSearch","snippet":"const BasicSearch = (args) => {\n  const el = document.getElementsByClassName('sb-story');\n  if (el.length !== 0) {\n    el[0].style.width = '500px';\n  }\n  return <bds-input icon=\"search\" placeholder=\"Procurar\"></bds-input>;\n};"},{"name":"SearchWithButton","snippet":"const SearchWithButton = (args) => {\n    const el = document.getElementsByClassName('sb-story');\n    if (el.length !== 0) {\n      el[0].style.width = '500px';\n    }\n    return (\n        <bds-grid gap=\"1\">\n            <bds-input icon=\"search\" placeholder=\"Serviços blip\"></bds-input>\n            <bds-button>Procurar</bds-button>\n        </bds-grid>\n    );\n  };"},{"name":"SearchWithOptions","snippet":"const SearchWithOptions = (args) => {\n  const el = document.getElementsByClassName('sb-story');\n  if (el.length !== 0) {\n    el[0].style.width = '500px';\n  }\n  return (\n    <bds-autocomplete icon=\"search\" placeholder=\"Procurar pessoas\">\n      <bds-select-option value=\"1\">Millie Bobby</bds-select-option>\n      <bds-select-option value=\"2\">Finn Wolfhard</bds-select-option>\n      <bds-select-option value=\"3\">David Harbour</bds-select-option>\n      <bds-select-option value=\"4\">Gaten Matarazzo</bds-select-option>\n      <bds-select-option value=\"5\">Caleb McLaughlin</bds-select-option>\n      <bds-select-option value=\"6\">Noah Schnapp</bds-select-option>\n    </bds-autocomplete>\n  );\n};"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  1 | import React from 'react';\n  2 |\n> 3 | export default {\n    | ^\n  4 |   title: 'Snippets/Search',\n  5 | };\n  6 |"}},"snippets-selects":{"id":"snippets-selects","name":"Selects","path":"./src/snippets/selects.stories.jsx","examples":[{"name":"BasicSelect","snippet":"const BasicSelect = () => {\n  return (\n    <bds-select placeholder=\"nome completo\">\n      <bds-select-option value=\"1\">Millie Bobby</bds-select-option>\n      <bds-select-option value=\"2\">Finn Wolfhard</bds-select-option>\n      <bds-select-option value=\"3\">David Harbour</bds-select-option>\n      <bds-select-option value=\"4\">Gaten Matarazzo</bds-select-option>\n      <bds-select-option value=\"5\">Caleb McLaughlin</bds-select-option>\n      <bds-select-option value=\"6\">Noah Schnapp</bds-select-option>\n    </bds-select>\n  );\n};"},{"name":"SelectDescription","snippet":"const SelectDescription = () => {\n  return (\n    <bds-select placeholder=\"nome completo\">\n      <bds-select-option title-text=\"Millie Bobby\" value=\"1\">\n        Clique aqui para selecionar Millie Bobby\n      </bds-select-option>\n      <bds-select-option title-text=\"Finn Wolfhard\" value=\"2\">\n        Clique aqui para selecionar Finn Wolfhard\n      </bds-select-option>\n      <bds-select-option title-text=\"David Harbour\" value=\"3\">\n        Clique aqui para selecionar David Harbour\n      </bds-select-option>\n      <bds-select-option title-text=\"Gaten Matarazzo\" value=\"4\">\n        Clique aqui para selecionar Gaten Matarazzo\n      </bds-select-option>\n      <bds-select-option title-text=\"Caleb McLaughlin\" value=\"5\">\n        Clique aqui para selecionar Caleb McLaughlin\n      </bds-select-option>\n      <bds-select-option title-text=\"Noah Schnapp\" value=\"6\">\n        Clique aqui para selecionar Noah Schnapp\n      </bds-select-option>\n    </bds-select>\n  );\n};"},{"name":"SelectWithIcon","snippet":"const SelectWithIcon = () => {\n  return (\n    <bds-select placeholder=\"nome completo\">\n      <bds-select-option value=\"1\">\n        <bds-icon slot=\"input-left\" theme=\"outline\" name=\"blip-ideas\" size=\"xxx-small\"></bds-icon>\n        Millie Bobby\n      </bds-select-option>\n      <bds-select-option value=\"2\">\n        <bds-icon slot=\"input-left\" theme=\"outline\" name=\"camera\" size=\"xxx-small\"></bds-icon>\n        Finn Wolfhard\n      </bds-select-option>\n      <bds-select-option value=\"3\">\n        <bds-icon slot=\"input-left\" theme=\"outline\" name=\"cart-shop\" size=\"xxx-small\"></bds-icon>\n        David Harbour\n      </bds-select-option>\n      <bds-select-option value=\"4\">\n        <bds-icon slot=\"input-left\" theme=\"outline\" name=\"builder-test-bot\" size=\"xxx-small\"></bds-icon>\n        Gaten Matarazzo\n      </bds-select-option>\n      <bds-select-option value=\"5\">\n        <bds-icon slot=\"input-left\" theme=\"outline\" name=\"audio\" size=\"xxx-small\"></bds-icon>\n        Caleb McLaughlin\n      </bds-select-option>\n      <bds-select-option value=\"6\">\n        <bds-icon slot=\"input-left\" theme=\"outline\" name=\"eye-open\" size=\"xxx-small\"></bds-icon>\n        Noah Schnapp\n      </bds-select-option>\n    </bds-select>\n  );\n};"},{"name":"SelectStatus","snippet":"const SelectStatus = () => {\n  return (\n    <bds-select placeholder=\"nome completo\">\n      <bds-select-option value=\"1\" status=\"online\">\n        Millie Bobby\n      </bds-select-option>\n      <bds-select-option value=\"2\" status=\"online\">\n        Finn Wolfhard\n      </bds-select-option>\n      <bds-select-option value=\"3\" status=\"offline\">\n        David Harbour\n      </bds-select-option>\n      <bds-select-option value=\"4\" status=\"online\">\n        Gaten Matarazzo\n      </bds-select-option>\n      <bds-select-option value=\"5\" status=\"offline\">\n        Caleb McLaughlin\n      </bds-select-option>\n      <bds-select-option value=\"6\" status=\"offline\">\n        Noah Schnapp\n      </bds-select-option>\n    </bds-select>\n  );\n};"},{"name":"CompleteSelectOption","snippet":"const CompleteSelectOption = () => {\n  return (\n    <bds-select placeholder=\"nome completo\">\n      <bds-select-option title-text=\"Millie Bobby\" value=\"1\" status=\"online\">\n        <bds-icon slot=\"input-left\" theme=\"outline\" name=\"blip-ideas\" size=\"medium\"></bds-icon>\n        Clique aqui para selecionar Millie Bobby\n      </bds-select-option>\n      <bds-select-option title-text=\"Finn Wolfhard\" value=\"2\" status=\"online\">\n        <bds-icon slot=\"input-left\" theme=\"outline\" name=\"camera\" size=\"medium\"></bds-icon>\n        Clique aqui para selecionar Finn Wolfhard\n      </bds-select-option>\n      <bds-select-option title-text=\"David Harbour\" value=\"3\" status=\"offline\">\n        <bds-icon slot=\"input-left\" theme=\"outline\" name=\"cart-shop\" size=\"medium\"></bds-icon>\n        Clique aqui para selecionar David Harbour\n      </bds-select-option>\n      <bds-select-option title-text=\"Gaten Matarazzo\" value=\"4\" status=\"online\">\n        <bds-icon slot=\"input-left\" theme=\"outline\" name=\"builder-test-bot\" size=\"medium\"></bds-icon>\n        Clique aqui para selecionar Gaten Matarazzo\n      </bds-select-option>\n      <bds-select-option title-text=\"Caleb McLaughlin\" value=\"5\" status=\"offline\">\n        <bds-icon slot=\"input-left\" theme=\"outline\" name=\"audio\" size=\"medium\"></bds-icon>\n        Clique aqui para selecionar Caleb McLaughlin\n      </bds-select-option>\n      <bds-select-option title-text=\"Noah Schnapp\" value=\"6\" status=\"offline\">\n        <bds-icon slot=\"input-left\" theme=\"outline\" name=\"eye-open\" size=\"medium\"></bds-icon>\n        Clique aqui para selecionar Noah Schnapp\n      </bds-select-option>\n    </bds-select>\n  );\n};"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  1 | import React from 'react';\n  2 |\n> 3 | export default {\n    | ^\n  4 |   title: 'Snippets/Selects',\n  5 | };\n  6 |"}},"snippets-tables":{"id":"snippets-tables","name":"Tables","path":"./src/snippets/tables.stories.jsx","examples":[{"name":"TableDefault","snippet":"const TableDefault = () => {\n  const DATA = [\n    {\n      id: 1,\n      produto: 'Celular',\n      valor: '1500,00',\n      disponibilidade: 'disponivel',\n      marca: 'Samsung',\n      modelo: 'Galaxy S20',\n      cor: 'Preto',\n    },\n    {\n      id: 2,\n      produto: 'Notebook',\n      valor: '4000,00',\n      disponibilidade: 'indisponivel',\n      marca: 'Apple',\n      modelo: 'MacBook Pro',\n      cor: 'Cinza Espacial',\n    },\n    {\n      id: 3,\n      produto: 'Câmera',\n      valor: '800,00',\n      disponibilidade: 'disponivel',\n      marca: 'Canon',\n      modelo: 'EOS Rebel T7',\n      cor: 'Preto',\n    },\n  ];\n\n  const heading = ['Id', 'Produtos', 'Valor', 'Marca', 'Modelo', 'Cor', 'Disponibilidade'];\n  return (\n    <bds-table>\n      <bds-table-header>\n        <bds-table-row>\n          {heading.map((item, index) => {\n            return <bds-table-th key={index}>{item}</bds-table-th>;\n          })}\n        </bds-table-row>\n      </bds-table-header>\n      <bds-table-body>\n        {DATA.map((row, index) => {\n          return (\n            <bds-table-row key={index}>\n              <bds-table-cell>\n                <bds-typo variant=\"fs-14\">{row.id}</bds-typo>\n              </bds-table-cell>\n              <bds-table-cell>\n                <bds-typo variant=\"fs-14\">{row.produto}</bds-typo>\n              </bds-table-cell>\n              <bds-table-cell>\n                <bds-typo variant=\"fs-14\">{row.valor}</bds-typo>\n              </bds-table-cell>\n              <bds-table-cell>\n                <bds-typo variant=\"fs-14\">{row.marca}</bds-typo>\n              </bds-table-cell>\n              <bds-table-cell>\n                <bds-typo variant=\"fs-14\">{row.modelo}</bds-typo>\n              </bds-table-cell>\n              <bds-table-cell>\n                <bds-typo variant=\"fs-14\">{row.cor}</bds-typo>\n              </bds-table-cell>\n              <bds-table-cell>\n                {row.disponibilidade === 'disponivel' ? (\n                  <bds-chip-tag color=\"success\">{row.disponibilidade}</bds-chip-tag>\n                ) : (\n                  <bds-chip-tag color=\"danger\">{row.disponibilidade}</bds-chip-tag>\n                )}\n              </bds-table-cell>\n            </bds-table-row>\n          );\n        })}\n      </bds-table-body>\n    </bds-table>\n  );\n};"},{"name":"TableWithComponents","snippet":"const TableWithComponents = () => {\n  const DATA = [\n    { usuario: 'Marco Antônio', idade: '20', estadoCivil: 'Solteiro', profissao: 'Professor', status: 'Ativo' },\n    { usuario: 'Julia Alves', idade: '34', estadoCivil: 'Casado', profissao: 'Médico', status: 'Ativo' },\n    { usuario: 'Pedro Guimarães', idade: '46', estadoCivil: 'Solteiro', profissao: 'Designer', status: 'Desativado' },\n  ];\n\n  const heading = ['Usuário', 'Idade', 'Estado Civil', 'Profissão', 'Status', ''];\n\n  return (\n    <bds-table>\n      <bds-table-header>\n        <bds-table-row>\n          {heading.map((item, index) => {\n            return <bds-table-th key={index}>{item}</bds-table-th>;\n          })}\n        </bds-table-row>\n      </bds-table-header>\n      <bds-table-body>\n        {DATA.map((row, index) => {\n          return (\n            <bds-table-row key={index}>\n              <bds-table-cell type=\"action\">\n                <bds-avatar size=\"extra-small\" name={row.usuario}></bds-avatar>\n                <bds-typo variant=\"fs-14\">{row.usuario}</bds-typo>\n              </bds-table-cell>\n              <bds-table-cell>\n                <bds-typo variant=\"fs-14\">{row.idade}</bds-typo>\n              </bds-table-cell>\n              <bds-table-cell>\n                <bds-typo variant=\"fs-14\">{row.estadoCivil}</bds-typo>\n              </bds-table-cell>\n              <bds-table-cell>{row.profissao}</bds-table-cell>\n              <bds-table-cell>\n                {row.status === 'Ativo' ? (\n                  <bds-chip-tag color=\"success\">{row.status}</bds-chip-tag>\n                ) : (\n                  <bds-chip-tag color=\"danger\">{row.status}</bds-chip-tag>\n                )}\n              </bds-table-cell>\n              <bds-table-cell type=\"action\">\n                <bds-button-icon variant=\"secondary\" size=\"short\" icon=\"edit\"></bds-button-icon>\n                <bds-button-icon variant=\"secondary\" size=\"short\" icon=\"trash\"></bds-button-icon>\n              </bds-table-cell>\n            </bds-table-row>\n          );\n        })}\n      </bds-table-body>\n    </bds-table>\n  );\n};"},{"name":"TableSorting","snippet":"const TableSorting = (props) => {\n  const el = document.getElementsByClassName('sb-story');\n  if (el.length !== 0) {\n    el[0].style.width = '800px';\n  }\n  return (\n    <bds-paper width=\"800px\">\n      <bds-data-table\n        sorting=\"true\"\n        column='[\n        {\"heading\": \"ID\", \"value\": \"id\"},\n        {\"heading\": \"Name\", \"value\": \"name\"},\n        {\"heading\": \"Data do primeiro ticket atendido\", \"value\": \"data\"},\n        {\"heading\": \"Profissão\", \"value\": \"profissao\"}\n        ]'\n        options='[\n          { \"id\": \"1\", \"name\": \"Michael Scott\", \"avatar\":\"\", \"data\": \"15/03/2024\", \"profissao\": \"Médico\" },\n          { \"id\": \"2\", \"name\" : \"Dwight Schrute\", \"data\": \"25/06/2024\", \"profissao\": \"Engenheiro\" },\n          { \"id\": \"3\", \"name\" : \"Jim Halpert\", \"avatar\":\"\", \"data\": \"10/09/2024\", \"profissao\": \"Professor\" },\n          { \"id\": \"4\", \"name\" : \"Pam Beesly\", \"avatar\":\"\", \"data\": \"05/11/2024\", \"profissao\": \"Advogado\"},\n          { \"id\": \"5\", \"name\" : \"Ryan Howard\", \"avatar\":\"\", \"data\": \"20/02/2024\", \"profissao\": \"Designer gráfico\" },\n          { \"id\": \"6\", \"name\" : \"Andy Bernard\", \"avatar\":\"\", \"data\": \"08/07/2024\", \"profissao\": \"Contador\"}\n      ]'\n      ></bds-data-table>\n    </bds-paper>\n  );\n};"},{"name":"TableWithFilter","snippet":"const TableWithFilter = () => {\n  const DATA = [\n    {\n      id: 1,\n      produto: 'Celular',\n      valor: '1500,00',\n      disponibilidade: 'disponivel',\n      marca: 'Samsung',\n      modelo: 'Galaxy S20',\n      cor: 'Preto',\n    },\n    {\n      id: 2,\n      produto: 'Notebook',\n      valor: '4000,00',\n      disponibilidade: 'indisponivel',\n      marca: 'Apple',\n      modelo: 'MacBook Pro',\n      cor: 'Cinza Espacial',\n    },\n    {\n      id: 3,\n      produto: 'Câmera',\n      valor: '800,00',\n      disponibilidade: 'disponivel',\n      marca: 'Canon',\n      modelo: 'EOS Rebel T7',\n      cor: 'Preto',\n    },\n  ];\n\n  const heading = ['id', 'Produtos', 'Valor', 'Marca', 'Modelo', 'Cor', 'Disponibilidade'];\n\n  const [filterText, setFilterText] = useState('');\n\n  useEffect(() => {\n    const handleInputChange = (event) => {\n      setFilterText(event.detail.value);\n    };\n\n    document.getElementById('input').addEventListener('bdsChange', handleInputChange);\n\n    return () => {\n      document.getElementById('input').removeEventListener('bdsChange', handleInputChange);\n    };\n  }, []);\n\n  const filteredData = DATA.filter((row) =>\n    Object.values(row).some(\n      (value) => typeof value === 'string' && value.toLowerCase().includes(filterText.toLowerCase()),\n    ),\n  );\n\n  return (\n    <bds-paper>\n      <bds-grid padding=\"1\" direction=\"column\" gap=\"2\">\n        <bds-input id=\"input\" placeholder=\"Filtrar...\"></bds-input>\n        <bds-table>\n          <bds-table-header>\n            <bds-table-row>\n              {heading.map((item, index) => {\n                return <bds-table-th key={index}>{item}</bds-table-th>;\n              })}\n            </bds-table-row>\n          </bds-table-header>\n          <bds-table-body>\n            {filteredData.map((row, index) => {\n              return (\n                <bds-table-row key={index}>\n                  <bds-table-cell>\n                    <bds-typo variant=\"fs-14\">{row.id}</bds-typo>\n                  </bds-table-cell>\n                  <bds-table-cell>\n                    <bds-typo variant=\"fs-14\">{row.produto}</bds-typo>\n                  </bds-table-cell>\n                  <bds-table-cell>\n                    <bds-typo variant=\"fs-14\">{row.valor}</bds-typo>\n                  </bds-table-cell>\n                  <bds-table-cell>\n                    <bds-typo variant=\"fs-14\">{row.marca}</bds-typo>\n                  </bds-table-cell>\n                  <bds-table-cell>\n                    <bds-typo variant=\"fs-14\">{row.modelo}</bds-typo>\n                  </bds-table-cell>\n                  <bds-table-cell>\n                    <bds-typo variant=\"fs-14\">{row.cor}</bds-typo>\n                  </bds-table-cell>\n                  <bds-table-cell>\n                    {row.disponibilidade === 'disponivel' ? (\n                      <bds-chip-tag color=\"success\">{row.disponibilidade}</bds-chip-tag>\n                    ) : (\n                      <bds-chip-tag color=\"danger\">{row.disponibilidade}</bds-chip-tag>\n                    )}\n                  </bds-table-cell>\n                </bds-table-row>\n              );\n            })}\n          </bds-table-body>\n        </bds-table>\n      </bds-grid>\n    </bds-paper>\n  );\n};"},{"name":"TablePagination","snippet":"const TablePagination = () => {\n  const DATA = [\n    {\n      id: 1,\n      produto: 'Celular',\n      valor: '1500,00',\n      disponibilidade: 'disponivel',\n      marca: 'Samsung',\n      modelo: 'Galaxy S20',\n      cor: 'Preto',\n    },\n    {\n      id: 2,\n      produto: 'Notebook',\n      valor: '4000,00',\n      disponibilidade: 'indisponivel',\n      marca: 'Apple',\n      modelo: 'MacBook Pro',\n      cor: 'Cinza Espacial',\n    },\n    {\n      id: 3,\n      produto: 'Câmera',\n      valor: '800,00',\n      disponibilidade: 'disponivel',\n      marca: 'Canon',\n      modelo: 'EOS Rebel T7',\n      cor: 'Preto',\n    },\n    {\n      id: 4,\n      produto: 'Câmera',\n      valor: '800,00',\n      disponibilidade: 'disponivel',\n      marca: 'Canon',\n      modelo: 'EOS Rebel T7',\n      cor: 'Preto',\n    },\n    {\n      id: 5,\n      produto: 'Notebook',\n      valor: '4000,00',\n      disponibilidade: 'indisponivel',\n      marca: 'Apple',\n      modelo: 'MacBook Pro',\n      cor: 'Cinza Espacial',\n    },\n    {\n      id: 6,\n      produto: 'Câmera',\n      valor: '800,00',\n      disponibilidade: 'disponivel',\n      marca: 'Canon',\n      modelo: 'EOS Rebel T7',\n      cor: 'Preto',\n    },\n    {\n      id: 7,\n      produto: 'Câmera',\n      valor: '800,00',\n      disponibilidade: 'disponivel',\n      marca: 'Canon',\n      modelo: 'EOS Rebel T7',\n      cor: 'Preto',\n    },\n    {\n      id: 8,\n      produto: 'Smartwatch',\n      valor: '600,00',\n      disponibilidade: 'disponivel',\n      marca: 'Xiaomi',\n      modelo: 'Mi Band 6',\n      cor: 'Preto',\n    },\n    {\n      id: 9,\n      produto: 'Smart TV',\n      valor: '2500,00',\n      disponibilidade: 'disponivel',\n      marca: 'LG',\n      modelo: 'OLED C1',\n      cor: 'Preto',\n    },\n    {\n      id: 10,\n      produto: 'Fones de Ouvido',\n      valor: '200,00',\n      disponibilidade: 'disponivel',\n      marca: 'Sony',\n      modelo: 'WH-1000XM4',\n      cor: 'Preto',\n    },\n  ];\n\n  const heading = ['id', 'Produtos', 'Valor', 'Marca', 'Modelo', 'Cor', 'Disponibilidade'];\n\n  const itemsPerPage = 4;\n\n  const [currentPage, setCurrentPage] = useState(1);\n  const [filteredData, setFilteredData] = useState(DATA);\n\n  useEffect(() => {\n    setFilteredData(DATA);\n  }, []);\n\n  useEffect(() => {\n    document.getElementById('pagination').addEventListener('bdsPaginationChange', handlePageChange);\n  });\n\n  const startIndex = (currentPage - 1) * itemsPerPage;\n  const endIndex = Math.min(startIndex + itemsPerPage, filteredData.length);\n  const currentItems = filteredData.slice(startIndex, endIndex);\n\n  const handlePageChange = (newPage) => {\n    setCurrentPage(newPage.detail);\n  };\n\n  return (\n    <bds-paper>\n      <bds-grid padding=\"1\" direction=\"column\" gap=\"2\">\n        <bds-table>\n          <bds-table-header>\n            <bds-table-row>\n              {heading.map((item, index) => {\n                return <bds-table-th key={index}>{item}</bds-table-th>;\n              })}\n            </bds-table-row>\n          </bds-table-header>\n          <bds-table-body>\n            {currentItems.map((row, index) => {\n              return (\n                <bds-table-row key={index}>\n                  <bds-table-cell>\n                    <bds-typo variant=\"fs-14\">{row.id}</bds-typo>\n                  </bds-table-cell>\n\n                  <bds-table-cell>\n                    <bds-typo variant=\"fs-14\">{row.produto}</bds-typo>\n                  </bds-table-cell>\n                  <bds-table-cell>\n                    <bds-typo variant=\"fs-14\">{row.valor}</bds-typo>\n                  </bds-table-cell>\n                  <bds-table-cell>\n                    <bds-typo variant=\"fs-14\">{row.marca}</bds-typo>\n                  </bds-table-cell>\n                  <bds-table-cell>\n                    <bds-typo variant=\"fs-14\">{row.modelo}</bds-typo>\n                  </bds-table-cell>\n                  <bds-table-cell>\n                    <bds-typo variant=\"fs-14\">{row.cor}</bds-typo>\n                  </bds-table-cell>\n                  <bds-table-cell>\n                    {row.disponibilidade === 'disponivel' ? (\n                      <bds-chip-tag color=\"success\">{row.disponibilidade}</bds-chip-tag>\n                    ) : (\n                      <bds-chip-tag color=\"danger\">{row.disponibilidade}</bds-chip-tag>\n                    )}\n                  </bds-table-cell>\n                </bds-table-row>\n              );\n            })}\n          </bds-table-body>\n        </bds-table>\n        <bds-grid xxs=\"12\" justify-content=\"flex-end\">\n          <bds-pagination id=\"pagination\" pages={Math.ceil(filteredData.length / itemsPerPage)}></bds-pagination>\n        </bds-grid>\n      </bds-grid>\n    </bds-paper>\n  );\n};"},{"name":"TableDense","snippet":"const TableDense = () => {\n  const DATA = [\n    {\n      id: 1,\n      produto: 'Celular',\n      valor: '1500,00',\n      disponibilidade: 'disponivel',\n      marca: 'Samsung',\n      modelo: 'Galaxy S20',\n      cor: 'Preto',\n    },\n    {\n      id: 2,\n      produto: 'Notebook',\n      valor: '4000,00',\n      disponibilidade: 'indisponivel',\n      marca: 'Apple',\n      modelo: 'MacBook Pro',\n      cor: 'Cinza Espacial',\n    },\n    {\n      id: 3,\n      produto: 'Câmera',\n      valor: '800,00',\n      disponibilidade: 'disponivel',\n      marca: 'Canon',\n      modelo: 'EOS Rebel T7',\n      cor: 'Preto',\n    },\n    {\n      id: 4,\n      produto: 'Câmera',\n      valor: '800,00',\n      disponibilidade: 'disponivel',\n      marca: 'Canon',\n      modelo: 'EOS Rebel T7',\n      cor: 'Preto',\n    },\n    {\n      id: 5,\n      produto: 'Notebook',\n      valor: '4000,00',\n      disponibilidade: 'indisponivel',\n      marca: 'Apple',\n      modelo: 'MacBook Pro',\n      cor: 'Cinza Espacial',\n    },\n    {\n      id: 6,\n      produto: 'Câmera',\n      valor: '800,00',\n      disponibilidade: 'disponivel',\n      marca: 'Canon',\n      modelo: 'EOS Rebel T7',\n      cor: 'Preto',\n    },\n    {\n      id: 7,\n      produto: 'Câmera',\n      valor: '800,00',\n      disponibilidade: 'disponivel',\n      marca: 'Canon',\n      modelo: 'EOS Rebel T7',\n      cor: 'Preto',\n    },\n  ];\n\n  const heading = ['id', 'Produtos', 'Valor', 'Marca', 'Modelo', 'Cor', 'Disponibilidade'];\n\n  return (\n    <bds-paper>\n      <bds-grid padding=\"1\" direction=\"column\" gap=\"2\">\n        <bds-table dense-table=\"true\">\n          <bds-table-header>\n            <bds-table-row>\n              {heading.map((item, index) => {\n                return <bds-table-th key={index}>{item}</bds-table-th>;\n              })}\n            </bds-table-row>\n          </bds-table-header>\n          <bds-table-body>\n            {DATA.map((row, index) => {\n              return (\n                <bds-table-row key={index}>\n                  <bds-table-cell>\n                    <bds-typo variant=\"fs-14\">{row.id}</bds-typo>\n                  </bds-table-cell>\n                  <bds-table-cell>\n                    <bds-typo variant=\"fs-14\">{row.produto}</bds-typo>\n                  </bds-table-cell>\n                  <bds-table-cell>\n                    <bds-typo variant=\"fs-14\">{row.valor}</bds-typo>\n                  </bds-table-cell>\n                  <bds-table-cell>\n                    <bds-typo variant=\"fs-14\">{row.marca}</bds-typo>\n                  </bds-table-cell>\n                  <bds-table-cell>\n                    <bds-typo variant=\"fs-14\">{row.modelo}</bds-typo>\n                  </bds-table-cell>\n                  <bds-table-cell>\n                    <bds-typo variant=\"fs-14\">{row.cor}</bds-typo>\n                  </bds-table-cell>\n                  <bds-table-cell>\n                    {row.disponibilidade === 'disponivel' ? (\n                      <bds-chip-tag color=\"success\">{row.disponibilidade}</bds-chip-tag>\n                    ) : (\n                      <bds-chip-tag color=\"danger\">{row.disponibilidade}</bds-chip-tag>\n                    )}\n                  </bds-table-cell>\n                </bds-table-row>\n              );\n            })}\n          </bds-table-body>\n        </bds-table>\n      </bds-grid>\n    </bds-paper>\n  );\n};"},{"name":"TableScrollable","snippet":"const TableScrollable = () => {\n  const DATA = [\n    {\n      id: 1,\n      produto: 'Celular',\n      valor: '1500,00',\n      disponibilidade: 'disponivel',\n      marca: 'Samsung',\n      modelo: 'Galaxy S20',\n      cor: 'Preto',\n      anoLancamento: 2020,\n      peso: '150g',\n      memoriaRAM: '8GB',\n    },\n    {\n      id: 2,\n      produto: 'Notebook',\n      valor: '4000,00',\n      disponibilidade: 'indisponivel',\n      marca: 'Apple',\n      modelo: 'MacBook Pro',\n      cor: 'Cinza Espacial',\n      anoLancamento: 2021,\n      peso: '1.4kg',\n      memoriaRAM: '16GB',\n    },\n    {\n      id: 3,\n      produto: 'Câmera',\n      valor: '800,00',\n      disponibilidade: 'disponivel',\n      marca: 'Canon',\n      modelo: 'EOS Rebel T7',\n      cor: 'Preto',\n      anoLancamento: 2019,\n      peso: '500g',\n      memoriaRAM: '-',\n    },\n    {\n      id: 4,\n      produto: 'Câmera',\n      valor: '800,00',\n      disponibilidade: 'disponivel',\n      marca: 'Canon',\n      modelo: 'EOS Rebel T7',\n      cor: 'Preto',\n      anoLancamento: 2020,\n      peso: '500g',\n      memoriaRAM: '-',\n    },\n  ];\n\n  const heading = [\n    'id',\n    'Produtos',\n    'Valor',\n    'Marca',\n    'Modelo',\n    'Cor',\n    'Disponibilidade',\n    'Ano de Lançamento',\n    'Peso',\n    'Memoria RAM',\n  ];\n\n  return (\n    <bds-paper width=\"600px\">\n      <bds-grid xxs=\"12\" padding=\"1\" direction=\"column\" gap=\"2\">\n        <bds-table scrollable=\"true\">\n          <bds-table-header>\n            <bds-table-row>\n              {heading.map((item, index) => {\n                return <bds-table-th key={index}>{item}</bds-table-th>;\n              })}\n            </bds-table-row>\n          </bds-table-header>\n          <bds-table-body>\n            {DATA.map((row, index) => {\n              return (\n                <bds-table-row key={index}>\n                  <bds-table-cell>\n                    <bds-typo variant=\"fs-14\">{row.id}</bds-typo>\n                  </bds-table-cell>\n                  <bds-table-cell>\n                    <bds-typo variant=\"fs-14\">{row.produto}</bds-typo>\n                  </bds-table-cell>\n                  <bds-table-cell>\n                    <bds-typo variant=\"fs-14\">{row.valor}</bds-typo>\n                  </bds-table-cell>\n                  <bds-table-cell>\n                    <bds-typo variant=\"fs-14\">{row.marca}</bds-typo>\n                  </bds-table-cell>\n                  <bds-table-cell>\n                    <bds-typo variant=\"fs-14\">{row.modelo}</bds-typo>\n                  </bds-table-cell>\n                  <bds-table-cell>\n                    <bds-typo variant=\"fs-14\">{row.cor}</bds-typo>\n                  </bds-table-cell>\n                  <bds-table-cell>\n                    <bds-typo variant=\"fs-14\">{row.anoLancamento}</bds-typo>\n                  </bds-table-cell>\n                  <bds-table-cell>\n                    <bds-typo variant=\"fs-14\">{row.peso}</bds-typo>\n                  </bds-table-cell>\n                  <bds-table-cell>\n                    <bds-typo variant=\"fs-14\">{row.memoriaRAM}</bds-typo>\n                  </bds-table-cell>\n                  <bds-table-cell>\n                    {row.disponibilidade === 'disponivel' ? (\n                      <bds-chip-tag color=\"success\">{row.disponibilidade}</bds-chip-tag>\n                    ) : (\n                      <bds-chip-tag color=\"danger\">{row.disponibilidade}</bds-chip-tag>\n                    )}\n                  </bds-table-cell>\n                </bds-table-row>\n              );\n            })}\n          </bds-table-body>\n        </bds-table>\n      </bds-grid>\n    </bds-paper>\n  );\n};"},{"name":"TableCollapse","snippet":"const TableCollapse = () => {\n  const DATA = [\n    { id: 1, produto: 'Celular', valor: '1500,00', disponibilidade: 'disponivel', descricao: 'Descrição do celular, incluindo modelo, marca e especificações técnicas. Este celular possui uma variedade de recursos avançados, como uma câmera de alta resolução, processador rápido e tela de alta qualidade. Ele está disponível em várias cores e tamanhos, e oferece opções flexíveis de pagamento. Com garantia e política de devolução, este celular é uma escolha popular entre os consumidores que buscam qualidade e desempenho.' },\n    { id: 2, produto: 'Notebook', valor: '4000,00', disponibilidade: 'indisponivel', descricao: 'Descrição do notebook, incluindo marca, modelo e configurações detalhadas. Este notebook oferece um desempenho excepcional, com um processador potente, grande capacidade de armazenamento e uma tela de alta resolução. Embora a garantia estendida esteja disponível, este produto é atualmente indisponível devido à alta demanda. Fique atento às próximas promoções e descontos especiais para este notebook.' },\n    { id: 3, produto: 'Livros', valor: '60,00', disponibilidade: 'disponivel', descricao: 'Descrição dos livros disponíveis, incluindo autor, título e gênero literário. Com uma variedade de títulos emocionantes e informativos, estes livros oferecem uma experiência de leitura envolvente para todos os gostos. Desde romances cativantes até obras acadêmicas, há algo para todos. Além disso, aproveite as promoções especiais, como descontos em compras de múltiplos livros, para expandir sua biblioteca pessoal.' },\n  ];\n\n  const heading = ['id', 'Produtos', 'Valor', 'Disponibilidade'];\n\n  return (\n    <bds-grid xxs=\"12\" direction=\"row\" padding=\"3\" flex-wrap=\"wrap\" gap=\"2\">\n\n\n      <bds-grid xxs=\"12\">\n        <bds-table collapse={true}>\n          <bds-table-header>\n            <bds-table-row>\n              {heading.map((item, index) => {\n                return <bds-table-th key={index}>{item}</bds-table-th>;\n              })}\n            </bds-table-row>\n          </bds-table-header>\n\n          {DATA.map((row, index) => {\n            return (\n              <bds-table-body key={index}>\n                <bds-table-row data-target={index}>\n                  <bds-table-cell>\n                    <bds-typo variant=\"fs-14\">{row.id}</bds-typo>\n                  </bds-table-cell>\n                  <bds-table-cell>\n                    <bds-typo variant=\"fs-14\">{row.produto}</bds-typo>\n                  </bds-table-cell>\n                  <bds-table-cell>\n                    <bds-typo variant=\"fs-14\">{row.valor}</bds-typo>\n                  </bds-table-cell>\n                  <bds-table-cell type=\"custom\">\n                    {row.disponibilidade === 'disponivel' ? (\n                      <bds-chip-tag color=\"success\">{row.disponibilidade}</bds-chip-tag>\n                    ) : (\n                      <bds-chip-tag color=\"danger\">{row.disponibilidade}</bds-chip-tag>\n                    )}\n                  </bds-table-cell>\n                </bds-table-row>\n\n                <bds-table-row body-collapse={index}>\n                  <bds-typo>{row.descricao}</bds-typo>\n                </bds-table-row>\n              </bds-table-body>\n            );\n          })}\n        </bds-table>\n      </bds-grid>\n\n    </bds-grid>\n  );\n};"},{"name":"TableSelected","snippet":"const TableSelected = () => {\n  const DATA = [\n    {\n      id: 1,\n      produto: 'Celular',\n      valor: '1500,00',\n      disponibilidade: 'disponivel',\n      marca: 'Samsung',\n      modelo: 'Galaxy S20',\n      cor: 'Preto',\n    },\n    {\n      id: 2,\n      produto: 'Notebook',\n      valor: '4000,00',\n      disponibilidade: 'indisponivel',\n      marca: 'Apple',\n      modelo: 'MacBook Pro',\n      cor: 'Cinza Espacial',\n    },\n    {\n      id: 3,\n      produto: 'Câmera',\n      valor: '800,00',\n      disponibilidade: 'disponivel',\n      marca: 'Canon',\n      modelo: 'EOS Rebel T7',\n      cor: 'Preto',\n    },\n  ];\n\n  const heading = ['Id', 'Produtos', 'Valor', 'Marca', 'Modelo', 'Cor', 'Disponibilidade'];\n\n  const [selectedItems, setSelectedItems] = useState([]);\n  const [selectAll, setSelectAll] = useState(false);\n\n  const handleCheckboxChange = (id) => {\n    setSelectedItems((prevSelectedItems) => {\n      if (prevSelectedItems.includes(id)) {\n        return prevSelectedItems.filter((item) => item !== id);\n      } else {\n        return [...prevSelectedItems, id];\n      }\n    });\n  };\n\n  const handleSelectAllChange = (event) => {\n    const isChecked = event.detail.checked;\n    setSelectAll(isChecked);\n\n    if (isChecked) {\n      setSelectedItems(DATA.map((row) => row.id));\n    } else {\n      setSelectedItems([]);\n    }\n  };\n\n  return (\n    <BdsGrid direction='column' gap='2'>\n      <BdsGrid justifyContent='space-between'>\n        <BdsTypo>{selectedItems.length === 0 ? \"Nenhum\" : selectedItems.length === DATA.length ? \"Todos\" : selectedItems.length} Selecionados</BdsTypo>\n      <bds-button-group color=\"content\">\n        <bds-button>Selecionar Todos</bds-button>\n        <bds-button icon-left=\"share\">Compartilhar</bds-button>\n        <bds-button icon-left=\"edit\">Editar</bds-button>\n        <bds-button icon-left=\"trash\">Deletar</bds-button>\n      </bds-button-group>\n      </BdsGrid>\n      <BdsTable>\n        <BdsTableHeader>\n          <BdsTableRow>\n            <BdsTableTh>\n              <BdsCheckbox\n                checked={selectAll}\n                onBdsChange={handleSelectAllChange}\n              />\n            </BdsTableTh>\n            {heading.map((item, index) => (\n              <BdsTableTh key={index}>{item}</BdsTableTh>\n            ))}\n          </BdsTableRow>\n        </BdsTableHeader>\n\n        <BdsTableBody>\n          {DATA.map((row, index) => (\n            <BdsTableRow key={index}>\n              <BdsTableCell>\n                <BdsCheckbox\n                  checked={selectedItems.includes(row.id)}\n                  onBdsChange={() => handleCheckboxChange(row.id)}\n                />\n              </BdsTableCell>\n              <BdsTableCell>\n                <BdsTypo variant=\"fs-14\">{row.id}</BdsTypo>\n              </BdsTableCell>\n              <BdsTableCell>\n                <BdsTypo variant=\"fs-14\">{row.produto}</BdsTypo>\n              </BdsTableCell>\n              <BdsTableCell>\n                <BdsTypo variant=\"fs-14\">{row.valor}</BdsTypo>\n              </BdsTableCell>\n              <BdsTableCell>\n                <BdsTypo variant=\"fs-14\">{row.marca}</BdsTypo>\n              </BdsTableCell>\n              <BdsTableCell>\n                <BdsTypo variant=\"fs-14\">{row.modelo}</BdsTypo>\n              </BdsTableCell>\n              <BdsTableCell>\n                <BdsTypo variant=\"fs-14\">{row.cor}</BdsTypo>\n              </BdsTableCell>\n              <BdsTableCell>\n                {row.disponibilidade === 'disponivel' ? (\n                  <BdsChipTag color=\"success\">{row.disponibilidade}</BdsChipTag>\n                ) : (\n                  <BdsChipTag color=\"danger\">{row.disponibilidade}</BdsChipTag>\n                )}\n              </BdsTableCell>\n            </BdsTableRow>\n          ))}\n        </BdsTableBody>\n      </BdsTable>\n    </BdsGrid>\n  );\n};"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  13 | } from '../../blip-ds-react/dist/components';\n  14 |\n> 15 | export default {\n     | ^\n  16 |   title: 'Snippets/Tables',\n  17 | };\n  18 |"}},"templates-portal-sidebar-content":{"id":"templates-portal-sidebar-content","name":"Sidebar + Content","path":"./src/templates/portal/sidebar+content.stories.jsx","examples":[{"name":"SidebarContent","snippet":"const SidebarContent = (args) => (\n  <BdsGrid direction='row' xxs='12' height='100%'>\n    {/* Sidebar */}\n    <BdsGrid>\n      <BdsSidebar width=\"310px\" type='fixed' background='surface-1'>\n        <BdsGrid slot='body'>\n          <BdsNavTreeGroup collapse=\"single\">\n            <BdsNavTree text=\"Titulo\" secondaryText=\"Breve descrição\"></BdsNavTree>\n            <BdsNavTree text=\"Titulo\" secondaryText=\"Breve descrição\"></BdsNavTree>\n            <BdsNavTree text=\"Titulo\" secondaryText=\"Breve descrição\" icon='heart'>\n            <BdsNavTreeItem text=\"Titulo\"></BdsNavTreeItem>\n            <BdsNavTreeItem text=\"Titulo\"></BdsNavTreeItem>\n              <BdsNavTreeItem text=\"Titulo\">\n                <BdsNavTreeItem text=\"Titulo\">\n                  <BdsNavTreeItem text=\"Titulo\"></BdsNavTreeItem>\n                </BdsNavTreeItem>\n              </BdsNavTreeItem>\n            </BdsNavTree>\n            <BdsNavTree text=\"Titulo\" secondaryText=\"Breve descrição\">\n              <BdsNavTreeItem text=\"Titulo\"></BdsNavTreeItem>\n            </BdsNavTree>\n          </BdsNavTreeGroup>\n        </BdsGrid>\n      </BdsSidebar>\n    </BdsGrid>\n    <BdsGrid bgColor='color-surface-2' xxs='auto'>\n      <BdsGrid container xxs='12' direction='column'>\n        <BdsGrid margin='x-auto' padding='y-4' justifyContent='space-between' xxs='12'>\n          <BdsGrid direction='row' alignItems='center' gap=\"1\">\n            <BdsButton iconLeft='arrow-left' color='content' variant='text'></BdsButton>\n            <BdsTypo variant='fs-24' bold='bold' margin=\"false\">Título da página 24px-h3, Bold</BdsTypo>\n\n          </BdsGrid>\n          <BdsGrid gap='2'>\n            <BdsButton iconLeft='info' variant='outline' color='content'></BdsButton>\n            <BdsButton variant='outline' color='content'>Verbo + complemento</BdsButton>\n            <BdsButton>Verbo + complemento</BdsButton>\n          </BdsGrid>\n        </BdsGrid>\n        <BdsGrid xxs='6' margin='y-4'>\n          <BdsInput placeholder='Digite o nome do produto que está procurando' icon='search'></BdsInput>\n        </BdsGrid>\n        <BdsGrid margin='y-4' flexWrap='wrap'>\n          <BdsGrid xxs='6' height='260px'>\n            <BdsPaper width='100%'>\n              <BdsGrid padding='2' direction='column'>\n                <BdsGrid alignItems='center' gap='1'>\n                  <BdsTypo variant='fs-20' bold='bold' margin='false'>Título do card 1, $fs-20-h4/Bold</BdsTypo>\n                  <BdsTooltip tooltipText='Top Center'><BdsIcon name='info' size='x-small'></BdsIcon></BdsTooltip>\n                </BdsGrid>\n                <BdsGrid>\n                  <BdsTypo>Subtítulo do card 1, explicando conteúdo</BdsTypo>\n                </BdsGrid>\n              </BdsGrid>\n            </BdsPaper>\n          </BdsGrid>\n          <BdsGrid xxs='6' height='260px'>\n            <BdsPaper width='100%'>\n              <BdsGrid padding='2' direction='column'>\n                <BdsGrid alignItems='center' gap='1'>\n                  <BdsTypo variant='fs-20' bold='bold' margin='false'>Título do card 2, $fs-20-h4/Bold</BdsTypo>\n                </BdsGrid>\n              </BdsGrid>\n            </BdsPaper>\n          </BdsGrid>\n          <BdsGrid xxs='12' padding='t-2' height='260px'>\n            <BdsPaper width='100%'>\n              <BdsGrid padding='2' direction='column'>\n                <BdsGrid alignItems='center' gap='1'>\n                  <BdsTypo variant='fs-20' bold='bold' margin='false'>Título do card 3, $fs-20-h4/Bold</BdsTypo>\n                </BdsGrid>\n              </BdsGrid>\n            </BdsPaper>\n          </BdsGrid>\n        </BdsGrid>\n\n      </BdsGrid>\n\n    </BdsGrid>\n  </BdsGrid>\n);"}],"jsDocTags":{},"error":{"name":"No meta.component specified","message":"Specify meta.component for the component to be included in the manifest.\n  14 | } from '../../../blip-ds-react/dist/components';\n  15 |\n> 16 | export default {\n     | ^\n  17 |   title: 'Templates/Portal/Sidebar + Content',\n  18 | };\n  19 |"}}}}