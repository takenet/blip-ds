{"version":3,"file":"badge.js","sourceRoot":"","sources":["../../../../src/components/badge/badge.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, h, Host, Prop, State, Watch } from '@stencil/core';\n\nexport type Shape = 'circle' | 'triangle' | 'triangle-reverse' | 'polygon' | 'square';\n\nexport type Color = 'system' | 'danger' | 'warning' | 'success' | 'neutral';\n\nexport type Type = 'status' | 'icon' | 'number' | 'empty';\n\n@Component({\n  tag: 'bds-badge',\n  styleUrl: 'badge.scss',\n  shadow: true,\n})\nexport class Badge {\n  /**\n   * State for keep the value of the type.\n   */\n  @State() type?: Type = 'status';\n  /**\n   * Set the color of the component.\n   */\n  @Prop() color?: string = 'system';\n  /**\n   * Set the shape of the component.\n   */\n  @Prop() shape?: Shape = 'circle';\n  /**\n   * Set witch icon will be render inside the component.\n   */\n  @Prop() icon?: string = null;\n  /**\n   * Set the text in shape circle. Is just alow numbers, but if the number pass 999 a symbol '+' will be render.\n   */\n  @Prop() number?: number;\n  /**\n   * If true, actived the pulse animation.\n   */\n  @Prop() animation?: boolean = false;\n\n  /**\n   * Data test is the prop to specifically test the component action object.\n   */\n  @Prop() dataTest?: string = null;\n\n  componentWillLoad() {\n    if (this.icon === null && this.number) {\n      this.type = 'number';\n    } else if (!this.number && this.icon) {\n      this.type = 'icon';\n    } else if (this.number && this.icon) {\n      this.type = 'number';\n    } else if (this.number === 0) {\n      this.type = 'empty';\n    }\n  }\n\n  @Watch('number')\n  numberChanged(newNumber: number) {\n    if (newNumber === 0) {\n      this.type = 'empty';\n    } else if (this.icon === null && newNumber !== null) {\n      this.type = 'number';\n    }\n  }\n\n  render() {\n    return (\n      <Host>\n        <div\n          class={{\n            chip_badge: true,\n            chip_size: this.number !== 0 ? true : false,\n            [`chip_badge--${this.shape}`]: true,\n            [`chip_badge--${this.color}`]: true,\n          }}\n          data-test={this.dataTest}\n        >\n          {this.type === 'status' && (\n            <div\n              class={{\n                status: true,\n                [`status--${this.shape}`]: true,\n                [`color--${this.color}`]: true,\n                [`status--circle-${this.animation}`]: true,\n              }}\n            ></div>\n          )}\n          {this.type === 'icon' && (\n            <div class={{ icon: true, [`icon--${this.shape}`]: true }}>\n              <div class={{ [`color--${this.color}`]: true, trim: true, [`trim-${this.animation}`]: true }}></div>\n              <bds-icon size=\"xxx-small\" name={this.icon}></bds-icon>\n            </div>\n          )}\n          {this.type === 'number' && (\n            <div\n              class={{\n                number: true,\n                [`color--${this.color}`]: true,\n                [`number--${this.animation}`]: true,\n              }}\n            >\n              <bds-typo class=\"number_text\" variant=\"fs-12\" bold=\"bold\" margin={false}>\n                {this.number >= 999 ? '999+' : this.number}\n              </bds-typo>\n            </div>\n          )}\n          {this.type === 'empty' && (\n            <div\n              class={{\n                empty: true,\n                [`color--${this.color}`]: true,\n                [`empty--${this.shape}`]: true,\n                [`empty--${this.animation}`]: true,\n              }}\n            ></div>\n          )}\n        </div>\n      </Host>\n    );\n  }\n}\n"]}