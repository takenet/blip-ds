{"file":"p-BiURb2Nl.js","mappings":";;;;;;;AAAA,MAAM,eAAe,GAAG,kIAAkI;;MCU7I,eAAe,iBAAAA,kBAAA,CAAA,MAAA,eAAA,SAAAC,CAAA,CAAA;AAN5B,IAAA,WAAA,GAAA;;;;AASE;;AAEG;AACK,QAAA,IAAI,CAAA,IAAA,GAAqB,SAAS;AAW1C;;AAEG;AACK,QAAA,IAAQ,CAAA,QAAA,GAAY,IAAI;;AAOhC,QAAA,IAAsB,CAAA,sBAAA,GAAG,MAAK;AAC5B,YAAA,MAAM,aAAa,GAAG,WAAW,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;AAC9E,YAAA,MAAM,MAAM,GAAG,CAA4C,yCAAA,EAAA,aAAa,CAA6B,0BAAA,EAAA,IAAI,CAAC,IAAI,CAAI,CAAA,EAAA,IAAI,CAAC,IAAI,OAAO;YAClI,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,KAC1B,QAAQ,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,CAAC,IAAI,KAAI;AAC5B,gBAAA,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,CAAS,MAAA,EAAA,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAA,IAAA,CAAM,CAAC;aACvE,CAAC,CACH;AACH,SAAC;AAuBF;IApCC,iBAAiB,GAAA;QACf,IAAI,CAAC,sBAAsB,EAAE;;IAc/B,MAAM,GAAA;AACJ,QAAA,QACE,EAAC,IAAI,EAAA,EAAA,GAAA,EAAA,0CAAA,EACH,IAAI,EAAC,KAAK,EACV,KAAK,EAAE;AACL,gBAAA,kBAAkB,EAAE,IAAI;AACzB,aAAA,EAEA,EAAA,IAAI,CAAC,mBAAmB,IACvB,WACE,SAAS,EAAE,KAAK,EAChB,GAAG,EAAE,CAAA,0BAAA,EAA6B,IAAI,CAAC,mBAAmB,CAAA,CAAE,EAC5D,GAAG,EAAE,IAAI,CAAC,GAAG,EAAA,WAAA,EACF,IAAI,CAAC,QAAQ,GACxB,KAEF,CAAA,CAAA,KAAA,EAAA,EAAK,KAAK,EAAC,SAAS,eAAY,IAAI,CAAC,QAAQ,EAAQ,CAAA,CACtD,CACI;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["__stencil_proxyCustomElement","HTMLElement"],"sources":["src/components/illustration/illustration.scss?tag=bds-illustration&encapsulation=shadow","src/components/illustration/illustration.tsx"],"sourcesContent":[":host {\n  .illustration {\n    display: flex;\n    height: 100%;\n    width: auto;\n  }\n  \n}\n\n:host(.bds-illustration) {\n  img {\n    width: 100%;\n    height: 100%;\n  }\n}\n","import { Component, h, Host, Prop, State } from '@stencil/core';\nimport { IllustrationType } from './illustration-interface';\nimport packageJson from '../../../package.json';\n\n@Component({\n  tag: 'bds-illustration',\n  assetsDirs: ['svg'],\n  styleUrl: 'illustration.scss',\n  shadow: true,\n})\nexport class BdsIllustration {\n  @State() private IllustrationContent?: string;\n\n  /**\n   * Specifies the type to use. Can be: 'default'.\n   */\n  @Prop() type: IllustrationType = 'default';\n  /**\n   * Specifies the name of illustration. Verify the names on illustration tokens.\n   */\n  @Prop() name: string;\n\n  /**\n   * Alternative text for the image.\n   */\n  @Prop() alt?: string;\n\n  /**\n   * Data test is the prop to specifically test the component action object.\n   */\n  @Prop() dataTest?: string = null;\n\n  componentWillLoad() {\n    this.setIllustrationContent();\n  }\n\n  /**Function to map the svg and call the \"formatSvg\" function */\n  setIllustrationContent = () => {\n    const tokensVersion = packageJson.dependencies['blip-tokens'].replace('^', '');\n    const apiUrl = `https://cdn.jsdelivr.net/npm/blip-tokens@${tokensVersion}/build/json/illustrations/${this.type}/${this.name}.json`;\n    fetch(apiUrl).then((response) =>\n      response.json().then((data) => {\n        this.IllustrationContent = data[`asset-${this.type}-${this.name}-svg`];\n      }),\n    );\n  };\n\n  render(): HTMLElement {\n    return (\n      <Host\n        role=\"img\"\n        class={{\n          'bds-illustration': true,\n        }}\n      >\n        {this.IllustrationContent ? (\n          <img\n            draggable={false}\n            src={`data:image/svg+xml;base64,${this.IllustrationContent}`}\n            alt={this.alt}\n            data-test={this.dataTest}\n          />\n        ) : (\n          <div class=\"default\" data-test={this.dataTest}></div>\n        )}\n      </Host>\n    );\n  }\n}\n"],"version":3}