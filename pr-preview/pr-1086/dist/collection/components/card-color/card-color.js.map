{"version":3,"file":"card-color.js","sourceRoot":"","sources":["../../../../src/components/card-color/card-color.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AAO1D,MAAM,OAAO,SAAS;IALtB;QAMW,gBAAW,GAAG,KAAK,CAAC;QAW7B;;WAEG;QACK,aAAQ,GAAG,KAAK,CAAC;QAOzB;;WAEG;QACK,cAAS,GAAG,KAAK,CAAC;QAE1B,uBAAkB,GAAG,CAAC,QAAQ,EAAE,EAAE;YAChC,MAAM,KAAK,GAAG,IAAI,QAAQ,EAAE,CAAC;YAC7B,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YAErC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;YAExB,qCAAqC;YACrC,UAAU,CAAC,GAAG,EAAE;gBACd,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;YAC3B,CAAC,EAAE,IAAI,CAAC,CAAC;QACX,CAAC,CAAC;KA6BH;IA3BC,MAAM;QACJ,OAAO,CACL,kEAAW,KAAK,EAAC,MAAM,EAAC,KAAK,EAAC,OAAO,EAAC,MAAM,EAAC,OAAO,EAAC,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,QAAQ,CAAC;YACxG,iEAAU,SAAS,EAAC,QAAQ,EAAC,MAAM,EAAC,MAAM;gBACxC,iEACE,MAAM,EAAC,KAAK,EACZ,GAAG,EAAC,IAAI,EACR,KAAK,EAAE;wBACL,mBAAmB,EAAE,IAAI;wBACzB,CAAC,eAAe,IAAI,CAAC,QAAQ,EAAE,CAAC,EAAE,IAAI;qBACvC,GACS;gBACZ,oFAA0B,QAAQ,iBAAa,QAAQ,EAAC,MAAM,EAAC,KAAK,IACjE,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CACnB,gBAAU,KAAK,EAAC,WAAW,EAAC,OAAO,EAAC,OAAO,EAAC,IAAI,EAAC,MAAM;;oBACnD,IAAI,CAAC,QAAQ,CACN,CACZ,CAAC,CAAC,CAAC,CACF,gBAAU,KAAK,EAAC,iBAAiB,EAAC,OAAO,EAAC,OAAO,EAAC,IAAI,EAAC,MAAM,mBAElD,CACZ,CACQ,CACF,CACD,CACb,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, h, Prop, State } from '@stencil/core';\n\n@Component({\n  tag: 'bds-card-color',\n  styleUrl: 'card-color.scss',\n  shadow: true,\n})\nexport class CardColor {\n  @State() showMessage = false;\n  /**\n   * Specifies name color, use Figma docs in Blip DS.\n   */\n  @Prop() name!: string;\n\n  /**\n   * Specifies HEX color, use Figma docs in Blip DS.\n   */\n  @Prop() hex?: string;\n\n  /**\n   * Specifies if the hex is a linear gradient\n   */\n  @Prop() gradient = false;\n\n  /**\n   * Specifies variabel sass color, _variables.scss.\n   */\n  @Prop() variable!: string;\n\n  /**\n   * If true, the text will be white\n   */\n  @Prop() lightText = false;\n\n  handleCopyVariable = (variable) => {\n    const value = `$${variable}`;\n    navigator.clipboard.writeText(value);\n\n    this.showMessage = true;\n\n    // Ocultar a mensagem apÃ³s 3 segundos\n    setTimeout(() => {\n      this.showMessage = false;\n    }, 3000);\n  };\n\n  render(): HTMLDivElement {\n    return (\n      <bds-paper class=\"card\" width=\"240px\" height=\"140px\" onClick={() => this.handleCopyVariable(this.variable)}>\n        <bds-grid direction=\"column\" height=\"100%\">\n          <bds-grid\n            height=\"70%\"\n            xxs=\"12\"\n            class={{\n              'card-color--color': true,\n              [`card-color--${this.variable}`]: true,\n            }}\n          ></bds-grid>\n          <bds-grid justify-content=\"center\" align-items=\"center\" height=\"30%\">\n            {!this.showMessage ? (\n              <bds-typo class=\"card-text\" variant=\"fs-14\" bold=\"bold\">\n                ${this.variable}\n              </bds-typo>\n            ) : (\n              <bds-typo class=\"card-text-copie\" variant=\"fs-14\" bold=\"bold\">\n                Cor copiada!\n              </bds-typo>\n            )}\n          </bds-grid>\n        </bds-grid>\n      </bds-paper>\n    );\n  }\n}\n"]}