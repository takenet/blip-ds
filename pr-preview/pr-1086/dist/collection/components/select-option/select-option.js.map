{"version":3,"file":"select-option.js","sourceRoot":"","sources":["../../../../src/components/select-option/select-option.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, h, Element, Prop, EventEmitter, Event, Method, Watch } from '@stencil/core';\r\nimport { Keyboard } from '../../utils/enums';\r\n\r\nexport type TypeOption = 'checkbox' | 'default';\r\n\r\n@Component({\r\n  tag: 'bds-select-option',\r\n  styleUrl: 'select-option.scss',\r\n  shadow: true,\r\n})\r\nexport class SelectOption {\r\n  private nativeInput?: HTMLBdsCheckboxElement;\r\n\r\n  @Element() private element: HTMLElement;\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  @Prop() value!: any;\r\n\r\n  /**\r\n   * The text value of the option.\r\n   */\r\n  @Prop() selected? = false;\r\n\r\n  /**\r\n   * If `true`, the user cannot interact with the select option.\r\n   */\r\n  @Prop() disabled? = false;\r\n\r\n  /**\r\n   * Add state danger on input, use for use feedback.\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) invisible? = false;\r\n\r\n  /**\r\n   * Add state danger on input, use for use feedback.\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) danger?: boolean = false;\r\n\r\n  /**\r\n   *  Quantity Description on option value, this item is locate to rigth in component.\r\n   */\r\n  @Prop() bulkOption? = '';\r\n\r\n  /**\r\n   *  Alignment of input-left slot. The value need to be one of the values used on flexbox align-self property.\r\n   */\r\n  @Prop() slotAlign? = 'center';\r\n\r\n  /**\r\n   *  If set, a title will be shown under the text\r\n   */\r\n  @Prop() titleText: string;\r\n\r\n  /**\r\n   *  If set, a text will be displayed on the right side of the option label\r\n   */\r\n  @Prop() status?: string;\r\n\r\n  /**\r\n   * Type Option. Used toselect type of item list.\r\n   */\r\n  @Prop({ mutable: true, reflect: true }) typeOption?: TypeOption = 'default';\r\n\r\n  /**\r\n   * If `true`, the checkbox is selected.\r\n   */\r\n  @Prop({ mutable: true, reflect: true }) checked = false;\r\n\r\n  /**\r\n   * Data test is the prop to specifically test the component action object.\r\n   */\r\n  @Prop() dataTest?: string = null;\r\n\r\n  @Event() optionSelected: EventEmitter<{ value: any; label: string }>;\r\n\r\n  @Event() optionChecked: EventEmitter<{ value: string; label: string; checked: boolean }>;\r\n\r\n  @Watch('typeOption')\r\n  protected changeSelectionType() {\r\n    this.typeOption = this.typeOption;\r\n  }\r\n\r\n  @Method()\r\n  async toggle() {\r\n    this.checked = !this.checked;\r\n  }\r\n\r\n  @Method()\r\n  async toMark() {\r\n    this.checked = true;\r\n  }\r\n\r\n  @Method()\r\n  async markOff() {\r\n    this.checked = false;\r\n  }\r\n\r\n  private refNativeInput = (input: HTMLBdsCheckboxElement): void => {\r\n    this.nativeInput = input;\r\n  };\r\n\r\n  private checkedCurrent = () => {\r\n    if (this.typeOption !== 'checkbox') return;\r\n    this.nativeInput.toggle();\r\n  };\r\n\r\n  private onClickSelectOption = (): void => {\r\n    if (this.typeOption == 'checkbox') return;\r\n    if (!this.disabled) {\r\n      this.optionSelected.emit({ value: this.value, label: this.element.innerHTML });\r\n    }\r\n  };\r\n\r\n  private optionHandle = (ev: CustomEvent): void => {\r\n    const elementChecked = ev.target as HTMLBdsCheckboxElement;\r\n    const data = { value: elementChecked.name, label: this.element.innerHTML, checked: elementChecked.checked };\r\n    this.checked = !this.checked;\r\n    this.optionChecked.emit(data);\r\n  };\r\n\r\n  private attachOptionKeyboardListeners = (event: KeyboardEvent): void => {\r\n    const element = event.target as HTMLElement;\r\n\r\n    switch (event.key) {\r\n      case Keyboard.ENTER:\r\n        this.onClickSelectOption();\r\n        break;\r\n      case Keyboard.ARROW_DOWN:\r\n        if (\r\n          element.parentElement.nextElementSibling &&\r\n          !element.parentElement.nextElementSibling.hasAttribute('invisible')\r\n        ) {\r\n          event.preventDefault();\r\n          event.stopPropagation();\r\n          (element.parentElement.nextElementSibling.firstElementChild as HTMLInputElement).focus();\r\n        }\r\n        break;\r\n      case Keyboard.ARROW_UP:\r\n        if (\r\n          element.parentElement.previousElementSibling &&\r\n          !element.parentElement.previousElementSibling.hasAttribute('invisible')\r\n        ) {\r\n          event.preventDefault();\r\n          event.stopPropagation();\r\n          (element.parentElement.previousElementSibling.firstElementChild as HTMLInputElement).focus();\r\n        }\r\n    }\r\n  };\r\n\r\n  render(): HTMLElement {\r\n    return (\r\n      <div\r\n        id={`bds-select-option-${this.value}`}\r\n        data-event=\"click\"\r\n        role=\"button\"\r\n        onKeyDown={this.attachOptionKeyboardListeners}\r\n        onClick={this.onClickSelectOption}\r\n        data-value={this.value}\r\n        data-test={this.dataTest}\r\n        class={{\r\n          'select-option': this.typeOption != 'checkbox',\r\n          'select-option--selected': this.selected,\r\n          'select-option--disabled': this.disabled,\r\n          'select-option--invisible': this.invisible,\r\n        }}\r\n      >\r\n        <div style={{ alignSelf: this.slotAlign }}>\r\n          <slot name=\"input-left\"></slot>\r\n        </div>\r\n\r\n        <div\r\n          class={{\r\n            'select-option__container': true,\r\n            'select-option__container__fill_space': !!this.status,\r\n            'select-option__container__checkbox': this.typeOption == 'checkbox',\r\n          }}\r\n          onClick={() => this.checkedCurrent()}\r\n        >\r\n          {this.titleText && (\r\n            <bds-typo class=\"select-option__container--value\" variant=\"fs-16\" bold=\"semi-bold\">\r\n              {this.titleText}\r\n            </bds-typo>\r\n          )}\r\n\r\n          {this.typeOption === 'checkbox' ? (\r\n            <bds-checkbox\r\n              ref={this.refNativeInput}\r\n              refer={`html-for-${this.value}`}\r\n              label={this.element.innerHTML}\r\n              name={this.value}\r\n              checked={this.checked}\r\n              onBdsChange={(ev) => this.optionHandle(ev)}\r\n            ></bds-checkbox>\r\n          ) : (\r\n            <bds-typo\r\n              class={{\r\n                'select-option__container--value': true,\r\n                'select-option__container__overflow': !!this.status,\r\n              }}\r\n              noWrap={!!this.status}\r\n              variant=\"fs-14\"\r\n            >\r\n              <slot />\r\n            </bds-typo>\r\n          )}\r\n        </div>\r\n        {this.bulkOption && (\r\n          <bds-typo class=\"select-option__container--bulk\" variant=\"fs-10\">\r\n            {this.bulkOption}\r\n          </bds-typo>\r\n        )}\r\n        {this.status && (\r\n          <bds-typo class=\"select-option__container--status\" noWrap={true} variant=\"fs-10\">\r\n            {this.status}\r\n          </bds-typo>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]}