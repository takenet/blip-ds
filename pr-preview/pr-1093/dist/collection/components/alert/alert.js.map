{"version":3,"file":"alert.js","sourceRoot":"","sources":["../../../../src/components/alert/alert.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAsB,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAgB,KAAK,EAAE,MAAM,eAAe,CAAC;AAQ3G,MAAM,OAAO,QAAQ;IALrB;QAME;;WAEG;QAKI,SAAI,GAAa,KAAK,CAAC;QAE9B;;WAEG;QACK,aAAQ,GAAY,IAAI,CAAC;QAEjC;;WAEG;QACK,aAAQ,GAAY,OAAO,CAAC;QA4B5B,aAAQ,GAAG,CAAC,KAAK,EAAE,EAAE;YAC3B,IAAI,KAAK,CAAC,GAAG,IAAI,OAAO,IAAI,KAAK,CAAC,GAAG,IAAI,QAAQ,EAAE,CAAC;gBAClD,IAAI,CAAC,MAAM,EAAE,CAAC;YAChB,CAAC;QACH,CAAC,CAAC;KAiBH;IA1CC;;OAEG;IAEH,KAAK,CAAC,MAAM;QACV,IAAI,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;QAEvB,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC;YACd,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE,WAAW,EAAE,QAAQ,EAAE,CAAC,CAAC;QACvD,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE,WAAW,EAAE,QAAQ,EAAE,CAAC,CAAC;QACvD,CAAC;IACH,CAAC;IAGS,aAAa;QACrB,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC;YACd,QAAQ,CAAC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QAC7D,CAAC;;YAAM,QAAQ,CAAC,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;IACvE,CAAC;IAQD,MAAM;QACJ,OAAO,CACL,4DACE,KAAK,EAAE;gBACL,aAAa,EAAE,IAAI;gBACnB,qBAAqB,EAAE,IAAI,CAAC,IAAI;gBAChC,CAAC,kBAAkB,IAAI,CAAC,QAAQ,EAAE,CAAC,EAAE,IAAI;aAC1C;YAED,4DAAK,KAAK,EAAC,OAAO,eAAY,IAAI,CAAC,QAAQ;gBACzC,8DAAa,CACT,CACF,CACP,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, ComponentInterface, h, Method, Prop, Event, EventEmitter, Watch } from '@stencil/core';\n\nexport type collapses = 'fixed' | 'contain';\n@Component({\n  tag: 'bds-alert',\n  styleUrl: 'alert.scss',\n  shadow: true,\n})\nexport class BdsAlert implements ComponentInterface {\n  /**\n   * Used to open/close the alert\n   */\n  @Prop({\n    mutable: true,\n    reflect: true,\n  })\n  public open?: boolean = false;\n\n  /**\n   * Data test is the prop to specifically test the component action object.\n   */\n  @Prop() dataTest?: string = null;\n\n  /**\n   * Define whether the component will occupy the entire screen or just the parent.\n   */\n  @Prop() position?: string = 'fixed';\n\n  /**\n   * Emitted when modal status has changed.\n   */\n  @Event() bdsAlertChanged!: EventEmitter<{ alertStatus: string }>;\n\n  /**\n   * Can be used outside to open/close the alert\n   */\n  @Method()\n  async toggle() {\n    this.open = !this.open;\n\n    if (this.open) {\n      this.bdsAlertChanged.emit({ alertStatus: 'opened' });\n    } else {\n      this.bdsAlertChanged.emit({ alertStatus: 'closed' });\n    }\n  }\n\n  @Watch('open')\n  protected isOpenChanged(): void {\n    if (this.open) {\n      document.addEventListener('keydown', this.listener, false);\n    } else document.removeEventListener('keydown', this.listener, false);\n  }\n\n  private listener = (event) => {\n    if (event.key == 'Enter' || event.key == 'Escape') {\n      this.toggle();\n    }\n  };\n\n  render() {\n    return (\n      <div\n        class={{\n          alert__dialog: true,\n          'alert__dialog--open': this.open,\n          [`alert__dialog--${this.position}`]: true,\n        }}\n      >\n        <div class=\"alert\" data-test={this.dataTest}>\n          <slot></slot>\n        </div>\n      </div>\n    );\n  }\n}\n"]}