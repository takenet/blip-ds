{"version":3,"file":"bds-input.entry.js","sources":["src/components/input/input.scss?tag=bds-input&encapsulation=shadow","src/components/input/input.tsx"],"sourcesContent":["@use '../../globals/helpers' as *;\n\n$input-padding: 8px 4px 8px 12px;\n$input-padding-label: 7px 4px 8px 12px;\n$input-padding-textarea: 12px 12px 12px 12px;\n$input-padding-textarea-label: 12px 12px 12px 12px;\n$input-width: 100%;\n\n@mixin input-text {\n  font-family: $font-family;\n  font-size: $fs-14;\n  line-height: 22px;\n}\n\n@mixin input-border($color, $boxShadow: false) {\n  border: 1px solid $color;\n  box-sizing: border-box;\n  border-radius: 8px;\n\n  @if ($boxShadow) {\n    -webkit-box-shadow: 0 0 0 2px $boxShadow;\n    box-shadow: 0 0 0 2px $boxShadow;\n  }\n}\n\n@mixin input-theme($name, $primary, $secondary, $label, $text, $border, $hover, $focus) {\n  $color-input-primary: $primary;\n  $color-input-secondary: $secondary;\n  $color-input-label: $label;\n  $color-input-text: $text;\n  $color-input-border: $border;\n  $color-input-hover: $hover;\n  $color-input-focus: $focus;\n\n  @if ($name == 'disabled') {\n    background: $color-surface-2;\n  }\n\n  @include input-border($color-input-border);\n\n  // States\n  &:hover {\n    @include input-border($color-input-primary);\n\n    @if ($name == 'disabled') {\n      @include input-border($color-input-border);\n    }\n  }\n\n  &.input--pressed {\n    @include input-border($color-input-primary, $color-input-focus);\n    .input__icon {\n      .bds-icon {\n        color: $color-input-primary;\n      }\n    }\n  }\n\n  .input__container__label {\n    color: $color-input-label;\n\n    &--pressed {\n      bds-typo {\n        color: $color-input-primary;\n      }\n    }\n  }\n\n  .input__container__text {\n    caret-color: $color-input-primary;\n    color: $color-input-text;\n  }\n}\n\n:host {\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  width: 100%;\n  max-width: 100%;\n  max-height: 100%;\n\n  input,\n  textarea {\n    box-shadow: inherit;\n    &::placeholder {\n      color: $color-content-ghost;\n      opacity: 1;\n    }\n\n    &::-webkit-input-placeholder {\n      color: $color-content-ghost;\n      opacity: 1;\n    }\n  }\n}\n\n.input {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  padding: $input-padding;\n  flex: 1;\n  width: 100%;\n  max-width: 100%;\n  max-height: 100%;\n  gap: 8px;\n\n  .bds-icon {\n    position: relative;\n    z-index: 1;\n  }\n\n  // Textarea specific styling\n  &--textarea {\n    padding: $input-padding-textarea;\n    align-items: flex-start;\n\n    &.input--label {\n      padding: $input-padding-textarea-label;\n    }\n\n    .input__icon {\n      margin-top: 1px; // Align icon with first line of text\n\n      &--textarea {\n        align-self: flex-start;\n      }\n    }\n  }\n\n  &--state {\n    &-primary {\n      .input__icon {\n        position: relative;\n        &::before {\n          content: '';\n          position: absolute;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          background-color: $color-hover;\n          z-index: 0;\n          border-radius: 8px;\n        }\n      }\n      @include input-theme(\n        'primary',\n        $color-primary,\n        $color-surface-1,\n        $color-content-default,\n        $color-content-default,\n        $color-border-1,\n        $color-primary,\n        $color-info\n      );\n    }\n\n    &-danger {\n      .input__icon {\n        position: relative;\n        &::before {\n          content: '';\n          position: absolute;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          background-color: $color-surface-negative;\n          z-index: 0;\n          opacity: 50%;\n          border-radius: 8px;\n        }\n      }\n      @include input-theme(\n        'danger',\n        $color-negative,\n        $color-error,\n        $color-delete,\n        $color-content-default,\n        $color-delete,\n        $color-delete,\n        $color-error\n      );\n    }\n\n    &-success {\n      .input__icon {\n        position: relative;\n        &::before {\n          content: '';\n          position: absolute;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          background-color: $color-surface-positive;\n          z-index: 0;\n          border-radius: 8px;\n        }\n      }\n      @include input-theme(\n        'success',\n        $color-positive,\n        $color-success,\n        $color-content-default,\n        $color-content-default,\n        $color-border-1,\n        $color-content-default,\n        $color-success\n      );\n    }\n\n    &-disabled {\n      .input__icon {\n        position: relative;\n        &::before {\n          content: '';\n          position: absolute;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          background-color: $color-hover;\n          z-index: 0;\n          opacity: 50%;\n          border-radius: 8px;\n        }\n      }\n      opacity: 50%;\n      pointer-events: none;\n      cursor: not-allowed;\n    }\n  }\n\n  & .icon-success {\n    color: $color-positive;\n    margin-left: 4px;\n    margin-top: 1px; // Align with text baseline\n  }\n\n  &--label {\n    padding: $input-padding-label;\n\n    &.input--textarea {\n      padding: $input-padding-textarea-label;\n    }\n  }\n\n  &__icon {\n    cursor: inherit;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: 8px;\n    padding: 2px;\n    flex-shrink: 0;\n\n    &--textarea {\n      align-self: flex-start;\n      margin-top: 1px;\n    }\n  }\n\n  &__container {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    width: 100%;\n    flex: 1;\n\n    &__wrapper {\n      display: flex;\n      flex-wrap: wrap;\n\n      &--textarea {\n        flex-direction: column;\n        flex-wrap: nowrap;\n      }\n    }\n\n    &__wrapper__chips {\n      @include custom-scroll();\n      display: inline;\n      max-height: 100px;\n      overflow: auto;\n    }\n\n    &__label {\n      display: flex;\n      align-items: center;\n      margin-bottom: 2px;\n    }\n\n    &__text {\n      @include reset-input();\n      @include input-text();\n      @include custom-scroll();\n\n      resize: none;\n      cursor: inherit;\n      width: 100%;\n      min-height: auto;\n\n      &--textarea {\n        resize: vertical;\n        overflow-y: auto;\n        line-height: 20px;\n        padding: 0;\n\n        // Custom scrollbar styling for textarea\n        &::-webkit-scrollbar {\n          width: 8px;\n        }\n\n        &::-webkit-scrollbar-track {\n          background: transparent;\n        }\n\n        &::-webkit-scrollbar-thumb {\n          background: $color-border-2;\n          border-radius: 4px;\n\n          &:hover {\n            background: $color-content-ghost;\n          }\n        }\n\n        // Firefox scrollbar styling\n        scrollbar-width: thin;\n        scrollbar-color: $color-border-2 transparent;\n      }\n\n      &[type='date'] {\n        &::-webkit-calendar-picker-indicator {\n          opacity: 0;\n          pointer-events: none;\n        }\n      }\n    }\n  }\n\n  &__message {\n    display: flex;\n    align-items: baseline;\n    height: 20px;\n    margin: 3.7px 2.5px;\n    gap: 4px;\n    transition: 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n    color: $color-content-disable;\n    word-break: break-word;\n    height: auto;\n    min-height: 20px;\n    bds-typo {\n      margin-top: 0px;\n      align-self: self-start;\n    }\n\n    &__icon {\n      display: flex;\n      margin-top: 0px;\n      flex-shrink: 0;\n    }\n\n    &--danger {\n      .input__message__icon {\n        .bds-icon {\n          color: $color-negative;\n        }\n      }\n      .input__message__text {\n        color: $color-negative;\n      }\n    }\n    &--success {\n      .input__message__icon {\n        .bds-icon {\n          color: $color-positive;\n        }\n      }\n      .input__message__text {\n        color: $color-content-default;\n      }\n    }\n  }\n}\n\n// Legacy classes for backward compatibility\n.input__container {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  width: 100%;\n\n  &__label {\n    display: flex;\n    align-items: center;\n  }\n}\n\n.input__container__wrapper {\n  display: flex;\n  flex-wrap: nowrap;\n}\n\n.input__container__text {\n  @include reset-input();\n  @include input-text();\n  width: 100%;\n  resize: none;\n  cursor: inherit;\n\n  &__chips {\n    width: auto;\n    min-width: 216px;\n    max-width: 216px;\n  }\n}\n","/* eslint-disable no-console */\nimport { Component, h, Prop, State, Watch, Event, EventEmitter, Method, Host } from '@stencil/core';\nimport { InputType, InputAutocapitalize, InputAutoComplete, InputCounterLengthRules } from './input-interface';\nimport { emailValidation, numberValidation } from '../../utils/validations';\n\n@Component({\n  tag: 'bds-input',\n  styleUrl: 'input.scss',\n  shadow: true,\n})\nexport class Input {\n  private nativeInput?: HTMLInputElement | HTMLTextAreaElement;\n  private autoResizeDebounceTimer?: number;\n\n  @State() isPressed? = false;\n  @State() isPassword? = false;\n  @State() validationMesage? = '';\n  @State() validationDanger? = false;\n  /**\n   * Input name, used for form identification.\n   */\n  @Prop() inputName? = '';\n\n  /**\n   * Defines the input type (e.g., `text`, `password`, etc).\n   */\n  @Prop({ reflect: true }) type?: InputType = 'text';\n\n  /**\n   * Label to be displayed above the input.\n   */\n  @Prop() label? = '';\n\n  /**\n   * Text to be displayed as a hint or placeholder in the input.\n   */\n  @Prop() placeholder?: string = '';\n\n  /**\n   * Defines automatic text capitalization (possible values: `on`, `off`).\n   */\n  @Prop() autoCapitalize?: InputAutocapitalize = 'off';\n\n  /**\n   * Defines browser autocomplete behavior (possible values: `on`, `off`).\n   */\n  @Prop() autoComplete?: InputAutoComplete = 'off';\n\n  /**\n   * Defines the maximum allowed value for the input.\n   */\n  @Prop() max?: string;\n\n  /**\n   * Defines the maximum number of characters allowed in the input.\n   */\n  @Prop() maxlength?: number;\n\n  /**\n   * Defines the minimum allowed value for the input.\n   */\n  @Prop() min?: string;\n\n  /**\n   * Defines the minimum number of characters allowed in the input.\n   */\n  @Prop() minlength?: number;\n\n  /**\n   * Makes the input read-only.\n   */\n  @Prop() readonly = false;\n\n  /**\n   * Defines if the input is required.\n   */\n  @Prop() required: boolean;\n\n  /**\n   * Defines a regex pattern that the input value must follow.\n   */\n  @Prop() pattern?: string;\n\n  /**\n   * Help message displayed below the input.\n   */\n  @Prop() helperMessage?: string = '';\n\n  /**\n   * Error message displayed when the input value is invalid.\n   */\n  @Prop({ mutable: true }) errorMessage?: string = '';\n\n  /**\n   * Message displayed when the input value is valid.\n   */\n  @Prop({ mutable: true }) successMessage?: string = '';\n\n  /**\n   * Name of the icon to be displayed inside the input.\n   */\n  @Prop({ reflect: true }) icon?: string = '';\n\n  /**\n   * Defines if the input is disabled.\n   */\n  @Prop({ reflect: true, mutable: true }) disabled?: boolean = false;\n\n  /**\n   * Defines if the input is in error state.\n   */\n  @Prop({ reflect: true, mutable: true }) danger?: boolean = false;\n\n  /**\n   * Defines if the input is in success state.\n   */\n  @Prop({ reflect: true, mutable: true }) success?: boolean = false;\n\n  /**\n   * The current value of the input.\n   */\n  @Prop({ mutable: true }) value?: string | null = '';\n\n  /**\n   * Defines whether a character length counter will be displayed.\n   */\n  @Prop() counterLength? = false;\n\n  /**\n   * Defines the character length counter rule (min, max, etc).\n   */\n  @Prop() counterLengthRule?: InputCounterLengthRules = null;\n\n  /**\n   * Defines whether the input will be submitted when pressing Enter.\n   */\n  @Prop() isSubmit = false;\n\n  /**\n   * Defines whether the input is a textarea.\n   */\n  @Prop() isTextarea = false;\n\n  /**\n   * Defines the number of lines for the textarea (if `textarea`).\n   */\n  @Prop() rows?: number = 3;\n\n  /**\n   * Defines the number of columns for the textarea (if `textarea`).\n   */\n  @Prop() cols?: number = 0;\n\n  /**\n   * Defines whether the textarea should automatically resize based on content.\n   */\n  @Prop() autoResize = true;\n\n  /**\n   * Defines whether the textarea can be manually resized by the user.\n   */\n  @Prop() resizable = false;\n\n  /**\n   * Defines the minimum height of the textarea in pixels.\n   */\n  @Prop() minHeight?: number = 60;\n\n  /**\n   * Defines the maximum height of the textarea in pixels.\n   */\n  @Prop() maxHeight?: number = 200;\n\n  /**\n   * Defines the icon size (small or medium).\n   */\n  @Prop() iconSize?: 'small' | 'medium' = 'small';\n\n  /**\n   * Error message displayed when the input is not filled and is required.\n   */\n  @Prop() requiredErrorMessage: string;\n\n  /**\n   * Error message displayed when the input value doesn't meet the minimum length requirement.\n   */\n  @Prop() minlengthErrorMessage: string;\n\n  /**\n   * Error message displayed when the input value doesn't meet the minimum allowed value.\n   */\n  @Prop() minErrorMessage: string;\n\n  /**\n   * Error message displayed when the input value doesn't meet the maximum allowed value.\n   */\n  @Prop() maxErrorMessage: string;\n\n  /**\n   * Error message displayed when the input value is not a valid email.\n   */\n  @Prop() emailErrorMessage: string;\n\n  /**\n   * Error message displayed when the input value is not a valid number.\n   */\n  @Prop() numberErrorMessage: string;\n\n  /**\n   * Defines if the input will be displayed as chips (a type of input with multiple values).\n   */\n  @Prop() chips: boolean;\n\n  /**\n   * Defines the debounce delay in milliseconds for textarea auto-resize.\n   */\n  @Prop() debounceDelay?: number = 100;\n\n  /**\n   * Data test is the prop to specifically test the component action.\n   */\n  @Prop() dataTest?: string = null;\n\n  @Prop() encode?: boolean = false;\n\n  /**\n   * Event emitted when the input value changes.\n   */\n  @Event({ bubbles: true, composed: true }) bdsChange!: EventEmitter<{ value: string }>;\n\n  /**\n   * Event emitted when the input receives input (typing).\n   */\n  @Event() bdsInput!: EventEmitter<InputEvent>;\n\n  /**\n   * Event emitted when the input loses focus.\n   */\n  @Event() bdsOnBlur: EventEmitter<void>;\n\n  /**\n   * Event emitted when the input gains focus.\n   */\n  @Event() bdsFocus: EventEmitter<void>;\n\n  /**\n   * Event emitted when the form is submitted.\n   */\n  @Event() bdsSubmit: EventEmitter<{ event: KeyboardEvent; value: string }>;\n\n  /**\n   * Event emitted for regex pattern validation.\n   */\n  @Event() bdsPatternValidation: EventEmitter<boolean>;\n\n  /**\n   * Event emitted when the \"Backspace\" key is pressed.\n   */\n  @Event() bdsKeyDownBackspace: EventEmitter<{ event: KeyboardEvent; value: string }>;\n\n  /**\n   * Sets focus to the input field.\n   */\n  @Method()\n  async setFocus(): Promise<void> {\n    this.onClickWrapper();\n  }\n\n  /**\n   * Removes focus from the input field.\n   */\n  @Method()\n  async removeFocus(): Promise<void> {\n    this.onBlur();\n  }\n\n  /**\n   * Returns the input element of the component.\n   */\n  @Method()\n  async getInputElement(): Promise<HTMLInputElement | HTMLTextAreaElement> {\n    return this.nativeInput;\n  }\n\n  /**\n   * Checks if the input field is valid.\n   */\n  @Method()\n  async isValid(): Promise<boolean> {\n    return this.nativeInput.validity.valid;\n  }\n\n  /**\n   * Clears the input field value.\n   */\n  @Method()\n  async clear(): Promise<void> {\n    this.value = '';\n  }\n\n  /**\n   * Encodes special characters for safe display (prevents HTML code injection).\n   */\n  private encodeValue(value?: string): string {\n    const lt = /</g,\n      gt = />/g,\n      ap = /'/g,\n      ic = /\"/g,\n      amp = /&/g,\n      slash = /\\//g;\nif(!this.encode) return value;\n    return (\n      value &&\n      value\n        .toString()\n        .replace(lt, '&lt;')\n        .replace(gt, '&gt;')\n        .replace(ap, '&#39;')\n        .replace(ic, '&#34;')\n        .replace(amp, '&amp;')\n        .replace(slash, '&#47;')\n    );\n  }\n\n  /**\n   * Notifies about the input field value change.\n   */\n  @Watch('value')\n  protected valueChanged(newValue: string | null): void {\n    const changeValue = this.encode ? this.encodeValue(newValue || '') : newValue || '';\n    this.bdsChange.emit({ value: changeValue });\n  }\n\n  /**\n   * Key press event handling (Enter, Backspace, etc).\n   */\n  private keyPressWrapper = (event: KeyboardEvent): void => {\n    switch (event.key) {\n      case 'Enter':\n        this.bdsSubmit.emit({ event, value: this.value });\n\n        if (this.isSubmit) {\n          this.clearTextInput();\n          event.preventDefault();\n        }\n        break;\n      case 'Backspace':\n      case 'Delete':\n        this.bdsKeyDownBackspace.emit({ event, value: this.value });\n        break;\n    }\n  };\n\n  /**\n   * Auto-resizes the textarea based on content.\n   */\n  private autoResizeTextarea(): void {\n    if (this.isTextarea && this.autoResize && this.nativeInput) {\n      const textarea = this.nativeInput as HTMLTextAreaElement;\n      \n      // Reset height to auto to get the correct scrollHeight\n      textarea.style.height = 'auto';\n      \n      // Calculate new height\n      const scrollHeight = textarea.scrollHeight;\n      const newHeight = Math.min(\n        Math.max(scrollHeight, this.minHeight || 60),\n        this.maxHeight || 200\n      );\n      \n      textarea.style.height = `${newHeight}px`;\n    }\n  }\n\n  /**\n   * Debounced version of auto-resize to improve performance during rapid input events.\n   */\n  private debouncedAutoResize(): void {\n    if (this.autoResizeDebounceTimer) {\n      clearTimeout(this.autoResizeDebounceTimer);\n    }\n    \n    this.autoResizeDebounceTimer = window.setTimeout(() => {\n      this.autoResizeTextarea();\n    }, this.debounceDelay); // Configurable debounce delay\n  }\n\n  /**\n   * Centralizes all necessary updates for the textarea, including auto-resize.\n   */\n  private updateTextarea(immediate = false): void {\n    if (this.isTextarea && this.autoResize) {\n      if (immediate) {\n        // For immediate updates (component load, prop changes)\n        this.autoResizeTextarea();\n      } else {\n        // For input events, use debounced version\n        this.debouncedAutoResize();\n      }\n    }\n  }\n\n  /**\n   * Function called when typing in the input field.\n   */\n  private onInput = (ev: InputEvent): void => {\n    this.onBdsInputValidations();\n    const input = ev.target as HTMLInputElement | HTMLTextAreaElement | null;\n    if (input) {\n      this.value = input.value || '';\n    }\n    \n    // Update textarea if needed\n    this.updateTextarea();\n    \n    this.bdsInput.emit(ev);\n  };\n\n  /**\n   * Function called when the input field loses focus.\n   */\n  private onBlur = (): void => {\n    this.onBlurValidations();\n    this.isPressed = false;\n    this.bdsOnBlur.emit();\n  };\n\n  /**\n   * Function called when the input field gains focus.\n   */\n  private onFocus = (): void => {\n    this.isPressed = true;\n    this.bdsFocus.emit();\n  };\n\n  /**\n   * Function called when clicking on the input field.\n   */\n  private onClickWrapper = (): void => {\n    this.onFocus();\n    if (this.nativeInput) {\n      this.nativeInput.focus();\n    }\n  };\n\n  /**\n   * Clears the input field value.\n   */\n  private clearTextInput = (ev?: Event) => {\n    if (!this.readonly && !this.disabled && ev) {\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n\n    this.value = '';\n\n    if (this.nativeInput) {\n      this.nativeInput.value = '';\n    }\n  };\n\n  /**\n   * Function that renders the icon inside the input field.\n   */\n  private renderIcon(): HTMLElement {\n    const iconSizeValue = this.iconSize === 'medium' ? 'medium' : 'small';\n    const isLargeIcon = this.iconSize === 'medium';\n    \n    return (\n      this.icon && (\n        <div\n          class={{\n            input__icon: true,\n            'input__icon--large': isLargeIcon,\n            'input__icon--textarea': this.isTextarea,\n          }}\n        >\n          <bds-icon\n            class=\"input__icon--color\"\n            size={iconSizeValue}\n            name={this.icon}\n            color=\"inherit\"\n          ></bds-icon>\n        </div>\n      )\n    );\n  }\n\n  /**\n   * Function that renders the label of the input field.\n   */\n  private renderLabel(): HTMLElement {\n    return (\n      this.label && (\n        <label\n          class={{\n            input__container__label: true,\n            'input__container__label--pressed': this.isPressed && !this.disabled,\n          }}\n        >\n          <bds-typo variant=\"fs-12\" bold=\"bold\">\n            {this.label}\n          </bds-typo>\n        </label>\n      )\n    );\n  }\n\n  /**\n   * Function that renders error or success messages below the input field.\n   */\n  private renderMessage(): HTMLElement {\n    const icon = this.danger ? 'error' : this.success ? 'checkball' : 'info';\n    let message = this.danger ? this.errorMessage : this.success ? this.successMessage : this.helperMessage;\n\n    if (!message && this.validationDanger) message = this.validationMesage;\n\n    const styles =\n      this.danger || this.validationDanger\n        ? 'input__message input__message--danger'\n        : this.success\n          ? 'input__message input__message--success'\n          : 'input__message';\n\n    if (message) {\n      return (\n        <div class={styles} part=\"input__message\">\n          <div class=\"input__message__icon\">\n            <bds-icon size=\"x-small\" name={icon} theme=\"outline\" color=\"inherit\"></bds-icon>\n          </div>\n          <bds-typo class=\"input__message__text\" variant=\"fs-12\">\n            {message}\n          </bds-typo>\n        </div>\n      );\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Validates the input field when it loses focus.\n   */\n  private onBlurValidations() {\n    this.required && this.requiredValidation();\n    this.pattern && this.patternValidation();\n    (this.minlength || this.maxlength) && this.lengthValidation();\n    (this.min || this.max) && this.minMaxValidation();\n    this.checkValidity();\n  }\n\n  /**\n   * Performs field validations while the user types.\n   */\n  private onBdsInputValidations() {\n    this.type === 'email' && this.emailValidation();\n    this.type === 'phonenumber' && this.numberValidation();\n    this.checkValidity();\n  }\n\n  /**\n   * Validates the regex pattern of the field.\n   */\n  private patternValidation() {\n    const regex = new RegExp(this.pattern);\n    this.bdsPatternValidation.emit(regex.test(this.nativeInput.value));\n  }\n\n  /**\n   * Validates if the field is required.\n   */\n  private requiredValidation() {\n    if (this.nativeInput.validity.valueMissing) {\n      this.validationMesage = this.requiredErrorMessage;\n      this.validationDanger = true;\n    }\n  }\n\n  /**\n   * Validates the text length in the input field.\n   */\n  private lengthValidation() {\n    if (this.nativeInput.validity.tooShort) {\n      this.validationMesage = this.minlengthErrorMessage;\n      this.validationDanger = true;\n      return;\n    }\n\n    if (this.nativeInput.validity.tooLong) {\n      this.validationDanger = true;\n      return;\n    }\n  }\n\n  /**\n   * Validates the minimum and maximum values of the input field.\n   */\n  private minMaxValidation() {\n    if (this.nativeInput.validity.rangeUnderflow) {\n      this.validationMesage = this.minErrorMessage;\n      this.validationDanger = true;\n      return;\n    }\n\n    if (this.nativeInput.validity.rangeOverflow) {\n      this.validationMesage = this.maxErrorMessage;\n      this.validationDanger = true;\n      return;\n    }\n  }\n\n  /**\n   * Validates if the field contains a valid email.\n   */\n  private emailValidation() {\n    if (emailValidation(this.nativeInput.value)) {\n      this.validationMesage = this.emailErrorMessage;\n      this.validationDanger = true;\n    }\n  }\n\n  /**\n   * Validates if the field contains a valid number.\n   */\n  private numberValidation() {\n    if (numberValidation(this.nativeInput.value)) {\n      this.validationMesage = this.numberErrorMessage;\n      this.validationDanger = true;\n    }\n  }\n\n  /**\n   * Checks if the input field is valid.\n   */\n  private checkValidity() {\n    if (this.nativeInput.validity.valid) {\n      this.validationDanger = false;\n    }\n  }\n\n  /**\n   * Updates the input field value after changes.\n   */\n  componentDidUpdate() {\n    if (this.nativeInput && this.value != this.nativeInput.value) {\n      this.nativeInput.value = this.value;\n    }\n    \n    // Update textarea after value changes (immediate for prop changes)\n    this.updateTextarea(true);\n  }\n\n  /**\n   * Initial configurations after the component loads.\n   */\n  componentDidLoad() {\n    // Set initial height for textarea (immediate for initial load)\n    this.updateTextarea(true);\n  }\n\n  /**\n   * Cleanup when component is destroyed.\n   */\n  disconnectedCallback() {\n    if (this.autoResizeDebounceTimer) {\n      window.clearTimeout(this.autoResizeDebounceTimer);\n    }\n  }\n\n  render(): HTMLElement {\n    const isPressed = this.isPressed && !this.disabled;\n    const Element = this.isTextarea ? 'textarea' : 'input';\n\n    return (\n      <Host aria-disabled={this.disabled ? 'true' : null}>\n        <div\n          class={{\n            input: true,\n            'input--state-primary': !this.danger && !this.validationDanger,\n            'input--state-danger': this.danger || this.validationDanger,\n            'input--state-success': this.success,\n            'input--state-disabled': this.disabled,\n            'input--label': !!this.label,\n            'input--pressed': isPressed,\n            'input--textarea': this.isTextarea,\n          }}\n          onClick={this.onClickWrapper}\n          onKeyDown={this.keyPressWrapper}\n          part=\"input-container\"\n        >\n          {this.renderIcon()}\n          <slot name=\"input-left\"></slot>\n          <div class=\"input__container\">\n            {this.renderLabel()}\n            <div class={{ \n              input__container__wrapper: !this.chips, \n              input__container__wrapper__chips: this.chips,\n              'input__container__wrapper--textarea': this.isTextarea\n            }}>\n              <slot name=\"inside-input-left\"></slot>\n              <Element\n                class={{ \n                  input__container__text: true, \n                  input__container__text__chips: this.chips,\n                  'input__container__text--textarea': this.isTextarea\n                }}\n                ref={(input) => (this.nativeInput = input)}\n                rows={this.isTextarea ? this.rows : undefined}\n                cols={this.isTextarea ? this.cols : undefined}\n                autocapitalize={this.autoCapitalize}\n                autocomplete={this.autoComplete}\n                disabled={this.disabled}\n                min={this.min}\n                max={this.max}\n                minLength={this.minlength}\n                maxLength={this.maxlength}\n                name={this.inputName}\n                onBlur={this.onBlur}\n                onFocus={this.onFocus}\n                onInput={this.onInput}\n                placeholder={this.placeholder}\n                readOnly={this.readonly}\n                type={this.isTextarea ? undefined : this.type}\n                value={this.encodeValue(this.value)}\n                pattern={this.pattern}\n                required={this.required}\n                part=\"input\"\n                data-test={this.dataTest}\n                style={this.isTextarea ? {\n                  minHeight: `${this.minHeight || 60}px`,\n                  maxHeight: `${this.maxHeight || 200}px`,\n                  resize: this.resizable ? (this.autoResize ? 'none' : 'vertical') : 'none'\n                } : {}}\n              ></Element>\n            </div>\n          </div>\n          {this.counterLength && (\n            <bds-counter-text\n              length={this.value.length}\n              max={this.maxlength}\n              active={isPressed}\n              {...this.counterLengthRule}\n            />\n          )}\n          {this.success && <bds-icon class=\"icon-success\" name=\"check\" theme=\"outline\" size=\"small\" />}\n          <slot name=\"input-right\" />\n        </div>\n        {this.renderMessage()}\n      </Host>\n    );\n  }\n}\n"],"names":[],"mappings":"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"}